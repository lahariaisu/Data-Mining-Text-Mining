*------------------------------------------------------------*
* Training Log
Date:                November 26, 2023
Time:                18:18:21
*------------------------------------------------------------*
15225  proc freq data=EMWS3.FIMPORT4_VariableSet noprint;
15226  table ROLE*LEVEL/out=WORK.FIMPORT4META;
15227  run;

NOTE: There were 3 observations read from the data set EMWS3.FIMPORT4_VARIABLESET.
NOTE: The data set WORK.FIMPORT4META has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      

15228  proc print data=WORK.FIMPORT4META label noobs;
15229  var ROLE LEVEL COUNT;
15230  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15231  title9 ' ';
15232  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15233  run;

NOTE: There were 3 observations read from the data set WORK.FIMPORT4META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

15234  title10;

15235  %let EMEXCEPTIONSTRING=;
15562  *------------------------------------------------------------*;
15563  * FIMPORT4: Generation of macros and macro variables;
15564  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15565  *------------------------------------------------------------*;

15566  %let EMEXCEPTIONSTRING=;
15567  *------------------------------------------------------------*;
15568  * TRAIN: FIMPORT4;
15569  *------------------------------------------------------------*;
15570  %let EM_ACTION = TRAIN;
15571  %let syscc = 0;
15572  /* Fimport.source */
15573  %macro main;
15574        %if %upcase(&EM_ACTION) = CREATE %then %do;
15575           filename temp catalog 'sashelp.emsamp.Fimport_create.source';
15576           %include temp;
15577           filename temp;
15578           %create;
15579        %end;
15580        %else
15581        %if %upcase(&EM_ACTION) = TRAIN %then %do;
15582           filename temp catalog 'sashelp.emsamp.Fimport_train.source';
15583           %include temp;
15584           filename temp;
15585           %train;
15586        %end;
15587        %else
15588        %if %upcase(&EM_ACTION) = UPDATE %then %do;
15589           filename temp catalog 'sashelp.emsamp.Fimport_update.source';
15590           %include temp;
15591           filename temp;
15592           %update;
15593        %end;
15594        %else
15595        %if %upcase(&EM_ACTION) = PROPERTY %then %do;
15596           filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
15597           %include temp;
15598           filename temp;
15599           %property;
15600        %end;
15601         %else
15602        %if %upcase(&EM_ACTION) = SCORE %then %do;
15603           filename temp catalog 'sashelp.emsamp.Fimport_score.source';
15604           %include temp;
15605           filename temp;
15606           %score;
15607        %end;
15608        %else
15609        %if %upcase(&EM_ACTION) = REPORT %then %do;
15610           filename temp catalog 'sashelp.emsamp.Fimport_report.source';
15611           %include temp;
15612           filename temp;
15613           %report;
15614        %end;
15615        %else
15616        %if %upcase(&EM_ACTION) = OPENVARIABLESET %then %do;
15617           filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
15618           %include temp;
15619           filename temp;
15620           %openvariableset;
15621        %end;
15622        %else
15623        %if %upcase(&EM_ACTION) = CLOSEVARIABLESET %then %do;
15624           filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
15625           %include temp;
15626           filename temp;
15627           %closevariableset;
15628        %end;
15629  %mend main;
15630  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMSAMP.FIMPORT_TRAIN.SOURCE.
15631 +%EM_GETNAME(key=USERIMPORTFILE, type=FILE, extension=txt);
15632 +%macro appendExt;
15633 +   data _null_;
15634 +      tempuif =  trim("&EM_USER_USERIMPORTFILE");
15635 +      rfile = reverse(tempuif);
15636 +      period = indexc(rfile,".");
15637 +      uif = substr(tempuif, 1, length(tempuif)- period+1);
15638 +      newuif = trim(uif)||trim("&EM_PROPERTY_FILETYPE");
15639 +      call symput("EM_USER_USERIMPORTFILE",%bquote(newuif));
15640 +   run;
15641 +%mend appendExt;
15643 +%macro getNobs(ds);
15644 + %global dset nobs;
15645 + %let dset=&ds;
15646 + %let dsid = %sysfunc(open(&dset));
15647 + %if &dsid %then %do;
15648 +      %let nobs =%sysfunc(attrn(&dsid,nobs));
15649 +      %let rc = %sysfunc(close(&dsid));
15650 +   %end;
15651 + %else %put open for data set &dset failed - %sysfunc(sysmsg());
15652 +%mend getNobs;
15653 +%macro keepordrop;
15654 +  proc contents data=work.importfile noprint
15655 +  out=work.importattrs;
15656 +  run;
15657 +  %getNobs(work.importattrs);
15658 +  data _null_;
15659 +    set  work.importattrs;
15660 +    call symput("varname"||left(_n_),name);
15661 +  run;
15663 +  %put nobs=&nobs  maxcols=&EM_PROPERTY_MAXCOLS;
15664 +  /* importattrs contains 1 observation for each VARIABLE in the data set. */
15665 +  %if &nobs > &EM_PROPERTY_MAXCOLS %then %do;
15666 +     %let diff = %eval(&nobs - &EM_PROPERTY_MAXCOLS);
15667 +     %put diff=&diff;
15668 +     %if %eval(&diff ge &EM_PROPERTY_MAXCOLS) %then %do;
15669 +         %let kORd = keep;
15670 +             %let start=1;
15671 +             %let end = &EM_PROPERTY_MAXCOLS;
15672 +       %end;
15673 +     %else %do;
15674 +         %let kORd = drop;
15675 +             %let start = &EM_PROPERTY_MAXCOLS + 1;
15676 +             %let end = &nobs;
15677 +       %end;
15678 +     data &em_user_data;
15679 +        set &em_user_data;
15680 +        &kORd
15681 +        %do i = &start %to &end;
15682 +            &&varname&i
15683 +         %end;
15684 +        ;
15685 +     run;
15686 +%end;
15687 +%mend keepordrop;
15688 +%macro dropformatvars;
15689 +   %put fmtcnt=&fmtcnt;
15690 +   data new;
15691 +     set work.importfile;
15692 +     %do i = 1 %to &fmtcnt;
15693 +       x1zy&i =put(&&varname&i,&&fmt&i);
15694 +     %end;
15695 +   run;
15696 +   data new;
15697 +     set new;
15698 +     drop
15699 +     %do i = 1 %to &fmtcnt;
15700 +     &&varname&i
15701 +     %end;
15702 +     ;
15703 +   run;
15704 +   proc datasets library=work nolist;
15705 +     modify new;
15706 +     %do i = 1 %to &fmtcnt;
15707 +     rename x1zy&i=&&varname&i;
15708 +     %end;
15709 +   run; quit;
15710 +   data work.importfile;
15711 +     set new;
15712 +   run;
15713 +%mend;
15715 +%macro procimport(out=);
15716 +   %if %upcase(&EM_PROPERTY_FILETYPE)=MDB %then %do;
15717 +      proc import table=%sysfunc(trim(&EM_PROPERTY_ACCESSTABLE))
15718 +         out=&out
15719 +         dbms = ACCESS
15720 +         replace;
15721 +         database="%trim(&_IFILENAME)"
15722 +   %end;
15723 +   %else %do;
15724 +       proc import datafile="%trim(&_IFILENAME)"
15725 +          out=&out
15727 +      %put filetype=*&EM_PROPERTY_FILETYPE.*;
15728 +      %put delimiter=*&EM_PROPERTY_DELIMITER.*;
15729 +      %if %upcase(&EM_PROPERTY_FILETYPE) ^= TXT %then %do;
15730 +         dbms=&EM_PROPERTY_FILETYPE
15731 +      %end;
15732 +      %else %do;
15733 +         dbms=TAB
15734 +      %end;
15735 +      /* Work around for the following defects:S0560899 and S0560009.   */
15736 +      %let sasEnv=%sysfunc(getlocenv());
15737 +      %if %upcase(&EM_PROPERTY_FILETYPE) = XLS and %upcase(&sasEnv) ^= SBCS %then %do;
15738 +         dbms=EXCEL
15739 +      %end;
15741 +      replace;
15742 +      %if %substr(%upcase(&EM_PROPERTY_FILETYPE),1,2)=WK | %upcase(&EM_PROPERTY_FILETYPE)=XLS
15743 +       | %upcase(&EM_PROPERTY_FILETYPE)=DLM | %upcase(&EM_PROPERTY_FILETYPE)=CSV
15744 +       | %upcase(&EM_PROPERTY_FILETYPE)=TAB | %upcase(&EM_PROPERTY_FILETYPE)=TXT %then %do;
15745 +        %if %length(&EM_PROPERTY_NAMEROW) > 0 %then %do;
15746 +            getnames=&EM_PROPERTY_NAMEROW;
15747 +        %end;
15748 +      %end;
15749 +      %if %upcase(&EM_PROPERTY_FILETYPE)=CSV | %upcase(&EM_PROPERTY_FILETYPE)=DLM |
15750 +          %upcase(&EM_PROPERTY_FILETYPE=TXT)  %then %do;
15751 +         %if (%length(%trim(%bquote(&EM_PROPERTY_DELIMITER))) > 0) %then %do;
15752 +            %if "%upcase(&EM_PROPERTY_DELIMITER)"="SP" %then %do;
15753 +               delimiter=" ";
15754 +            %end;
15755 +            %else %if "%upcase(&EM_PROPERTY_DELIMITER)"="TAB" %then %do;
15756 +               /* Do not specifiy a delimiter */
15757 +            %end;
15758 +            %else %do;
15759 +               delimiter="&EM_PROPERTY_DELIMITER";
15760 +            %end;
15761 +         %end;
15762 +         %if %eval(&EM_PROPERTY_SKIPROWS > 0) %then %do;
15763 +            datarow=&EM_PROPERTY_SKIPROWS;
15764 +            /* Guessingrows must be >= skiprows */
15765 +            %if %eval(&EM_PROPERTY_GUESSROWS < &EM_PROPERTY_SKIPROWS ) %then %do;
15766 +              %let EM_PROPERTY_GUESSROWS = &EM_PROPERTY_SKIPROWS;
15767 +            %end;
15768 +         %end;
15769 +         %if %eval(&EM_PROPERTY_GUESSROWS > 0) %then %do;
15770 +            guessingrows=&EM_PROPERTY_GUESSROWS;
15771 +         %end;
15772 +       %end;
15773 +      %if %upcase(&EM_PROPERTY_FILETYPE)=DTA | %upcase(&EM_PROPERTY_FILETYPE)=JMP
15774 +                 | %upcase(&EM_PROPERTY_FILETYPE)=SAV %then %do;
15775 +            FMTLIB = work.formats;
15776 +      %end;
15777 +   %end;
15778 +   run;
15779 +%mend procimport;
15781 +%macro train;
15783 +   %let vvnString = %sysfunc(getoption(validvarname));
15785 +   %em_getname(key=DATA,           type=DATA);
15786 +   %em_getname(key=EMCMETADEFAULT, type=DATA);
15787 +   %em_getname(key=EMTMETADEFAULT, type=DATA);
15788 +   %em_getname(key=EMSTATDEFAULT, type=DATA);
15790 +   %appendExt;
15792 +   %let _IFILENAME = %nrbquote(%trim(&EM_PROPERTY_IFILENAME));
15793 +   %if %upcase(&EM_PROPERTY_IMPORTTYPE) = LOCAL %then %do;
15794 +       %if %nrbquote(%sysfunc(fileexist(&EM_USER_USERIMPORTFILE))) %then
15795 +           %let _IFILENAME = %nrbquote(&EM_USER_USERIMPORTFILE);
15796 +   %end;
15798 +   %if ^%sysfunc(fileexist(%nrbquote(&_IFILENAME))) %then %do;
15799 +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTRAININGCODEFILE,%nrbquote(&_IFILENAME);
15800 +       %goto endtrain;
15801 +   %end;
15803 +   options validvarname=ANY;
15804 +   %procimport(out=work.importfile);
15806 +   %if %upcase(&EM_PROPERTY_FILETYPE) = DTA | %upcase(&EM_PROPERTY_FILETYPE) = JMP
15807 +              | %upcase(&EM_PROPERTY_FILETYPE)=SAV %then %do;
15808 +      %global fmtcnt;
15809 +      %let fmtcnt=0;
15810 +      proc contents data=work.importfile out=work.impattrs noprint;
15811 +      run;
15812 +      data _null_;
15813 +        set work.impattrs;
15814 +        if _n_=1 then i=0;
15815 +        if substr(format,1,1) ^= "$" and length(trim(format)) > 1 then do;
15816 +           i = i+1;
15817 +           varname = substr(name, 1, length(name));
15818 +           call symput("fmt"||left(i), trim(format)||".");
15819 +           call symput("varname"||left(i), varname);
15820 +           call symput("fmtcnt",left(i));
15821 +      end;
15822 +      retain i;
15823 +     run;
15824 +    %if &fmtcnt > 0 %then %do;
15825 +       %dropformatvars;
15826 +    %end;
15827 +    proc datasets lib=work memtype=data nolist;
15828 +        modify importfile;
15829 +        attrib _all_ format=;
15830 +    run;
15831 +    quit;
15832 +   %end;
15834 +   %let _fimportObs  = 0;
15835 +   %let _fimportVars = 0;
15836 +   %if %sysfunc(exist(work.importFile)) %then %do;
15837 +       %let dsid = %sysfunc(open(work.importFile));
15838 +       %if &dsid %then %do;
15839 +           %let _fimportObs  = %sysfunc(attrn(&dsid, NOBS));
15840 +           %let _fimportVars = %sysfunc(attrn(&dsid, NVARS));
15841 +       %let dsid = %sysfunc(close(&dsid));
15842 +       %end;
15843 +   %end;
15845 +   %if ^&_fimportObs %then %do;
15846 +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.FILE_NO_OBS;
15847 +       %goto endtrain;
15848 +   %end;
15849 +   %if ^&_fimportVars %then %do;
15850 +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.FILE_NO_VARS;
15851 +       %goto endtrain;
15852 +   %end;
15854 +   data &em_user_data;
15855 +      set work.importfile(obs=&EM_PROPERTY_MAXROWS);
15856 +   run;
15857 +   %keepordrop;
15859 +   %em_getname(key=EMSTAT,     type=DATA);
15861 +   proc datasets lib=&em_lib nolist;
15862 +      delete &em_nodeid._EMSTATDEFAULT &em_nodeid._EMINFO;
15863 +   run;
15865 +   %if "&em_property_advancedadvisor" eq "Y" %then %do;
15866 +        %EmAdviseColumns(&em_user_data, applyIntervalLevelLowerLimit=Y,
15867 +            intervalLevelLowerLimit=20, applyMaxPercentMissing=Y,
15868 +            maxPercentMissing=50, applyMaxClassLevels=Y,
15869 +            maxClassLevels=20, identifyEmptyColumns=Y,
15870 +            outdata=&em_user_EMCMETADEFAULT,
15871 +            computeStat=Y, statisticData=&em_user_EMSTATDEFAULT);
15873 +        data &em_user_emcmetadefault;
15874 +           set &em_user_emcmetadefault;
15875 +           drop nlevel pctmiss min max mean std skewness kurtosis;
15876 +        run;
15878 +        data &em_data_eminfo;
15879 +           length TARGET KEY $32  DATA $43;
15880 +           TARGET=""; KEY="STATS"; DATA="&em_user_emstatdefault"; output;
15881 +        run;
15883 +        %let EM_META_ADVISOR=ADVANCED;
15885 +   %end;
15886 +   %else %do;
15887 +       %EmAdviseColumns(&em_user_data, applyIntervalLevelLowerLimit=N,
15888 +            applyMaxPercentMissing=N, applyMaxClassLevels=N,
15889 +            identifyEmptyColumns=N,   maxLevelDetection=0,
15890 +            outdata=&em_user_EMCMETADEFAULT, computeStat=N, statisticData=WORK.STATISTIC);
15892 +            %if "&em_property_summarize" eq "Y" %then %do;
15893 +                %em_getname(key=EMSTAT,  type=DATA);
15894 +                data &em_data_eminfo;
15895 +                   length TARGET KEY $32  DATA $43;
15896 +                   TARGET=""; KEY="STATS"; DATA="&em_user_emstat"; output;
15897 +                run;
15898 +            %end;
15900 +        %let EM_META_ADVISOR=BASIC;
15902 +   %end;
15904 +   %em_getname(key=VVNLABEL, type=FILE, extension=sas);
15905 +   data _null_;
15906 +      fname = '_text';
15907 +      rc=filename(fname, "&em_user_vvnlabel");
15908 +      if ^rc and fexist(fname) then
15909 +         rc=fdelete(fname);
15910 +     rc=filename(fname);
15911 +   run;
15914 +   /* Validvarname Case */
15915 +   %let newNameFlag = 0;
15916 +   %if %sysfunc(exist(&em_user_EMCMETADEFAULT)) %then %do;
15917 +       %let dsid = %sysfunc(open(&em_user_EMCMETADEFAULT));
15918 +        %if &dsid %then %do;
15919 +            %let newNameFlag = %sysfunc(varnum(&dsid, NEWNAME));
15920 +            %let dsid = %sysfunc(close(&dsid));
15921 +       %end;
15922 +   %end;
15924 +   %if %sysevalf(&newNameFlag>0) %then %do;
15925 +       proc contents data=work.importfile noprint out=work._any(keep=VARNUM NAME LABEL);
15926 +       run;
15927 +       proc sort data=work._any; by VARNUM; run; quit;
15929 +       options validvarname=V7;
15931 +       %procimport(out=work.importfile2);
15933 +       options validvarname=ANY;
15935 +       proc contents data=work.importfile2 noprint out=work._v7(rename=(NAME=V7NAME) keep=VARNUM NAME LABEL);
15936 +       run;
15937 +       proc sort data=work._v7; by varnum; run; quit;
15939 +       filename _FI "&em_user_vvnlabel";
15940 +       data work._names;
15941 +          length string $200;
15942 +          merge work._v7 work._any;
15943 +          by VARNUM;
15944 +          file _FI;
15945 +          if V7NAME ne NAME then do;
15946 +             string = trim(V7NAME)!!'= "'!!tranwrd(trim(NAME), '"', '""')!!'"n;';
15947 +             put string;
15948 +             if LABEL eq '' then do;
15949 +                string = 'Label '!!trim(V7NAME)!!"='"!!tranwrd(trim(NAME), "'", "''")!!"';";
15950 +                put string;
15951 +             end;
15952 +             string='drop "'!!tranwrd(trim(NAME), '"', '""')!!'"n;';
15953 +             put string;
15954 +          end;
15955 +          drop string;
15956 +       run;
15957 +       data &em_user_data;
15958 +          set &em_user_data;
15959 +          %if %sysfunc(fileexist(%nrbquote(&em_user_vvnlabel))) %then %do;
15960 +              filename _FI "&em_user_vvnlabel";
15961 +              %inc _FI;
15962 +             filename _FI;
15963 +          %end;
15964 +       run;
15966 +       proc sort data=&em_user_EMCMETADEFAULT; by NAME; run;
15967 +       proc sort data=work._names;             by NAME; run;
15969 +       data &em_user_EMCMETADEFAULT;
15970 +         merge  &em_user_EMCMETADEFAULT _names;
15971 +         by NAME;
15972 +         length DROP $1;
15973 +         DROP='N';
15974 +         if NEWNAME ne NAME then do;
15975 +            if LABEL eq '' then do;
15976 +               LABEL = NAME;
15977 +            end;
15978 +            NAME=V7NAME;
15979 +         end;
15980 +         drop NEWNAME V7NAME VARNUM;
15981 +       run;
15983 +       proc datasets lib=work nolist;
15984 +          delete _any _v7 _names importfile2;
15985 +       run;
15986 +       quit;
15988 +   %end;
15989 +   %else %do;
15990 +       data &em_user_EMCMETADEFAULT;
15991 +          set &em_user_EMCMETADEFAULT;
15992 +          length DROP $1;
15993 +          DROP='N';
15994 +       run;
15995 +   %end;
15997 +    %EmAdviseTable(&em_user_data, outdata=&em_user_EMTMETADEFAULT, newdataflag=Y);
15999 +   data _temp;
16000 +      set &em_user_emtmetadefault(rename=(ROLE=PORT MEMNAME=DATASET CRDATE=MODTIME));
16001 +      keep PORT LIBNAME DATASET MODTIME COLUMNMETA COLUMNMETAMODTIME NOBS;
16002 +      PORT='DATA'; COLUMNMETA="&em_nodeid._EMCMETADEFAULT";
16003 +      COLUMNMETAMODTIME=MODTIME;
16004 +   run;
16005 +   proc sort data=&em_data_importset;
16006 +      by PORT;
16007 +   run;
16008 +   data &em_data_importset;
16009 +      merge &em_data_importset _temp;
16010 +      by PORT;
16011 +      if PORT='DATA' then ROLE="&em_property_role";
16012 +   run;
16014 +    %em_getname(key=VARIABLESETDELTA, type=FILE, extension=txt);
16016 +    %if %sysfunc(exist(&em_user_emcmetadefault)) %then %do;
16017 +        %if %sysfunc(fileexist(&em_user_variablesetdelta)) %then %do;
16018 +            filename x "&em_user_variablesetdelta";
16019 +            data &em_data_variableset;
16020 +               set &em_user_emcmetadefault;
16021 +               %inc X;
16022 +            run;
16023 +            filename x;
16024 +        %end;
16025 +        %else %do;
16026 +            data &em_data_variableset;
16027 +               set &em_user_emcmetadefault;
16028 +            run;
16029 +        %end;
16030 +    %end;
16032 +   %if %sysfunc(exist(&em_data_variableset)) and %sysfunc(exist(&em_user_emcmetadefault)) %then %do;
16033 +      proc compare compare=&em_data_variableset base=&em_user_emcmetadefault
16034 +         noprint outnoequal outbase outcomp out=_DiffMeta noprint;
16035 +         id NAME;
16036 +      run;
16038 +         filename x1 "&EM_FILE_CDELTA_TRAIN";
16039 +         data _null_;
16040 +            length string $200;
16041 +            set _DiffMeta end=eof;
16042 +            where _type_='COMPARE';
16043 +            file x1;
16044 +            string = 'if NAME="'!!strip(NAME)!!'" then do;';
16045 +            put string;
16046 +            string = '   ROLE="'!!strip(ROLE)!!'";';
16047 +            put string;
16048 +            string=  '   LEVEL="'!!strip(LEVEL)!!'";';
16049 +            put string;
16050 +            string = '   ORDER="'!!strip(ORDER)!!'";';
16051 +            put string;
16052 +            put 'end;';
16053 +            if drop='Y' then do;
16054 +               string='if NAME="'!!strip(NAME)!!'" then delete;';
16055 +               put string;
16056 +            end;
16057 +            if eof then
16058 +               put 'drop DROP;';
16059 +         run;
16061 +         %em_getname(key=DELTACODE,      type=FILE, extension=txt);
16062 +         filename x2 "&em_user_deltacode";
16063 +         %em_copyfile(infref=x1, outfref=x2);
16064 +         filename x1;
16065 +         filename x2;
16067 +         %em_getname(key=VARIABLESETDELTA, type=FILE, extension=txt);
16068 +         filename x "&em_user_variablesetdelta";
16069 +         data _null_;
16070 +            length string $200;
16071 +            set _DiffMeta end=eof;
16072 +            where _type_='COMPARE';
16073 +            file x;
16074 +            string = 'if NAME="'!!strip(NAME)!!'" then do;';
16075 +            put string;
16076 +            string = '   ROLE="'!!strip(ROLE)!!'";';
16077 +            put string;
16078 +            string=  '   LEVEL="'!!strip(LEVEL)!!'";';
16079 +            put string;
16080 +            string = '   ORDER="'!!strip(ORDER)!!'";';
16081 +            put string;
16082 +            string = '   DROP="'!!strip(DROP)!!'";';
16083 +            put string;
16084 +            put 'end;';
16085 +         run;
16086 +         filename x;
16087 +       proc datasets lib=work nolist;
16088 +          delete _DiffMeta;
16089 +       run;
16091 +       data &em_data_exportset;
16092 +          set &em_data_exportset;
16093 +          if NODEPORT='TRAIN' then do;
16094 +             ROLE="&em_property_role";
16095 +             COLUMNMETAMODTIME=datetime();
16096 +             MODTIME=datetime();
16097 +             DATASET="&em_nodeid._train";
16098 +             COLUMNMETA="&em_nodeid._CMeta_TRAIN";
16099 +             DELTACODE="CDelta_TRAIN";
16100 +             APPLYDELTA='Y';
16101 +             EXPORT='Y';
16102 +             NEEDUPDATE='Y';
16104 +            %if "&em_property_advancedadvisor" eq "Y" %then %do;
16105 +                EMINFO="&em_data_eminfo";
16106 +                EMINFOMODTIME=datetime();
16107 +            %end;
16108 +            %else %do;
16109 +                EMINFO='';
16110 +                EMINFOMODTIME=.;
16111 +            %end;
16112 +          end;
16113 +       run;
16114 +   %end;
16116 +  proc contents data=&em_user_data;
16117 +  run;
16118 +  proc datasets library=work nolist;
16119 +   delete importfile importattrs new;
16120 +   quit;
16121 +  run;
16123 +  /* Reset VALIDVARNAME to original settings */
16124 +  options validvarname=&vvnString;
16126 +  %endtrain:
16127 +%mend train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

filetype=*xlsx*
delimiter=*,*

NOTE: One or more variables were converted because the data type is not supported by the V9 engine. For more details, run with options MSGLEVEL=I.
NOTE: The import data set has 16 observations and 3 variables.
NOTE: WORK.IMPORTFILE data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 16 observations read from the data set WORK.IMPORTFILE.
NOTE: The data set EMWS3.FIMPORT4_DATA has 16 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK.IMPORTATTRS has 3 observations and 41 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      23:137   
NOTE: There were 3 observations read from the data set WORK.IMPORTATTRS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

nobs=3  maxcols=10000

NOTE: The file EMWS3.FIMPORT4_EMSTATDEFAULT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file EMWS3.FIMPORT4_EMINFO (memtype=DATA) was not found, but appears on a DELETE statement.

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.10 seconds
      cpu time            0.04 seconds
      


16128  %let SYSCC = 0;
16129  %let _dsidTable = 0;
16130  %let _engineTable =;
16131  data _null_;
16132  dsid = open('EMWS3.FIMPORT4_DATA');
16133  call symput('_dsidTable', strip(put(dsid, best.)));
16134  if dsid then do;
16135  call symput('_engineTable', attrc(dsid, 'ENGINE'));
16136  dsid = close(dsid);
16137  end;
16138  run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16139  options fmterr;
16140  data _metaTestView;
16141  set EMWS3.FIMPORT4_DATA;
16142  if _N_=1 then do;
16143  output;
16144  stop;
16145  end;
16146  run;

NOTE: There were 1 observations read from the data set EMWS3.FIMPORT4_DATA.
NOTE: The data set WORK._METATESTVIEW has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

16147  proc contents data=EMWS3.FIMPORT4_DATA
16148  out=WORK.M2SVJRDR noprint;
16149  run;

NOTE: The data set WORK.M2SVJRDR has 3 observations and 41 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16150  data WORK.M2SVJRDR;
16151  length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
16152  label NAME =;
16153  set WORK.M2SVJRDR(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
16154  if itype = 1 then type = 'N';
16155  else type = 'C';
16156  if formatl > 0 then do;
16157  if format ne '' then do;
16158  if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
16159  else format = strip(format)!!strip(put(formatl, best12.))!!'.';
16160  end;
16161  else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
16162  end;
16163  else if format ne '' then format = strip(format)!!'.';
16164  if informl > 0 then do;
16165  if informat ne ' ' then do;
16166  if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
16167  else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
16168  end;
16169  else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
16170  end;
16171  else if informat ne '' then informat = strip(informat)!!'.';
16172  if idxusage = 'NONE' then index ="N";
16173  else index = "Y";
16174  indextype = idxusage;
16175  drop idxusage itype formatl formatd informl informd;
16176  run;

NOTE: There were 3 observations read from the data set WORK.M2SVJRDR.
NOTE: The data set WORK.M2SVJRDR has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

16177  data WORK.M2SVJRDR;
16178  length UNAME $64;
16179  set WORK.M2SVJRDR;
16180  UNAME = upcase(NAME);
16181  run;

NOTE: There were 3 observations read from the data set WORK.M2SVJRDR.
NOTE: The data set WORK.M2SVJRDR has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16185  data WORK.M0N0QRRF;
16186  drop UNAME;
16187  set WORK.M0N0QRRF;
16188  run;

NOTE: There were 3 observations read from the data set WORK.M0N0QRRF.
NOTE: The data set WORK.M0N0QRRF has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.26 seconds
      cpu time            0.07 seconds
      


NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 3 observations read from the data set EMWS3.FIMPORT4_EMCMETADEFAULT.
NOTE: The data set EMWS3.FIMPORT4_EMCMETADEFAULT has 3 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


16439  %let SYSCC = 0;
16440  data EMWS3.FIMPORT4_EMTMETADEFAULT;
16441  length LIBNAME $8;
16442  LIBNAME = "EMWS3";
16443  run;

NOTE: The data set EMWS3.FIMPORT4_EMTMETADEFAULT has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.08 seconds
      cpu time            0.03 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.FIMPORT4_EMTMETADEFAULT.
NOTE: The data set WORK._TEMP has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 15 observations read from the data set EMWS3.FIMPORT4_IMPORTSET.
NOTE: The data set EMWS3.FIMPORT4_IMPORTSET has 15 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set EMWS3.FIMPORT4_IMPORTSET.
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set EMWS3.FIMPORT4_IMPORTSET has 15 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file X is file C:\Users\lahar\OneDrive\Desktop\Data Mining\Resume\Workspaces\EMWS3\FIMPORT4\VARIABLESETDELTA.txt.
16472 +if NAME="Category" then do;
16473 +ROLE="TARGET";
16474 +LEVEL="NOMINAL";
16475 +ORDER="";
16476 +DROP="N";
16477 +end;
NOTE: %INCLUDE (level 1) ending.

NOTE: There were 3 observations read from the data set EMWS3.FIMPORT4_EMCMETADEFAULT.
NOTE: The data set EMWS3.FIMPORT4_VARIABLESET has 3 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Fileref X has been deassigned.

NOTE: There were 3 observations read from the data set EMWS3.FIMPORT4_VARIABLESET.
NOTE: There were 3 observations read from the data set EMWS3.FIMPORT4_EMCMETADEFAULT.
NOTE: The data set WORK._DIFFMETA has 2 observations and 23 variables.
NOTE: PROCEDURE COMPARE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: The file X1 is:
      Filename=C:\Users\lahar\OneDrive\Desktop\Data Mining\Resume\Workspaces\EMWS3\FIMPORT4\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=26Nov2023:18:18:22,
      Create Time=23Nov2023:22:06:55

NOTE: 6 records were written to the file X1.
      The minimum record length was 4.
      The maximum record length was 27.
NOTE: There were 1 observations read from the data set WORK._DIFFMETA.
      WHERE _type_='COMPARE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The file X2 is:
      Filename=C:\Users\lahar\OneDrive\Desktop\Data Mining\Resume\Workspaces\EMWS3\FIMPORT4\DELTACODE.txt,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=26Nov2023:18:18:22,
      Create Time=23Nov2023:22:06:55

NOTE: 6 records were written to the file X2.
      The minimum record length was 4.
      The maximum record length was 27.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Fileref X1 has been deassigned.
NOTE: Fileref X2 has been deassigned.

NOTE: The file X is:
      Filename=C:\Users\lahar\OneDrive\Desktop\Data Mining\Resume\Workspaces\EMWS3\FIMPORT4\VARIABLESETDELTA.txt,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=26Nov2023:18:18:22,
      Create Time=23Nov2023:22:06:55

NOTE: 6 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 27.
NOTE: There were 1 observations read from the data set WORK._DIFFMETA.
      WHERE _type_='COMPARE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Fileref X has been deassigned.

NOTE: Deleting WORK._DIFFMETA (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 6 observations read from the data set EMWS3.FIMPORT4_EXPORTSET.
NOTE: The data set EMWS3.FIMPORT4_EXPORTSET has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
NOTE: The PROCEDURE CONTENTS printed page 2.


NOTE: The file WORK.NEW (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.IMPORTFILE (memtype=DATA).
NOTE: Deleting WORK.IMPORTATTRS (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16478  *------------------------------------------------------------*;
16479  * End TRAIN: FIMPORT4;
16480  *------------------------------------------------------------*;

16481  *------------------------------------------------------------*;
16482  * Close any missing semi colons;
16483  *------------------------------------------------------------*;
16484  ;
16485  ;
16486  ;
16487  ;
16488  quit;
16489  *------------------------------------------------------------*;
16490  * Close any unbalanced quotes;
16491  *------------------------------------------------------------*;
16492  /*; *"; *'; */
16493  ;
16494  run;
16495  quit;
16496  /* Reset EM Options */
16497  options formchar="|----|+|---+=|-/\<>*";
16498  options nocenter ls=256 ps=10000;
16499  goptions reset=all device=GIF NODISPLAY;

