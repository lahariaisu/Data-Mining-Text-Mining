*------------------------------------------------------------*
User:                lahar
Date:                November 23, 2023
Time:                22:12:57
Site:                70085622
Platform:            X64_10HOME
Maintenance Release: 9.04.01M6P111518
EM Version:          15.1
* 
*------------------------------------------------------------*
* Training Log
Date:                November 23, 2023
Time:                22:12:44
*------------------------------------------------------------*
15225  proc freq data=EMWS3.TextCluster4_VariableSet noprint;
15226  table ROLE*LEVEL/out=WORK.TextCluster4META;
15227  run;
 
NOTE: There were 2 observations read from the data set EMWS3.TEXTCLUSTER4_VARIABLESET.
NOTE: The data set WORK.TEXTCLUSTER4META has 2 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
15228  proc print data=WORK.TextCluster4META label noobs;
15229  var ROLE LEVEL COUNT;
15230  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15231  title9 ' ';
15232  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15233  run;
 
NOTE: There were 2 observations read from the data set WORK.TEXTCLUSTER4META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
15234  title10;
 
15235  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15561  *------------------------------------------------------------*;
15562  * TextCluster4: Generation of macros and macro variables;
15563  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15564  *------------------------------------------------------------*;
 
15565  %let EMEXCEPTIONSTRING=;
15566  *------------------------------------------------------------*;
15567  * TRAIN: TextCluster4;
15568  *------------------------------------------------------------*;
15569  %let EM_ACTION = TRAIN;
15570  %let syscc = 0;
15571  %macro main();
15572
15573     %if %upcase(&EM_ACTION) eq CREATE %then %do;
15574        filename temp catalog 'sashelp.emtxtext.cluster_create.source';
15575        %include temp;
15576        %create();
15577     %end;
15578     %if %upcase(&EM_ACTION) eq TRAIN %then %do;
15579        filename temp catalog 'sashelp.emtxtext.cluster_train.source';
15580        %include temp;
15581        %train();
15582     %end;
15583     %if %upcase(&EM_ACTION) eq REPORT %then %do;
15584        filename temp catalog 'sashelp.emtxtext.cluster_report.source';
15585        %include temp;
15586        %report();
15587     %end;
15588     %if %upcase(&EM_ACTION) eq SCORE %then %do;
15589        filename temp catalog 'sashelp.emtxtext.cluster_score.source';
15590        %include temp;
15591        %score();
15592     %end;
15593  %mend main;
15594
15595  %main();
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.CLUSTER_TRAIN.SOURCE.
15596 +%macro train();
15597 +
15598 +    %global last_parse_node last_filter_node last_prescore_node server_err
15599 +      parsevar EM_SASMSG;
15600 +    %if ^%symexist(tm_debug) %then %let tm_debug=0;
15601 +    %let EM_SASMSG=TMINE;
15602 +    %let syscc=0;
15603 +
15604 +    filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
15605 +    %include temp;
15606 +    filename temp catalog 'sashelp.emtxtext.tm_cluster.source';
15607 +    %include temp;
15608 +    filename temp catalog 'sashelp.emtxtext.tm_apply_tmutil.source';
15609 +    %include temp;
15610 +    filename temp catalog 'sashelp.emtxtext.tm_svd_do_samp.source';
15611 +    %include temp;
15612 +    filename temp;
15613 +
15614 +    %tm_get_last_filter(eminfo=&EM_IMPORT_DATA_EMINFO,em_lib=&em_lib,
15615 +                        em_variableset=&em_data_variableset);
15616 +    %if &EMEXCEPTIONSTRING ne %then %goto end_cluster_train;
15617 +    %let lastparsenode=&last_parse_node;
15618 +    %let lastfilternode=&last_filter_node;
15619 +    %let lastprescore=&last_prescore_node;
15620 +    %if &lastfilternode=&lastparsenode %then %do;
15621 +        %let EMEXCEPTIONSTRING = EMTOOL.NOFILTERNODE;
15622 +        %goto end_cluster_train;
15623 +    %end;
15624 +
15625 +    /*populate last tm node dataset so tm_get_last_filter is not called in score*/
15626 +    %em_getname(key=last_tm_nodes, type=data);
15627 +    data &em_user_last_tm_nodes;
15628 +        set &EM_IMPORT_DATA_EMINFO;
15629 +    run;
15630 +
15631 +
15632 +    %em_getname(key=tmconfig, type=data);
15633 +    %em_getname(key=terms, type=data);
15634 +    %em_getname(key=docs, type=data);
15635 +    %em_getname(key=clusters, type=data);
15636 +    %em_getname(key=graph_table, type=data);
15637 +    %em_getname(key=svd_u, type=data);
15638 +    %em_getname(key=tmconfig, type=data);
15639 +    %em_getname(key=svd_s, type=data);
15640 +    %em_getname(key=emoutstat, type=data);
15641 +    %em_getname(key=hierds, type=data);
15642 +
15643 +
15644 +
15645 +    /* get target variable info */
15646 +    %let targetvar = ;
15647 +    data _null_;
15648 +       set &em_data_variableset(where=(ROLE='TARGET' and USE in('Y' 'D')
15649 +                                       and LEVEL ne 'INTERVAL'));
15650 +       if _N_=1 then call symput('targetvar', strip(NAME));
15651 +    run;
15652 +
15653 +
15654 +
15655 +    /* set up terms strings and initial config table */
15656 +    proc sql noprint;
15657 +      create table &EM_USER_tmconfig as
15658 +         select *
15659 +         from &EM_LIB..&last_filter_node._tmconfig;
15660 +    quit;
15661 +
15662 +
15663 +    proc sql noprint;
15664 +       select  cellwgt into: _cellweight
15665 +       from &em_user_tmconfig;
15666 +       select termwgt into: _termwgt
15667 +       from &em_user_tmconfig;
15668 +    quit;
15669 +
15670 +    data _keepdocs (keep=_DOCUMENT_ %if &targetvar ne %then &targetvar; );
15671 +        set &EM_IMPORT_DATA;
15672 +    run;
15673 +
15674 +    %tm_apply_tmutil(data=&EM_LIB..&last_filter_node._tmout,
15675 +                       terms=&EM_LIB..&last_filter_node._terms,
15676 +                       docs=&EM_IMPORT_DATA,
15677 +                       keepdocs=_keepdocs,
15678 +                       reduceF=2,
15679 +                       termweight=&_termwgt,
15680 +                       cellweight=&_cellweight,
15681 +                       outdata=_outtmutil_,
15682 +                       outterms=_newkey,
15683 +                       outweights=_weights,
15684 +                       targetvar=&targetvar,
15685 +                       memloc=_tmmem);
15686 +
15687 +                       /* get the svd dimensions on the documents */
15688 +    %tm_svd_do_samp(data=_outtmutil_,docs=_keepdocs, maxK=&em_property_maxK, res=&em_property_resolution,cellwgt=&_cellweight,in_global=_weights,
15689 +                     rowVar=_termnum_,colVar=_document_,entryVar=_count_,u=&EM_USER_SVD_U,v=_svdv,s=&EM_USER_svd_S,
15690 +                     colpro=_svdcolpro,rowpro=_svdrowpro, normcol=normcol, normrow=normrow,prefix=&EM_NODEID);
15691 +
15692 +    %if(&syscc >4 ) %then %do;
15693 +        %goto end_cluster_train;
15694 +    %end;
15695 +
15696 +    proc sql noprint;
15697 +       create table &EM_USER_TERMS(drop=index) as
15698 +       select a.*,b.*
15699 +       from &EM_LIB..&last_filter_node._terms a left join _svdrowpro b
15700 +       on a.key = b.index;
15701 +    quit;
15702 +
15703 +    %tm_cluster(data=&EM_LIB..&last_filter_node._tmout,
15704 +        terms=&EM_LIB..&last_filter_node._terms,
15705 +        docs=&EM_IMPORT_DATA,
15706 +        svdColPro=_svdcolpro,
15707 +        maxNumTerms=&em_property_ndescterms,
15708 +        numClus=&em_property_nclusters,
15709 +        numType=&em_property_exactormaximum,
15710 +        algorithm=&em_property_algorithm,
15711 +        outdocs=&EM_USER_DOCS,
15712 +        outclusters=&EM_USER_CLUSTERS,
15713 +        hierds=&EM_USER_HIERDS,
15714 +        emoutstat=&EM_USER_emoutstat,
15715 +        prefixstring= &EM_NODEID);
15716 +
15717 +    %if &emexceptionstring ne %then %goto end_cluster_train;
15718 +
15719 +    %if &em_property_algorithm=2.0 %then %do;
15720 +
15721 +        data &em_user_hierds(drop=plus);
15722 +            set &em_user_hierds;
15723 +            plus='';
15724 +            if substr(CLUS_DESC, 1, 1) = "+" then plus="+ ";
15725 +            graphdesc=_CLUSTER_ || ': ' || plus || scan(CLUS_DESC, 1);
15726 +        run;
15727 +    %end;
15728 +
15729 +
15730 +    * add the info to EMINFO to forward on to other nodes ;
15731 +   data &EM_DATA_EMINFO;
15732 +      length TARGET KEY $32 DATA $43;
15733 +
15734 +      key="LastTMNode";
15735 +      data="&EM_NODEID";
15736 +      output;
15737 +
15738 +      key="LastTMNodeType";
15739 +      data="TextCluster";
15740 +      output;
15741 +
15742 +      key="LastTextCluster";
15743 +      data="&EM_NODEID";
15744 +      output;
15745 +
15746 +      key="PRESCORECODE";
15747 +      data="&EM_NODEID";
15748 +      output;
15749 +   run;
15750 +
15751 +    proc sql noprint;
15752 +        select count(*) into :svdkeep
15753 +            from &em_user_svd_s
15754 +            where keep=1;
15755 +        select count(*) into :cluscnt
15756 +            from &em_user_clusters;
15757 +    quit;
15758 +   data &EM_USER_tmconfig;
15759 +         set &EM_USER_TMCONFIG;
15760 +         clus_alg = "&em_property_algorithm";
15761 +         maxsvd = &em_property_maxk;
15762 +         svdkeep=&svdkeep;
15763 +         last_prescore = "&last_prescore_node";
15764 +      run;
15765 +
15766 +    %em_metachange(name=&EM_NODEID._CLUSTER_, role=SEGMENT, level=NOMINAL);
15767 +    %do i=1 %to &svdkeep;
15768 +         %em_metachange(name=&EM_NODEID._SVD&i, role=INPUT, level=INTERVAL);
15769 +    %end;
15770 +    %do i=1 %to &cluscnt;
15771 +         %em_metachange(name=&EM_NODEID._PROB&i, role=REJECTED);
15772 +    %end;
15773 +
15774 +%end_cluster_train:
15775 +    filename temp;
15776 +    %if &tm_debug =0 %then %do;
15777 +        proc sql noprint;
15778 +              drop table _svdcolpro;
15779 +              drop table _svdrowpro;
15780 +              drop table _newkey ;
15781 +              drop table _keepdocs ;
15782 +        quit;
15783 +    %end;
15784 +
15785 +%mend train;
15786 +
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_GET_LAST_FILTER.SOURCE.
15787 +/* ****************************************************************
15788 + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
15789 + *
15790 + * Name:             tm_get_last_filter.sas
15791 + * Product:          SAS Text Miner
15792 + * Language:         Sas
15793 + * Script:
15794 + *
15795 + * Usage:
15796 + *
15797 + * Purpose:  macro to get the last filter node and the last parse node in the
15798 + *   diagram that corresponds to the current parse variable.  If there is no filter
15799 + *   node, the filter node is set to the last parse node.
15800 + *
15801 + *
15802 + *
15803 + * History:
15804 + * 14Aug09 Initial Coding
15805 + *
15806 + * Notes:
15807 + *    Returns an error in the following cases:
15808 + *      1. There is no preceding parse node.
15809 + *      2. There is no parse node with the current parse variable.
15810 + *
15811 + * Last Modified By:
15812 + * Last Modified On: Wed Sep 23 15:35:04 2009
15813 + *
15814 + * End
15815 + * ************************************************************** */
15816 +%macro tm_get_last_filter(eminfo=,em_lib=, em_variableset=);
15817 +   %let last_parse_node=;
15818 +   %let last_filter_node=;
15819 +   %let last_prescore_node=;
15820 +   %let server_err=;
15821 +   %let EMEXCEPTIONSTRING=;
15822 +   %let syscc=0;
15823 +
15824 +    /* verify that setinit for SAS Text Miner is currently active */
15825 +    %if %sysfunc(sysprod(PRODNUM107)) ne 1 %then %do;
15826 +       %let EMEXCEPTIONSTRING = EMTOOL.NOTMLICENSE;
15827 +        %goto end_macro;
15828 +        %end;
15829 +
15830 +
15831 +    * find last filter or text parse node if no filter node. ;
15832 +   %if %sysfunc(exist(&eminfo)) %then %do;
15833 +      proc sql noprint;
15834 +      select data into :last_parse_node from &eminfo where key="LastTextParsing";
15835 +         select data into :last_filter_node from &eminfo where key="LastTextFilter";
15836 +         select data into :last_prescore_node from &eminfo where kupcase(key)="PRESCORECODE";
15837 +      quit;
15838 +
15839 +   %end;
15840 +
15841 +   %if &last_parse_node= %then %do;
15842 +      %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGNODE;
15843 +      %goto end_macro;
15844 +      %end;
15845 +
15846 +   %else %if &last_filter_node= %then %let last_filter_node = %ktrim(&last_parse_node);
15847 +   %else %let last_filter_node = %ktrim(&last_filter_node);
15848 +   %let last_parse_node = %ktrim(&last_parse_node);
15849 +
15850 +   * Check to make sure parse variable is present and still exists;
15851 +   %let parsevar = ;
15852 +   proc sql noprint;
15853 +    select parsevar into :parsevar
15854 +    from &em_lib..&last_filter_node._tmconfig;
15855 +    quit;
15856 +
15857 +    *check for dropped parsevar on input dataset;
15858 +       %let parsevarOK= ;
15859 +       %let parsevarN=%kupcase(%ktrim(&parsevar));
15860 +       data _null_;
15861 +         set &em_variableset(where=(kupcase(NAME)="&parsevarN" and USE in('Y' 'D')));
15862 +         if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
15863 +         run;
15864 +       %if(&parsevarOK eq ) %then %do;
15865 +          %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGVAR;
15866 +          %goto end_macro;
15867 +          %end;
15868 +%end_macro:
15869 +
15870 +%mend tm_get_last_filter;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_CLUSTER.SOURCE.
15872 +   /* ****************************************************************
15873 + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
15874 + *
15875 + * Name:             tm_cluster.sas
15876 + * Support:          rualbr Russell Albright
15877 + * Product:
15878 + * Language:         Sas
15879 + * Script:
15880 + *
15881 + * Usage:
15883 + !Inputs into %tm_train_cluster
15884 + * doc = doc datset from a tm node
15885 + * data =  out datset from a tm node
15886 + * terms = terms dataset from  tm node
15887 + * svdcolpro = column projections data set
15888 + * cellweight setting
15889 + * termweight setting
15890 + * maxSvddim = Maximum number of dimension to calculate
15891 + * svdres= <HIGH, MED, or LOW>
15892 + * maxNumTerms - maximum number of term to use for descriptive terms
15893 + * numClus = number of clusters to use
15894 + * numType=<MAXIMUM or EXACT> Max means that <= maximum will actually be used.
15895 + * threads = the number of threads you would like emclus to use
15898 + !Outputs from %tm_train_cluster
15899 + * outdocs - a doc table with the cluster restults on it.
15900 + * outclusters- an output cluster table with the descriptive terms on it (future story)
15901 + *
15902 + * Example call
15903 + *
15904 + *%tm_cluster(data=tmn.text_out_t,
15905 + *             terms=tmn.terms,
15906 + *             docs=testdata._train,
15907 + *             svdcolpro=tmn._svdcolpro,
15908 + *             maxNumTerms=5,
15909 + *             numClus=40,
15910 + *             numType=MAXIMUM,
15911 + *             outdocs=docsresult,
15912 + *             hierds=_hierds,
15913 + *             emoutstat=_emoutstat,
15914 + *             outclusters= clusterResult);
15915 + *
15916 + *
15917 + * Purpose: Perform the clustering on out,term, doc from parse or filter node
15918 + *
15919 + * History:
15920 + *
15921 + *
15922 + * Notes:
15923 + *
15924 + * Last Modified By:
15925 + * Last Modified On: Thu Jan 08 17:22:43 2009
15926 + *
15927 + * End
15928 + * ************************************************************** */
15930 +%macro tm_cluster(data=,
15931 +                     terms=,
15932 +                     docs=,
15933 +                     svdColPro=,
15934 +                     maxNumTerms=,
15935 +                     numClus=,
15936 +                     numType=MAXIMUM,
15937 +                     algorithm=,
15938 +                     outdocs=,
15939 +                     hierds=_hierds,
15940 +                     emoutstat=_emoutstat,
15941 +                     outclusters=,
15942 +                     prefixString=,
15943 +                     threads=);
15946 +    %local _cleanedout ;
15947 +    %local _numRepDocs;
15948 +    %global systmutil;
15949 +    %let systmutil = ;
15950 +    %if ^%symexist(tm_debug) %then %let tm_debug=0;
15952 +    filename temp catalog 'sashelp.emtext.tmgetncl.source';
15953 +    %include temp;
15954 +    filename temp catalog 'sashelp.emtext.tmfast.source';
15955 +    %include temp;
15957 +    filename temp catalog 'sashelp.emtext.tmemclus.source';
15958 +    %include temp;
15960 +    filename temp catalog 'sashelp.emtext.tmpred.source';
15961 +    %include temp;
15963 +    filename temp catalog 'sashelp.emtext.tmsort.source';
15964 +    %include temp;
15966 +    %let tmdata=&data;
15967 +    %let tmterms=&terms;
15968 +    %let tmdocs=&docs;
15969 +    %let emexceptionstring=;
15972 +    /* check some basic size requirements to proceed.*/
15973 +    proc sql noprint;
15974 +       select count(*) into: numTerms
15975 +       from &terms a
15976 +       where a.numdocs>=2 and _ispar in('+',' ')
15977 +       ;
15978 +       select count (*) into: numdocs
15979 +       from &docs a;
15980 +    quit;
15982 +    %if (&numterms < 10)  OR (&numdocs< 8) %then %do;
15983 +        %let emexceptionstring=EMTOOL.INSUFFICIENTDATA;
15984 +        %goto end_train_cluster;
15985 +    %end;
15987 +    /* Get number of kept svd variables */
15988 +    %let pid = %sysfunc(open(&svdcolpro));
15989 +    %let svdkeep=%eval(%sysfunc(attrn(&pid,nvars))-1);
15990 +    %let rc = %sysfunc(close(&pid));
15993 +   /************************ Find clusters *************************************/
15995 +   %if %upcase(&numType) = MAXIMUM %then %do;   /* numClus = MAXIMUM */
15997 +      /* Call tmgetncl to find the recommended number of clusters. */
15999 +      %tmGetNcl(data=&svdcolpro,
16000 +               maxclusters=&numClus,
16001 +               vars=%str(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep),
16002 +               tempDS=_clusTemp1,
16003 +               clusDS=_clusTemp,
16004 +               threads=
16005 +            );
16007 +      /* error returned in above macro */
16008 +      %if (&syscc >4 ) %then %do;
16009 +         %let emexceptionstring= &SYSERRORTEXT;
16010 +         %goto end_train_cluster;
16011 +      %end;
16013 +      /* Store the recommended number into a macro variable. */
16015 +      proc sql noprint;
16016 +         select max(nclus) into: numClus
16017 +         from _clusTemp
16018 +         ;
16019 +      quit;
16022 +      %if not (&numClus > 1) %then %do;
16023 +        %let numClus = 2;
16024 +      %end;
16027 +       %if &tm_debug =0  %then %do;
16028 +          proc sql nowarn noprint;
16029 +              drop table _clustemp;
16030 +              drop table _clustemp1;
16031 +           quit;
16032 +       %end;
16034 +   %end;  /* &numtype = MAXIMUM */
16036 +   %else  %do;
16037 +       %let numClus = %left(&numClus);/*&numtype=EXACT*/
16038 +   %end;
16040 +    proc sql noprint;
16041 +        select count(*) into: nobs
16042 +        from &svdcolpro;
16043 +    quit;
16045 +   %if %left(&algorithm)=2.0 %then %do; /* Hierarchical clustering */
16046 +        filename temp catalog 'sashelp.emtxtext.tmgethclus.source';
16047 +        %include temp;
16049 +        filename temp catalog 'sashelp.emtext.tmhclus.source';
16050 +        %include temp;
16051 +        filename temp catalog 'sashelp.emtext.tmtree.source';
16052 +        %include temp;
16054 +        %if &nobs < &numClus and  %upcase(&numType) = EXACT %then %do;
16055 +            %let emexceptionstring=EMTOOL.TOOFEWOBSTOCLUS;
16056 +            %goto end_train_cluster;
16057 +        %end;
16059 +        %tmgethclus(outtree=_outtree,
16060 +                    idvar=index,
16061 +                    inDS=&svdcolpro,
16062 +                    outDS=&outdocs,
16063 +                    fastOut=_fastclusstat,
16064 +                    textClusDS=_clusstat,
16065 +                    vars=%str(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep),
16066 +                    nobs=&nobs,
16067 +                    nclus=&numClus,
16068 +                    hierds=&hierds,
16069 +                    svdkeep=&svdkeep,
16070 +                    prefix=&prefixString);
16071 +        %if &EMEXCEPTIONSTRING ne %then %goto end_train_cluster;
16073 +        data _clusstat;
16074 +            set _clusstat(rename=(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep.=_mean1-_mean&svdkeep.));
16075 +        run;
16077 +        data _clustermean;
16078 +          set _clusstat(keep=_cluster_ _mean1-_mean&svdkeep. rename=(_cluster_=cluster));
16079 +        run;
16081 +        proc sql noprint;
16082 +            drop table _outtree;
16083 +        quit;
16084 +   %end;
16085 +   %else %do; /* Expectation-maximization */
16086 +       /* Call %anl_tmfast to create cluster stat data set that will be used as an input for %anl_tmemclus. */
16087 +          %tmFast(data=&svdcolpro,
16088 +             clusters=&numClus,
16089 +             outstat=_fastclusstat,
16090 +             outseed=,
16091 +                id=,
16092 +             out=,
16093 +             vars=%str(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep)
16094 +             );
16095 +          run;
16097 +          /* If some of the clusters are too small (frequency less than 5) and &g_numClusFlag=MAXIMUM, */
16098 +          /* reassign value for &cluster macro var from WORK.&s_reportID._fastclusstat data set. */
16100 +       %if %upcase(&numType) = MAXIMUM %then
16101 +       %do;   /* &ClusType = MAXIMUM */
16103 +          proc sql noprint;
16104 +             select max(CLUSTER) into :numClus
16105 +             from _fastclusstat
16106 +             where upcase(_TYPE_)='SEED'
16107 +             ;
16108 +          quit;
16110 +          %let numClus = %left(&numClus);
16112 +       %end;  /* &ClusType = MAXIMUM */
16113 +       %else %do; /* &ClusType = EXACT */
16114 +          %if &nobs < &numClus %then %do;
16115 +            %let emexceptionstring=EMTOOL.TOOFEWOBSTOCLUS;
16116 +            %goto end_train_cluster;
16117 +          %end;
16118 +       %end;
16120 +       %tmEMClus(data=&svdcolpro,
16121 +                role=TRAIN,
16122 +                clusters=&numClus,
16123 +                seed=_fastclusstat,
16124 +                outstat=&emoutstat,
16125 +                out=_tmutildoc,
16126 +                vars=%str(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep),
16127 +                cov=,
16128 +                iter=5,
16129 +                secclus=,
16130 +                seciter=,
16131 +                min=,
16132 +                method=,
16133 +                eps=.1,
16134 +                init=FASTCLUS,
16135 +                print=NONE,
16136 +                p=,
16137 +                outliers=,
16138 +                decvar=0,
16139 +                initstd=,
16140 +                dist=,
16141 +                secstd=,
16142 +                nobs=,
16143 +                threads=&threads.
16144 +             );
16145 +       run;
16148 +       /* Run %anl_tmpred macro to assign documents to clusters with the largest posterior probability */
16149 +       /* and to calculate cluster frequency. */
16151 +       %tmPred (inds=_tmutildoc,
16152 +                outds=&outdocs,
16153 +              clusters=&numClus,
16154 +              type=max,
16155 +              freqds=_clusstat,
16156 +              compress=1
16157 +              );
16158 +        data &outdocs;
16159 +           set &outdocs;
16160 +           rename prob1-prob&numClus = &prefixString._prob1-&prefixString._prob&numclus;
16161 +        run;
16165 +       /* Transpose the output data set to contain cluster ID and cluster frequency. */
16167 +        data _clusstat;
16168 +            array c(&numClus) _c1-_c&numClus;
16169 +            set _clusstat;
16170 +            /*keep _CLUSTER_ Freq;*/
16171 +            totalobs=0;
16172 +            do _CLUSTER_ = 1 to &numClus;
16173 +                Freq = c(_CLUSTER_);
16174 +                totalobs=totalobs+c(_CLUSTER_);
16175 +                output;
16176 +            end;
16177 +            call symput ('totNumDocs', totalobs);
16178 +        run;
16180 +       %if &totNumDocs = 0 %then
16181 +       %do;   /*&totNumDocs = 0 */
16182 +           goto end_train_cluster;
16183 +       %end; /*&totNumDocs = 0 */
16185 +       /* Calculate cluster percentage. */
16186 +       data _clusstat;
16187 +          set _clusstat;
16188 +          Percent = Freq/&totNumDocs;
16189 +       run;
16191 +       data _clustermean(rename=(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep. = _mean1-_mean&svdkeep.));
16192 +          set &emoutstat(keep=cluster _TYPE_ &prefixstring._SVD1 - &prefixstring._SVD&svdkeep.);
16193 +          if _TYPE_ = "MEAN";
16194 +            keep cluster &prefixstring._SVD1 - &prefixstring._SVD&svdkeep. ;
16195 +      run;
16196 +  %end;
16198 +      proc sql;
16199 +      create table _meandocs(drop=cluster) as
16200 +      select a.*, b.*
16201 +      from &outdocs a left join _clustermean b
16202 +      on a._cluster_=b.cluster
16203 +      ;
16204 +      quit;
16205 +       /*calulate residual for each doc */
16206 +      data _rmscalc;
16207 +          merge _meandocs(in=inhere) _clusstat;
16208 +          array _means(&svdkeep) _mean1-_mean&svdkeep.;
16209 +          array _svds(&svdkeep) &prefixstring._SVD1 - &prefixstring._SVD&svdkeep.;
16210 +          by _cluster_;
16211 +          error=0;
16212 +          do i = 1 to &svdkeep;
16213 +             error +( (_svds{i}-_means{i}) * (_svds{i}-_means{i}));
16214 +          end;
16215 +         /*error=sqrt(error);*/
16216 +          drop i;
16217 +       run;
16218 +    /*calc standardized residual for clusters*/
16219 +       proc summary data=_rmscalc nway;
16220 +          class _cluster_;
16221 +          var error;
16222 +          output out=_meanerr mean=meane sum=sume;
16223 +       run;
16225 +       data _rmsse;
16226 +          set _meanerr;
16227 +          /* original code divides by number of svd dims*/
16228 +          if _freq_ gt 1 then do;
16229 +              _rmsstd_=sqrt(sume/((_freq_-1)*(&svdkeep.)));
16230 +          end;
16231 +          else do;
16232 +              _rmsstd_=0;
16233 +          end;
16234 +          keep _cluster_  _rmsstd_;
16235 +       run;
16238 +       proc sql;
16239 +           create table _clusstat2(drop=cluster) as
16240 +           select a.*,b.*
16241 +           from _clustermean a left join _rmsse b
16242 +           on a.cluster=b._cluster_;
16244 +           create table &outclusters as
16245 +           select  a.*, b.freq, b.percent
16246 +           from _clusstat2(keep=_cluster_ %str(_mean1-_mean&svdkeep) _rmsstd_) a right join _clusstat b
16247 +           on a._cluster_=b._cluster_
16248 +           where b.freq>0 ;
16249 +       quit;
16252 +    filename temp catalog 'sashelp.emtext.tmterm1.source';
16253 +    %include temp / nosource2;
16255 +   /****************** Find descriptive terms for clusters ***************************/
16258 +   /* Add _term_ variable to WORK._terms data set to prepare it as an
16259 +   /* input to %tmterm1 macro. The variable is added from &EM_LIB..&last_filter_node._terms data set. */
16261 +   proc sort data=&tmterms out=_terms_;
16262 +        by key _ispar;
16263 +   run;
16265 +   data _terms_;
16266 +       set _terms_;
16267 +       by key _ispar;
16268 +       if first.key then
16269 +          output;
16270 +       else;
16271 +   run;
16273 +    /* Concatenate + to terms */
16274 +    data _terms_;
16275 +        set _terms_;
16276 +        if _ispar='+' then
16277 +            Term=_ispar || ' ' || term;
16278 +    run;
16280 +   %tmsort(data=&tmdata,
16281 +         out=_tmout_,
16282 +         by=_termnum_,
16283 +            options=,
16284 +         threads=threads);
16287 +   data _tmout_;
16288 +      merge _tmout_ (in=_A_)
16289 +            _terms_ (rename=(key=_termnum_ term=_term_) keep=key term );
16290 +      by _termnum_;
16291 +      if _A_;
16292 +   run;
16294 +   /* Create _segmnt_ variable in WORK._docs data set to prepare it to be an */
16295 +   /* input to %tmterm1 macro. Set it equal to _cluster_ variable. */
16297 +   %if &algorithm=2.0 %then %do;
16298 +        data _docs_;
16299 +            set &outdocs (rename=(index=_document_) keep=index _cluster_ _finalcluster_);
16300 +            _SEGMNT_=_finalcluster_;
16301 +        run;
16302 +        proc sql noprint;
16303 +            select max(_cluster_) into :numclus from &outclusters;
16304 +        quit;
16305 +   %end;
16306 +   %else %do;
16307 +       data _docs_;
16308 +        set &outdocs (rename=(index=_document_) keep=index _cluster_);
16309 +         _SEGMNT_=_cluster_;;
16310 +       run;
16312 +   %end;
16314 +   /* Run %tmterm1 macro to determine descriptive terms for clusters. */
16315 +   %tmterm1(DSN_TPARS=_tmout_,
16316 +        DSN_CLUS=_docs_,
16317 +        DSN_DESC=_desc_,
16318 +        N_DESC_TERMS=&maxnumterms,
16319 +        N_CLUS=&numclus,
16320 +        top_freq=%eval(&maxnumterms*2),
16321 +        key=);
16323 +    /* Add cluster descriptive terms to clusters table. */
16324 +   %tmsort(data=&outclusters,
16325 +         out=&outclusters,
16326 +         by=_cluster_,
16327 +            options=,
16328 +         threads=threads);
16330 +   %tmsort(data=_desc_,
16331 +         out=_desc_,
16332 +         by=_cluster_,
16333 +            options=,
16334 +         threads=threads);
16336 +   data _desc_;
16337 +      merge &outclusters _desc_;
16338 +      by _cluster_;
16339 +   run;
16341 +   %tmsort(data=_desc_,
16342 +         out=&outclusters,
16343 +         by=_cluster_,
16344 +            options=,
16345 +         threads=threads);
16347 +   %if &algorithm=2.0 %then %do;
16349 +        %tmsort(data=&HIERDS,
16350 +         out=&HIERDS,
16351 +         by=_cluster_,
16352 +            options=,
16353 +         threads=threads);
16355 +        data &HIERds;
16356 +            merge &outCLUSTERS &HIERds (keep=_cluster_ parent level in=P);
16357 +            by _cluster_;
16358 +            clust=_cluster_;
16359 +            drop _cluster_;
16360 +            if P;
16361 +        run;
16363 +        %let empty=1;
16365 +        /* Be sure that all parent clusters are on outclusters ds */
16366 +        proc sql noprint;
16367 +            create table &outclusters as
16368 +                select a._cluster_, b.* from &hierds (rename=(clust=_CLUSTER_)) a
16369 +                left join &outclusters b
16370 +                on a._cluster_=b._cluster_;
16371 +        quit;
16373 +        %do %while (&empty);
16374 +            proc sql noprint;
16375 +                update &outclusters set freq=
16376 +                    (select sum(freq) from &HIERDS
16377 +                    where parent=_cluster_), percent=
16378 +                    (select sum(percent) from &HIERDS
16379 +                    where parent=_cluster_)
16380 +                    where freq=. and _cluster_ not in
16381 +                    (select parent from &hierds where freq=.);
16382 +                select count(*) into :empty from &outclusters
16383 +                    where freq=.;
16384 +                update &hierds set freq=(select freq from &outclusters where _cluster_=clust);
16385 +            quit;
16386 +            data &HIERds;
16387 +                merge &OUTCLUSTERS &HIERds (
16388 +                    rename=(clust=_cluster_) keep=clust parent level in=P);
16389 +                by _cluster_;
16390 +                clust=_cluster_;
16391 +                drop _cluster_;
16392 +                if P;
16393 +            run;
16394 +        %end;
16396 +        data &hierds;
16397 +            set &hierds(rename=(CLUST=_CLUSTER_) keep=clust FREQ CLUS_DESC PARENT level);
16398 +        run;
16399 +        data &outclusters;
16400 +            set &outclusters;
16401 +            if _rmsstd_ ne .;
16402 +        run;
16404 +        data &outdocs;
16405 +            set &outdocs (drop=_FINALCLUSTER_ _SUBCLUSTER_);
16406 +            label _CLUSTER_=Cluster ID;
16407 +        run;
16409 +    %end;
16411 +   %end_train_cluster:
16413 +       filename temp;
16415 +       %if &tm_debug =0  %then %do;
16416 +          proc sql nowarn noprint;
16417 +              drop table _clusstat;
16418 +              drop table _clusstat2;
16419 +              drop table _fastclusstat;
16420 +              drop table _clustermean;
16421 +              drop table _meandocs;
16422 +              drop table _rmscalc;
16423 +              drop table _rmsse;
16424 +              drop table _meanerr;
16425 +              drop table _tmutildoc;
16426 +              drop table _desc_;
16427 +              drop table _terms_;
16428 +              drop table _docs_;
16429 +              drop table _tmout_;
16430 +           quit;
16431 +       %end;
16434 +%mend;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_APPLY_TMUTIL.SOURCE.
16436 + /*****************************************************************
16437 + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
16438 + *
16439 + * Name:             tm_apply_tmutil.sas
16440 + * Support:          rualbr Russell Albright
16441 + * Product:
16442 + * Language:         Sas
16443 + * Script:
16444 + *
16445 + * Usage:
16446 + *
16447 + * data= out data set from tgparse
16448 + * terms= terms from tgparse
16449 + * offsets=  addoffset data set form tgparse
16450 + * docs=  data set of document id's and potentially target, not required unless target weighting is used.
16451 + * keepdocs= list of docs to keep. This is a subset of the original docs data set. Not required.
16452 + * reduceF=defaults to log(n) if not specified, eliminates terms if not in at least that many docs
16453 + *     use reduceF=1 to retain all terms.
16454 + * termweight= none, entropy, mi,
16455 + * cellweight= none, log, bin,
16456 + * synnum= Input synonym data set of _termnum_, parent ID pairs
16457 + * synchar= Input synonym data set of term,termrole, parent, parentrole. This data set will
16458 + * get converted to synnym format by the macro tm_convert_syns.
16459 + * targetvar= name of variable on doc dataset contining targetvar.
16460 + * outdata= output out dataset with no more children on this dataset
16461 + * outterms= output terms dataset with dup terms eliminated
16462 + * outweights= weight vector for the terms
16463 + * outoffsets= subsetted outtable with childterms replaced with parents
16464 + * applyweight = , indicates if the weight settings are to be applied to the output OUT table. 0 no, 1 yes.
16465 + * memloc= string for tmutil to use to store its memory pointer. Normally the default can just be used.
16466 + * keeponly=Y  If set to Y (default), then only kept terms are output in terms table.
16467 + *
16468 + * Purpose: Massage the out and key from docparse so that they can bes used
16469 + * in data mining applications.
16470 + *
16471 + * History:
16472 + *
16473 + * Notes:
16474 + *
16475 + * Last Modified By:
16476 + * Last Modified On: Tue Mar 05 16:32:57 2013
16477 + *
16478 + * End
16479 + * ************************************************************** */
16482 +%macro tm_apply_tmutil(data=, terms=,docs=,offsets=,keepdocs=,termweight=none,
16483 +                            cellweight=none,reduceF=,outdata=,outterms=,outweights=,
16484 +                            outoffsets=, synnum=,synchar=, targetvar=, applyweight = 0,
16485 +                            memloc=tmutil_loc,keeponly=Y,repOnly=N);
16486 +     %local keepdocs tempF reduceF synnum  terms  paraExist sentExist;
16489 +    %let EMEXCEPTIONSTRING=;
16490 +    %let syscc=0;
16491 +    %let systmutil=0;
16495 +    /* Find terms to drop */
16496 +        %if &keepdocs ne %then %do;
16497 +          proc sql noprint;
16498 +                create view _keepdata as
16499 +                select * from &data where _DOCUMENT_ in
16500 +                (select _DOCUMENT_ from &keepdocs);
16501 +          quit;
16502 +        %end;
16503 +          %else %do;
16505 +             proc sql noprint;
16506 +                 create view _keepdata as
16507 +                 select * from &data;
16508 +             quit;
16510 +           %let keepdocs=&docs;
16511 +        %end;
16514 +    /* set default on reduceF*/
16515 +         %if &reduceF = %then %do;
16516 +            proc sql noprint;
16517 +           select count(*) into :numdocs from &docs;
16518 +        quit;
16519 +        %let tempF = %sysfunc(log10(%eval(&numdocs+1)));
16520 +        %let reduceF= %sysfunc(floor(&tempF));
16521 +         %end;
16524 +    /* find synnum if synchar supplied */
16526 +    %if &synchar ne %then %do;
16527 +            filename temp catalog 'sashelp.emtxtext.tm_convert_syns.source';
16528 +            %include temp;
16529 +            %tm_convert_syns(insyns= &synchar, outsyns=_myOutsyns ,
16530 +                         interms=&terms,
16531 +                          outterms=newterms );
16532 +                %let numsyns=0;
16533 +                proc sql;
16534 +                   select count(*) into: numsyns
16535 +                   from _myOutsyns;
16536 +                quit;
16537 +                %if &numsyns >0 %then %do;
16538 +                   %Let synnum=_myOutsyns;
16539 +                   %let terms=newterms;
16540 +                %end;
16541 +    %end;
16542 +    /* get the out and key in the proper format*/
16543 +    proc tmutil data=_keepdata key= &terms doc=&keepdocs
16544 +        %if &targetvar ne %then target=&targetvar;
16545 +        ;
16546 +        control init memloc="&memloc";
16547 +            %if &synnum ne %then syn syndata=&synnum force;
16548 +         ;
16549 +    run;
16550 +    %if &syscc >4 %then %goto end_tm_apply_tmutil;
16551 +    %if &reduceF>1 %then %do;
16552 +           proc tmutil;
16553 +           control memloc="&memloc";
16554 +               select reduceF=&reduceF;
16555 +        run;
16556 +   %end;
16557 +    %if &syscc >4 %then %goto end_tm_apply_tmutil;
16559 +     proc tmutil;
16560 +        control memloc="&memloc" release;
16561 +        weight termwgt=&termweight cellwgt=&cellweight;
16562 +            output key=_termstmutil  keyformat=default
16563 +               %if &keeponly eq Y %then keeponly;
16564 +               %if &applyweight  eq 0 %then unweighted ;
16565 +               out=&outdata;
16566 +    run;
16567 +    %if &syscc >4 %then %goto end_tm_apply_tmutil;
16569 +    proc sql noprint;
16570 +           create table _distinctterms as
16571 +           select distinct key,term, role, attribute
16572 +           from &terms;
16574 +       create table &outterms as
16575 +       select  b.term, b.role,b.attribute ,a.*
16576 +       from _termstmutil a left join  _distinctterms b
16577 +       on a.key=b.key;
16578 +       ;
16579 +       %if &outweights ne %then %do;
16580 +          create table &outweights as
16581 +          select distinct a.key as index, a.weight as gwgt
16582 +          from &outterms(where=(_ispar in('+',' '))) a inner join
16583 +                         _distinctterms b
16584 +          on a.key =b.key;
16585 +       %end;
16587 +     quit;
16588 +     %if &offsets ne and &outoffsets ne %then %do;
16590 +        %let paraExist=0; %let sentExist=0;
16591 +        data _null_;
16592 +          dsid=open("&offsets");
16593 +          para=varnum(dsid,'_paragraph_');
16594 +          sent=varnum(dsid,'_sentence_');
16595 +          if para ge 1 then call symput('paraExist',1);
16596 +          if sent ge 1 then call symput('sentExist',1);
16597 +          run;
16600 +        proc sql noprint;
16601 +        create table &outoffsets as
16602 +           select  a._document_,
16603 +              %if &paraExist=1 %then a._paragraph_, ;
16604 +              %if &sentExist=1 %then a._sentence_,;
16605 +              a._offset_, a._length_, b.parent_id as _termnum_
16606 +                 from &offsets a, _termstmutil (where=(_ispar ne "+" and keep="Y")) b
16607 +                 where a._termnum_ = b.key;
16608 +              quit;
16609 +       %end;
16613 +     %end_tm_apply_tmutil:
16615 +     %if ^%symexist(tm_debug) %then %let tm_debug=0;
16616 +       %if &tm_debug =0  %then %do;
16617 +          proc sql noprint;
16618 +            drop table _termstmutil;
16619 +            drop table _distinctterms;
16620 +            drop view _keepdata;
16621 +            %if &synchar ne and &synnum ne  %then drop table &synnum; ;
16622 +         quit;
16623 +     %end;
16624 +     %if &syscc >4 and &systmutil > 4 %then %do;
16625 +           %let EMEXCEPTIONSTRING = EMTOOL.TMUTIL,&systmutil;
16626 +           %put emexceptionstring= "&EMEXCEPTIONSTRING";
16627 +           %let syscc=0;
16628 +     %end;
16630 +%mend;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_SVD_DO_SAMP.SOURCE.
16632 +   /* ****************************************************************
16633 + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
16634 + *
16635 + * Name:             tm_svd_do_samp.sas
16636 + * Product:
16637 + * Language:         Sas
16638 + * Script:
16639 + *
16640 + * Usage:
16641 + *
16642 + * data=out dataset containing only repreentative terms
16643 + * maxK= max number of dimensions to use to computer svd
16644 + * res=<high, med, low> guidenceon what number of dims to choose
16645 + * cellwgt= <none, log, binary>
16646 + * in_global= dataset with index, weight variables
16647 + * rowVar= name of the variable representing row(term)
16648 + * colVar= name of the variable representing col
16649 + * entryVar=count for row,col
16650 + * u= name of output u matrix
16651 + * v= name of output v matrix
16652 + * s= name of output s matrix
16653 + * colpro=dataset to hold projections for terms
16654 + * rowpro= datset to hold projections for docs
16655 + * normcol=<normcol> extra option to add to normalize docs
16656 + * normrow=<normrow> extra option to add to normalize terms
16657 + * docs =<document data set of ids that are being analyzed.
16658 +*      docs needs to be input explicit since some docs may have not terms
16659 + *
16660 + * Purpose: macro to run svd and compute projections, first without mpling
16661 + * and then with sampling onon.
16662 + *
16663 + * History:
16664 + *
16665 + * Notes:
16666 + *
16667 + * Last Modified By:
16668 + * Last Modified On: Thu Jan 08 17:22:43 2009
16669 + *
16670 + * End
16671 + * ************************************************************** */
16672 +%macro tm_svd_do_samp(data=,docs=,maxK=,res=,cellwgt=,in_global=,
16673 +                     rowVar=,colVar=,entryVar=,u=,v=,s=,
16674 +                     colpro=,rowpro=,normcol=, normrow=,prefix=SVD);
16676 +   %local svdkeep;
16677 +   %let syscc=0;
16678 +   proc sort data=&data; by _termnum_; run;
16680 +   proc spsvd data=&data max_k = &maxK res = &res
16681 +       local = &cellWgt global =none in_global = &in_global;
16682 +       row _termnum_;
16683 +       col _document_;
16684 +       entry _count_;
16685 +       output  u = &U v = &V s = &s;
16686 +   run;
16688 +   /*try sampling if out of memory occurred*/
16689 +   %if(&syscc eq 1111) %then %do;
16690 +      %let syscc=0; /*reset syscc*/
16691 +      proc spsvd data = &data max_k = &maxK res = &res
16692 +          local = &cellWgt global = none in_global = &in_global ;
16693 +          row &rowVar;
16694 +          col &colVar;
16695 +          entry &entryVar;
16696 +          output u = &U v = &V s = &s;
16697 +          sample allow;
16698 +      run;
16699 +   %end;
16700 +    %if &syscc > 4 %then %do;
16701 +       %let EMEXCEPTIONSTRING = EMTOOL.SPSVDERROR;
16702 +       %goto end_svd_do_samp;
16703 +    %end;
16706 +   /* if resolution is used, the matrix U/V must be truncated to the set number of dim.*/
16707 +   proc sql noprint;
16708 +       select count(*) into: svdkeep
16709 +       from &s
16710 +       where keep=1;
16711 +    quit;
16713 +    %let svdkeep=%left(&svdkeep);
16714 +    data &U;
16715 +    set &U(keep= index col1-col&svdkeep);
16716 +    run;
16718 +    data &V;
16719 +    set &V(keep= index col1-col&svdkeep);
16720 +    run;
16721 +    %if &colpro ne %then %do;
16722 +       /* when sampling weights may have wrong dimensions*/
16723 +       proc sql noprint;
16724 +          create table new_global as
16725 +             select a.*
16726 +             from &in_global a, &U b
16727 +             where a.index = b.index;
16728 +       quit;
16731 +        proc sort data=&data; by &colVar; run;
16732 +        proc spsvd data=&data IN_U=&U
16733 +            local = &cellWgt global = none in_global = new_global ;
16734 +            row &rowVar;
16735 +            col &colVar;
16736 +            entry &entryVar;
16737 +            output colpro=&colpro bigpro normcol prefix="&prefix._SVD";
16738 +        run;
16740 +        proc sort data=&docs(keep=_document_)  out=_docids;
16741 +        by _document_;
16742 +        run;
16744 +        data &colpro;
16745 +           merge &colpro _docids(rename=(_document_=index));
16746 +        by index;
16747 +        run;
16750 +        data &colpro;
16751 +          set  &colpro;
16752 +          array svd_array &prefix._SVD1 - &prefix._SVD&SVDKEEP;
16753 +          do i = 1 to dim(svd_array);
16754 +             if svd_array(i)=. then svd_array(i)=0;
16755 +          end;
16756 +          drop i;
16757 +        run;
16758 +    %end;
16760 +    %if &syscc > 4 %then %do;
16761 +       %let EMEXCEPTIONSTRING = EMTOOL.SPSVDERROR;
16762 +       %goto end_svd_do_samp;
16763 +    %end;
16765 +    %if &rowpro ne %then %do;
16766 +        proc sort data=&data; by &rowVar; run;
16767 +        /* when sampling weights may have wrong dimensions*/
16768 +       proc sql;
16769 +          create table new_global as
16770 +             select a.*
16771 +             from &in_global a, &U b
16772 +             where a.index = b.index;
16773 +       quit;
16775 +        proc spsvd data=&data IN_V=&V
16776 +            local = &cellWgt global = none in_global = new_global ;
16777 +            row &rowVar; col &colVar; entry &entryVar;
16778 +            output wordPro = &rowpro bigpro normrow prefix="&prefix._SVD";
16779 +        run;
16780 +    %end;
16782 +    %if &syscc > 4 %then %do;
16783 +       %let EMEXCEPTIONSTRING = EMTOOL.SPSVDERROR;
16784 +       %goto end_svd_do_samp;
16785 +    %end;
16787 +   %end_svd_do_samp:
16789 +%mend;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TEXTCLUSTER4_VARIABLESET.
      WHERE (KUPCASE(NAME)='RESUME_STR') and USE in ('D', 'Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set EMWS3.TEXTFILTER4_EMINFO.
NOTE: The data set EMWS3.TEXTCLUSTER4_LAST_TM_NODES has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TEXTCLUSTER4_VARIABLESET.
      WHERE (ROLE='TARGET') and USE in ('D', 'Y') and (LEVEL not = 'INTERVAL');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: Table EMWS3.TEXTCLUSTER4_TMCONFIG created, with 1 rows and 29 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 674 observations read from the data set EMWS3.TEXTPARSING_TRAIN.
NOTE: There were 674 observations read from the data set EMWS3.TEXTFILTER4_DOC_IDS.
NOTE: There were 674 observations read from the data set EMWS3.TEXTFILTER4_TRAIN.
NOTE: The data set WORK._KEEPDOCS has 674 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
 
 
NOTE: SQL view WORK._KEEPDATA has been defined.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There are 12 distinct target levels.
NOTE: There were 218546 observations read from the data set EMWS3.TEXTFILTER4_TMOUT.
NOTE: There were 674 observations read from the data set WORK._KEEPDOCS.
NOTE: There were 218546 observations read from the data set WORK._KEEPDATA.
NOTE: There were 16666 observations read from the data set EMWS3.TEXTFILTER4_TERMS_DATA.
      WHERE KEEP='Y';
NOTE: There were 73331 observations read from the data set EMWS3.TEXTFILTER4_TERM_STRINGS.
NOTE: There were 674 observations read from the data set WORK._KEEPDOCS.
NOTE: PROCEDURE TMUTIL used (Total process time):
      real time           0.26 seconds
      cpu time            0.11 seconds
 
 
 
NOTE: PROCEDURE TMUTIL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK._TERMSTMUTIL has 16666 observations and 8 variables.
NOTE: The data set WORK._OUTTMUTIL_ has 205198 observations and 3 variables.
NOTE: PROCEDURE TMUTIL used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
NOTE: Table WORK._DISTINCTTERMS created, with 13209 rows and 4 columns.
 
NOTE: Table WORK._NEWKEY created, with 16666 rows and 11 columns.
 
NOTE: Table WORK._WEIGHTS created, with 8502 rows and 2 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.17 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 205198 observations read from the data set WORK._OUTTMUTIL_.
NOTE: The data set WORK._OUTTMUTIL_ has 205198 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.08 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: P has been set to 50.
NOTE: Restart 1, Converged 36
NOTE: Restart 2, Converged 52
NOTE: Restart 3, Converged 68
NOTE: Restart 4, Converged 85
NOTE: Restart 5, Converged 96
NOTE: Singular values have converged.  Creating data sets.
NOTE: Restarted 5 times.
NOTE: Using value of 68 for K.
NOTE: There were 205198 observations read from the data set WORK._OUTTMUTIL_.
NOTE: There were 8502 observations read from the data set WORK._WEIGHTS.
NOTE: The data set EMWS3.TEXTCLUSTER4_SVD_U has 8502 observations and 101 variables.
NOTE: The data set WORK._SVDV has 673 observations and 101 variables.
NOTE: The data set EMWS3.TEXTCLUSTER4_SVD_S has 100 observations and 2 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.51 seconds
      cpu time            0.28 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8502 observations read from the data set EMWS3.TEXTCLUSTER4_SVD_U.
NOTE: The data set EMWS3.TEXTCLUSTER4_SVD_U has 8502 observations and 69 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 673 observations read from the data set WORK._SVDV.
NOTE: The data set WORK._SVDV has 673 observations and 69 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Table WORK.NEW_GLOBAL created, with 8502 rows and 2 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 205198 observations read from the data set WORK._OUTTMUTIL_.
NOTE: The data set WORK._OUTTMUTIL_ has 205198 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 205198 observations read from the data set WORK._OUTTMUTIL_.
NOTE: There were 8502 observations read from the data set EMWS3.TEXTCLUSTER4_SVD_U.
NOTE: There were 8502 observations read from the data set WORK.NEW_GLOBAL.
NOTE: The data set WORK._SVDCOLPRO has 673 observations and 69 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.21 seconds
      cpu time            0.10 seconds
 
 
 
NOTE: There were 674 observations read from the data set WORK._KEEPDOCS.
NOTE: The data set WORK._DOCIDS has 674 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 673 observations read from the data set WORK._SVDCOLPRO.
NOTE: There were 674 observations read from the data set WORK._DOCIDS.
NOTE: The data set WORK._SVDCOLPRO has 674 observations and 69 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 674 observations read from the data set WORK._SVDCOLPRO.
NOTE: The data set WORK._SVDCOLPRO has 674 observations and 69 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 205198 observations read from the data set WORK._OUTTMUTIL_.
NOTE: The data set WORK._OUTTMUTIL_ has 205198 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
NOTE: Table WORK.NEW_GLOBAL created, with 8502 rows and 2 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 205198 observations read from the data set WORK._OUTTMUTIL_.
NOTE: There were 673 observations read from the data set WORK._SVDV.
NOTE: There were 8502 observations read from the data set WORK.NEW_GLOBAL.
NOTE: The data set WORK._SVDROWPRO has 8502 observations and 69 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.15 seconds
      cpu time            0.04 seconds
 
 
NOTE: Table EMWS3.TEXTCLUSTER4_TERMS created, with 16666 rows and 81 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.22 seconds
      cpu time            0.03 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMGETNCL.SOURCE.
16792 +
16793 + /*
16794 +  Macro:   tmgetncl.sas
16795 +  Purpose: To obtain a default number of clusters
16796 +  Syntax:  %tmgetncl(data=, maxclusters=, vars=);
16797 +
16798 +  Required Parameters:  data=      The input data set.
16799 +
16800 +  Optional Parameters:  vars=      Variables to be used
16801 +
16802 +  History:
16803 +  2001/01/23 - Bill Wheeler - Initial Coding.
16804 +
16805 +*/
16806 + %MACRO tmgetncl(data=, maxclusters=, vars=, tempDS=,
16807 +                 clusDS=, threads=THREADS);
16808 +
16809 +  %if &maxclusters= %then %let maxclusters = 40;
16810 +
16811 +  %if &vars ^= %then %let var = var &vars;
16812 +  %else %let var = ;
16813 +
16814 +  /* run PROC FASTCLUS with maxClusters clusters */
16815 +  proc fastclus data = &data noprint
16816 +    maxclusters = &maxclusters
16817 +    mean = &tempDS;
16818 +    &var
16819 +    ;
16820 +    run;
16821 +
16822 +  /* use PROC CLUSTER with the MEAN data set from FASTCLUS */
16823 +  proc cluster data = &tempDS
16824 +    method = WARD
16825 +    pseudo
16826 +    noprint
16827 +    outtree = &tempDS;
16828 +    &var;
16829 +  run;
16830 +
16831 +  %if (&SYSERR > 4) %then %do;
16832 +    data &clusDS; nclus = 0; run;
16833 +    %goto exit;
16834 +  %end;
16835 +
16836 +  /* sort and get rid of missing values in the outtree data set */
16837 +  %tmsort(data=&tempDS(where=(_ccc_ > -99999.0) keep = _ncl_ _ccc_),
16838 +        out=&tempDS, by=_ncl_, options=, threads=&threads);
16839 +
16840 +  data &clusDS; set &tempDS;
16841 +    keep nclus;
16842 +    retain loclclus -1 loclccc 0 maxccc 0 maxclus 0
16843 +   jclus -1 maxjump -1 nclus 0 jccc 0 prevjump 0 jump 0 occc 0 oncl 0;
16844 +
16845 +   if _N_ = 1 then do;
16846 +     maxccc = _ccc_;
16847 +     maxclus = _ncl_;
16848 +     nclus = _ncl_;
16849 +     occc = _ccc_;
16850 +     oncl = _ncl_;
16851 +   end;
16852 +   else if (_N_ = 2) then do;
16853 +     jump = _ccc_ - occc;
16854 +     if (jump > 0) then do;
16855 +       maxjump = jump;
16856 +       jclus = _ncl_;
16857 +     end;
16858 +     if (_ccc_ > maxccc) then do;
16859 +       maxccc = _ccc_;
16860 +       maxclus = _ncl_;
16861 +     end;
16862 +     occc = _ccc_;
16863 +     oncl = _ncl_;
16864 +   end;
16865 +
16866 +   else if (_N_ > 2) then do;
16867 +     prevjump = jump;
16868 +     jump = _ccc_ - occc;
16869 +
16870 +     if ((prevjump > 0) & (jump < 0) & (loclclus < 0)) then do;
16871 +        loclclus = oncl;
16872 +        loclccc = occc;
16873 +     end;
16874 +     if (_ccc_ > maxccc) then do;
16875 +       maxccc = _ccc_;
16876 +       maxclus = _ncl_;
16877 +     end;
16878 +     if ((jump > 0) & (jump > maxjump)) then do;
16879 +       jclus = _ncl_;
16880 +       maxjump = jump;
16881 +       jccc = _ccc_;
16882 +     end;
16883 +
16884 +     occc = _ccc_;
16885 +     oncl = _ncl_;
16886 +
16887 +     if ((loclclus > 0) & (jclus > 0)) then nclus = MIN(loclclus, jclus);
16888 +     else if (loclclus > 0) then nclus = loclclus;
16889 +     else if (jclus > 0) then nclus = jclus;
16890 +     else nclus = maxclus;
16891 +   end;
16892 +  run;
16893 +
16894 +  %exit: ;
16895 +
16896 +%MEND tmgetncl;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMFAST.SOURCE.
16897 + /*
16898 +
16899 +  Macro:   tmfast.sas
16900 +  Purpose: Call proc fastclus with given defaults and parameters.
16901 +  Syntax:  %tmfast(data=, clusters=, outstat=, vars=);
16902 +
16903 +  Required Parameters:  data=      The input data set.
16904 +                        clusters=  The maximum number of clusters
16905 +
16906 +  Optional Parameters:  vars=      Variables to be used
16907 +                        outstat=   The name of the OUTSTAT data set
16908 +                        outseed=   The name of the OUTSEED data set
16909 +
16910 +  Either outstat or outseed mut be given, but not both.
16911 +  History:
16912 +  2001/01/16 - Bill Wheeler - Initial Coding.
16913 +
16914 +*/
16915 +%MACRO tmfast(data=, clusters=, outstat=, outseed=,
16916 +                 id=, out=, vars=);
16917 + /* defaults */
16918 + %if (&id ne ) %then %let id = id &id;
16919 + %if (&out ne ) %then %let out = out = &out;
16920 + %if (&vars ne ) %then %let var = var &vars;
16921 + %else %let var = ;
16922 +
16923 + %if &outseed= %then
16924 + %do;
16925 +   proc fastclus data = &data
16926 +   maxclusters = &clusters noprint
16927 +   outstat = &outstat &out;
16928 +   &var;
16929 +   &id;
16930 + %end;
16931 + %else
16932 + %do;
16933 +   proc fastclus data = &data
16934 +   maxclusters = &clusters noprint
16935 +   outseed = &outseed &out;
16936 +   &var;
16937 +   &id;
16938 + %end;
16939 +%MEND tmfast;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMEMCLUS.SOURCE.
16940 +
16941 + /*
16942 +
16943 +  Macro:   tmemclus.sas
16944 +  Purpose: Call proc emclus with given defaults and parameters.
16945 +  Syntax:  %tmemclus(data=, role=, clusters=, seed=,
16946 +                   outstat=, out=, vars=, cov=, iter=, secclus=,
16947 +                   seciter=, min=, method=, eps=, init=, print=,
16948 +                   p=, outliers=, decvar=, initstd=, dist=,
16949 +                   secstd=, nobs=, threads=);
16950 +  Required Parameters:  data=      The input data set.
16951 +                        role=      Train or score
16952 +                        clusters=  The number of primary clusters
16953 +
16954 +  Optional Parameters:  vars=      Variables to be used
16955 +                   cov=       Type of covariance matrix
16956 +                   iter=      Number of EM iterations
16957 +                   secclus    Number of secondary clusters
16958 +                   seciter    Number of k-means iterations
16959 +                   min=       Minimum number of obs in a cluster
16960 +                   method=    Standard or scaled
16961 +                   eps=       Stopping tolerance
16962 +                   init=      Random, Fastclus, or Emclus
16963 +                   print=     All, last, or none
16964 +                   p=
16965 +                   outliers=  Keep, cluster, or ignore
16966 +                   outstat=   Name of OUTSTAT data set
16967 +                   out=       Name of OUT data set
16968 +                   seed=      Name of SEED data set
16969 +                   decvar=    Proportion to decrease variances
16970 +                   initstd=   Initial standard deviation
16971 +                   dist=      Minimum distance between clusters
16972 +                   secstd=    Secondary cluster max std dev.
16973 +                   nobs=      Number of obs read in each iteration
16974 +  History:
16975 +  2001/01/16 - Bill Wheeler - Initial Coding.
16976 +  2001/11/29 - Bill Wheeler - Updated for version 8 or 9
16977 +*/
16978 +%MACRO tmemclus(data=, role=, clusters=, seed=,
16979 + outstat=, out=, vars=, cov=, iter=, secclus=,
16980 + seciter=, min=, method=, eps=, init=, print=,
16981 + p=, outliers=, decvar=, initstd=, dist=, secstd=, nobs=, threads=);
16982 +
16983 + %local saveout saveseed op1 op2 op3 op4;
16984 +
16985 + %LET saveout = &out;
16986 + %LET saveseed = &outstat;
16987 +
16988 + /* defaults */
16989 + %if &role= %then %let role = TRAIN;
16990 + %if &seed ne %then %let seed = seed=&seed;
16991 + %if &vars= %then %let var = ;
16992 + %else %let var = var &vars;
16993 + %if &cov ne %then %let cov = cov = &cov;
16994 + %if &iter ne %then %let iter = iter = &iter;
16995 + %if &init ne %then %let init = init = &init;
16996 + %if &eps ne  %then %let eps = eps = &eps;
16997 + %if &min ne %then %let min = min = &min;
16998 + %if &seciter ne %then %let seciter = seciter = &seciter;
16999 + %if &print ne %then %let print = print = &print;
17000 + %if &p ne %then %let p = p = &p;
17001 + %if &outliers ne %then %let outliers = outliers = &outliers;
17002 + %if &method ne %then %let method = method = &method;
17003 + %if &decvar ne %then %let decvar = decvar = &decvar;
17004 + %if &outstat ne %then %let outstat = outstat = &outstat;
17005 + %if &out ne %then %let out = out = &out;
17006 + %if (&threads >= 0)  %then %let threads = threads = &threads;
17007 + %else %let threads = ;
17008 +
17009 + %LET op1 = ;
17010 + %LET op2 = ;
17011 + %LET op3 = ;
17012 + %LET op4 = ;
17013 + %if ^(&initstd=) %then %let op1 = %str(initstd = &initstd);
17014 + %if ^(&dist=) %then %let op2 = %str(dist = &dist);
17015 + %if ^(&secstd=) %then %let op3 = %str(secstd = &secstd);
17016 + %if ^(&nobs=) %then %let op4 = %str(nobs = &nobs);
17017 +
17018 +
17019 + %IF &SYSVER < 9 %THEN %DO;
17020 +    %LET cov = ;
17021 +    %LET decvar = ;
17022 +    %LET outliers = ;
17023 +    %LET out = ;
17024 + %END;
17025 +
17026 +
17027 + %if %upcase(&role) = TRAIN %then
17028 + %do;
17029 +   proc emclus data = &data
17030 +   clusters = &clusters
17031 +   &seed
17032 +   &outstat
17033 +   &out
17034 +   &init
17035 +   &eps
17036 +   &method
17037 +   &secclus
17038 +   &min
17039 +   &print
17040 +   &outliers
17041 +   &iter
17042 +   &op1 &op2
17043 +   &op3 &op4
17044 +   &decvar
17045 +   &cov
17046 +   &threads
17047 +   ;
17048 +   &var;
17049 + %end;
17050 + %else
17051 +  %do;
17052 +    proc emclus data = &data
17053 +    role = score
17054 +    clusters = &clusters
17055 +    &seed
17056 +    &out
17057 +    &cov
17058 +    ;
17059 +    &var;
17060 +  %end;
17061 +
17062 + %IF &SYSVER < 9 and &saveout ^= %THEN %DO;
17063 +   proc emclus data = &data
17064 +   role = score
17065 +   clusters = &clusters
17066 +   seed = &saveseed
17067 +   &saveout
17068 +   ;
17069 +   &var;
17070 + %END;
17071 +
17072 +
17073 +%MEND tmemclus;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMPRED.SOURCE.
17074 +
17075 +/*
17076 +  Macro: tmpred(inds,outds,clusters,type=,ignore=,freqDS=)
17077 +
17078 +  Description: This macro will take output from
17079 +     emclus and generate predicted
17080 +      predicted clusters.
17081 +
17082 +  Parms: inds - input data set, produced by emclus.
17083 +   outds - data set with clusters created by this macro.
17084 +   clusters - number of clusters that should be on this data set
17085 +   type - valid values: 'max' or 'prob'.  Max will just take the
17086 +      cluster with the highest probability as the predicted cluster.
17087 +      In the case of a tie the first cluster with that value will
17088 +       selected.
17089 +      Prob will attempt to select multiple clusters based on
17090 +      how many clusters were requested.  That is if 3 clusters
17091 +      were requested, any cluster with prob>1/3 will be selected
17092 +      as the predicted cluster. THIS OPTION IS UNTESTED.
17093 +*/
17094 +
17095 +%macro tmpred(inds,outds,clusters,type=, ignore=0, freqDS=, compress=1);
17096 +
17097 +  %local _str newfreqDS _flag;
17098 +
17099 +  * set the optional arguments;
17100 +  %if &type= %then %let type=max;
17101 +  %if &ignore = 1 %then %let
17102 +    _str = if _CLUSTER_ = &clusters then _CLUSTER_ = .;
17103 +  %else %let _str = ;
17104 +  %if %str(&freqDS) ^= %str() %then %do;
17105 +   %let newfreqDS = &freqDS(keep=_c1-_c&clusters);
17106 +   %let _flag = 1;
17107 +  %end;
17108 +  %else %let _flag = 0;
17109 +
17110 +  %if &compress = 1 %then %let compress = compress=Y;
17111 +  %else %let compress = ;
17112 +
17113 +  data &outds(&compress drop=_c1-_c&clusters)
17114 +    %if &_flag = 1 %then %do;
17115 +    &newfreqDS
17116 +    %end;
17117 +    ;
17118 +    set &inds end=eof;
17119 +   * array for holding all probabilities;
17120 +    array _p prob1--prob&clusters;
17121 +    array _c(&clusters);
17122 +    retain _c 0;
17123 +   * get rid of working columns;
17124 +    drop _max_ _i /*prob1--prob&clusters*/ _WARN_;
17125 +    /* keep the largest probability and the cluster */
17126 +    _max_ = 0;
17127 +    do _i = 1 to &clusters;
17128 +      if _p(_i) > _max_ then do;
17129 +        _max_ = _p(_i);
17130 +        _CLUSTER_ = _i;
17131 +      end;
17132 +    end;
17133 +    if (_CLUSTER_ >= 1) and (_CLUSTER_ <= &clusters) then
17134 +      _c(_CLUSTER_) = _c(_CLUSTER_) + 1;
17135 +    else _CLUSTER_ = .;
17136 +    &_str;
17137 +    %if &_flag = 1 %then %do;
17138 +      if eof then do;
17139 +        output &freqDS;
17140 +                output &outDS;
17141 +          end;
17142 +          else output &outDS;
17143 +        %end;
17144 +
17145 +    run;
17146 +%mend tmpred;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMSORT.SOURCE.
17147 + /*
17148 +PROC SORT macro
17149 +
17150 +%tmsort(data=, out=, by=);
17151 +
17152 +data=      - name of input data set (outtree data set from PROC CLUSTER)
17153 +out=       - name of the output data set
17154 +by=        - by statement
17155 +options=   - proc options
17156 +*/
17157 +
17158 +%macro tmsort(data=, out=, by=, options=, threads=THREADS);
17159 +  %if %BQUOTE(&out) ^= %then %let out = out =  &out;
17160 +  %if &SYSVER < 9 %then %let threads = ;
17161 +
17162 +  proc sort data = %STR(&data) &threads &options
17163 +    &out;
17164 +    by &by;
17165 +  run;
17166 +
17167 +%mend tmsort;
NOTE: %INCLUDE (level 1) ending.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK._CLUSTEMP1 has 12 observations and 75 variables.
NOTE: PROCEDURE FASTCLUS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK._CLUSTEMP1 has 23 observations and 84 variables.
NOTE: PROCEDURE CLUSTER used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK._CLUSTEMP1.
      WHERE _ccc_>-99999;
NOTE: The data set WORK._CLUSTEMP1 has 11 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK._CLUSTEMP1.
NOTE: The data set WORK._CLUSTEMP has 11 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK._FASTCLUSSTAT has 35 observations and 71 variables.
NOTE: PROCEDURE FASTCLUS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The standard EM algorithm will be run.
NOTE: DIST is set to 0.1013525957
NOTE: EPS is set to 0.1
NOTE: INITSTD is set to 21.421179185
NOTE: ITER is set to 5
NOTE: MAXTIME is set to 2147483647
WARNING: The maximum number of 5 iterations in the EM algorithm has been reached. Parameter estimates may not be accurate.
NOTE: There were 674 observations read from the data set WORK._SVDCOLPRO.
NOTE: There were 35 observations read from the data set WORK._FASTCLUSSTAT.
NOTE: The data set EMWS3.TEXTCLUSTER4_EMOUTSTAT has 11 observations and 75 variables.
NOTE: The data set WORK._TMUTILDOC has 674 observations and 75 variables.
NOTE: PROCEDURE EMCLUS used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 674 observations read from the data set WORK._TMUTILDOC.
NOTE: The data set EMWS3.TEXTCLUSTER4_DOCS has 674 observations and 75 variables.
NOTE: Compressing data set EMWS3.TEXTCLUSTER4_DOCS increased size by 14.29 percent.
      Compressed is 8 pages; un-compressed would require 7 pages.
NOTE: The data set WORK._CLUSSTAT has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER4_DOCS.
NOTE: The data set EMWS3.TEXTCLUSTER4_DOCS has 674 observations and 75 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      451:154
NOTE: There were 1 observations read from the data set WORK._CLUSSTAT.
NOTE: The data set WORK._CLUSSTAT has 5 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK._CLUSSTAT.
NOTE: The data set WORK._CLUSSTAT has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set EMWS3.TEXTCLUSTER4_EMOUTSTAT.
NOTE: The data set WORK._CLUSTERMEAN has 5 observations and 69 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Table WORK._MEANDOCS created, with 674 rows and 143 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 674 observations read from the data set WORK._MEANDOCS.
NOTE: There were 5 observations read from the data set WORK._CLUSSTAT.
NOTE: The data set WORK._RMSCALC has 674 observations and 152 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 674 observations read from the data set WORK._RMSCALC.
NOTE: The data set WORK._MEANERR has 5 observations and 5 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK._MEANERR.
NOTE: The data set WORK._RMSSE has 5 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Table WORK._CLUSSTAT2 created, with 5 rows and 70 columns.
 
NOTE: Table EMWS3.TEXTCLUSTER4_CLUSTERS created, with 5 rows and 72 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 16666 observations read from the data set EMWS3.TEXTFILTER4_TERMS_DATA.
      WHERE KEEP='Y';
NOTE: There were 73331 observations read from the data set EMWS3.TEXTFILTER4_TERM_STRINGS.
NOTE: There were 16666 observations read from the data set EMWS3.TEXTFILTER4_TERMS.
NOTE: The data set WORK._TERMS_ has 16666 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 16666 observations read from the data set WORK._TERMS_.
NOTE: The data set WORK._TERMS_ has 13209 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13209 observations read from the data set WORK._TERMS_.
NOTE: The data set WORK._TERMS_ has 13209 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 218546 observations read from the data set EMWS3.TEXTFILTER4_TMOUT.
NOTE: The data set WORK._TMOUT_ has 218546 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.08 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 218546 observations read from the data set WORK._TMOUT_.
NOTE: There were 13209 observations read from the data set WORK._TERMS_.
NOTE: The data set WORK._TMOUT_ has 218546 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER4_DOCS.
NOTE: The data set WORK._DOCS_ has 674 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
NOTE: SQL view WORK._CMB has been defined.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.11 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 218546 observations read from the data set WORK._TMOUT_.
NOTE: There were 674 observations read from the data set WORK._DOCS_.
NOTE: There were 218546 observations read from the data set WORK._CMB.
NOTE: The data set WORK._TFREQ has 32211 observations and 5 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.26 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 218546 observations read from the data set WORK._TMOUT_.
NOTE: There were 674 observations read from the data set WORK._DOCS_.
NOTE: There were 218546 observations read from the data set WORK._CMB.
NOTE: The data set WORK._SUM has 6 observations and 4 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK._SUM.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Table WORK._SUM has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 32211 observations read from the data set WORK._TFREQ.
NOTE: The data set WORK._TFREQ has 32211 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 32211 observations read from the data set WORK._TFREQ.
NOTE: The data set WORK._UNQT has 150 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 150 observations read from the data set WORK._UNQT.
NOTE: 75 observations with duplicate key values were deleted.
NOTE: The data set WORK._UNQT has 75 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Table WORK._CLCDF created, with 372 rows and 3 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Table WORK._UNQT has been dropped.
NOTE: Table WORK._TFREQ has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 372 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDF has 75 observations and 7 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 75 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDF has 75 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 75 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDFTR has 372 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
NOTE: Table WORK._CLCDF has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 372 observations read from the data set WORK._CLCDFTR.
NOTE: The data set WORK._CLCDFTR has 372 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 372 observations read from the data set WORK._CLCDFTR.
NOTE: The data set WORK._DESC_ has 5 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: Table WORK._CLCDFTR has been dropped.
NOTE: View WORK._CMB has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set EMWS3.TEXTCLUSTER4_CLUSTERS.
NOTE: The data set EMWS3.TEXTCLUSTER4_CLUSTERS has 5 observations and 72 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK._DESC_.
NOTE: The data set WORK._DESC_ has 5 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set EMWS3.TEXTCLUSTER4_CLUSTERS.
NOTE: There were 5 observations read from the data set WORK._DESC_.
NOTE: The data set WORK._DESC_ has 5 observations and 73 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK._DESC_.
NOTE: The data set EMWS3.TEXTCLUSTER4_CLUSTERS has 5 observations and 73 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable TARGET is uninitialized.
NOTE: The data set EMWS3.TEXTCLUSTER4_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TEXTCLUSTER4_TMCONFIG.
NOTE: The data set EMWS3.TEXTCLUSTER4_TMCONFIG has 1 observations and 32 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 15 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 16 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 17 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 19 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 20 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 21 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 22 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 22 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 23 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 24 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 25 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 26 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 27 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 28 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 29 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 29 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 30 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 31 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 31 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 32 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 32 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 33 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 33 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 34 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 34 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 35 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 36 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 36 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 37 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 37 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 38 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 38 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 39 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 40 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 40 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 41 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 41 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 42 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 43 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 44 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 44 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 45 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 45 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 46 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 47 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 47 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 48 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 48 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 49 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 49 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 50 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 51 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 51 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 52 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 52 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 53 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 53 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 54 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 55 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 55 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 56 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 56 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 57 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 57 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 58 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 58 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 59 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 59 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 60 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 60 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 61 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 61 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 62 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 62 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 63 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 63 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 64 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 64 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 65 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 65 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 66 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 66 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 67 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 67 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 68 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 68 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 69 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 69 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 70 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 70 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 71 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 71 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 72 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 72 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 73 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 73 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 74 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
WARNING: No logical assign for filename TEMP.
17504  *------------------------------------------------------------*;
17505  * End TRAIN: TextCluster4;
17506  *------------------------------------------------------------*;
 
17507  *------------------------------------------------------------*;
17508  * Close any missing semi colons;
17509  *------------------------------------------------------------*;
17510  ;
17511  ;
17512  ;
17513  ;
17514  quit;
17515  *------------------------------------------------------------*;
17516  * Close any unbalanced quotes;
17517  *------------------------------------------------------------*;
17518  /*; *"; *'; */
17519  ;
17520  run;
17521  quit;
17522  /* Reset EM Options */
17523  options formchar="|----|+|---+=|-/\<>*";
17524  options nocenter ls=256 ps=10000;
17525  goptions reset=all device=GIF NODISPLAY;
 
17526  proc sort data=WORK.EM_METACHANGE;
17527  by key uname;
17528  run;
 
NOTE: There were 74 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 74 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17529  filename x "C:\Users\lahar\OneDrive\Desktop\Data Mining\Resume\Workspaces\EMWS3\TextCluster4\CDELTA_TRAIN.sas";
17530  data _null_;
17531  file x;
17532  put 'if upcase(NAME) = "TEXTCLUSTER4_CLUSTER_" then do;';
17533  put 'ROLE = "SEGMENT";';
17534  put 'LEVEL = "NOMINAL";';
17535  put 'end;';
17536  put 'else ';
17537  put 'if upcase(NAME) = "TEXTCLUSTER4_PROB1" then do;';
17538  put 'ROLE = "REJECTED";';
17539  put 'end;';
17540  put 'else ';
17541  put 'if upcase(NAME) = "TEXTCLUSTER4_PROB2" then do;';
17542  put 'ROLE = "REJECTED";';
17543  put 'end;';
17544  put 'else ';
17545  put 'if upcase(NAME) = "TEXTCLUSTER4_PROB3" then do;';
17546  put 'ROLE = "REJECTED";';
17547  put 'end;';
17548  put 'else ';
17549  put 'if upcase(NAME) = "TEXTCLUSTER4_PROB4" then do;';
17550  put 'ROLE = "REJECTED";';
17551  put 'end;';
17552  put 'else ';
17553  put 'if upcase(NAME) = "TEXTCLUSTER4_PROB5" then do;';
17554  put 'ROLE = "REJECTED";';
17555  put 'end;';
17556  put 'else ';
17557  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD1" then do;';
17558  put 'ROLE = "INPUT";';
17559  put 'LEVEL = "INTERVAL";';
17560  put 'end;';
17561  put 'else ';
17562  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD10" then do;';
17563  put 'ROLE = "INPUT";';
17564  put 'LEVEL = "INTERVAL";';
17565  put 'end;';
17566  put 'else ';
17567  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD11" then do;';
17568  put 'ROLE = "INPUT";';
17569  put 'LEVEL = "INTERVAL";';
17570  put 'end;';
17571  put 'else ';
17572  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD12" then do;';
17573  put 'ROLE = "INPUT";';
17574  put 'LEVEL = "INTERVAL";';
17575  put 'end;';
17576  put 'else ';
17577  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD13" then do;';
17578  put 'ROLE = "INPUT";';
17579  put 'LEVEL = "INTERVAL";';
17580  put 'end;';
17581  put 'else ';
17582  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD14" then do;';
17583  put 'ROLE = "INPUT";';
17584  put 'LEVEL = "INTERVAL";';
17585  put 'end;';
17586  put 'else ';
17587  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD15" then do;';
17588  put 'ROLE = "INPUT";';
17589  put 'LEVEL = "INTERVAL";';
17590  put 'end;';
17591  put 'else ';
17592  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD16" then do;';
17593  put 'ROLE = "INPUT";';
17594  put 'LEVEL = "INTERVAL";';
17595  put 'end;';
17596  put 'else ';
17597  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD17" then do;';
17598  put 'ROLE = "INPUT";';
17599  put 'LEVEL = "INTERVAL";';
17600  put 'end;';
17601  put 'else ';
17602  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD18" then do;';
17603  put 'ROLE = "INPUT";';
17604  put 'LEVEL = "INTERVAL";';
17605  put 'end;';
17606  put 'else ';
17607  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD19" then do;';
17608  put 'ROLE = "INPUT";';
17609  put 'LEVEL = "INTERVAL";';
17610  put 'end;';
17611  put 'else ';
17612  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD2" then do;';
17613  put 'ROLE = "INPUT";';
17614  put 'LEVEL = "INTERVAL";';
17615  put 'end;';
17616  put 'else ';
17617  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD20" then do;';
17618  put 'ROLE = "INPUT";';
17619  put 'LEVEL = "INTERVAL";';
17620  put 'end;';
17621  put 'else ';
17622  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD21" then do;';
17623  put 'ROLE = "INPUT";';
17624  put 'LEVEL = "INTERVAL";';
17625  put 'end;';
17626  put 'else ';
17627  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD22" then do;';
17628  put 'ROLE = "INPUT";';
17629  put 'LEVEL = "INTERVAL";';
17630  put 'end;';
17631  put 'else ';
17632  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD23" then do;';
17633  put 'ROLE = "INPUT";';
17634  put 'LEVEL = "INTERVAL";';
17635  put 'end;';
17636  put 'else ';
17637  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD24" then do;';
17638  put 'ROLE = "INPUT";';
17639  put 'LEVEL = "INTERVAL";';
17640  put 'end;';
17641  put 'else ';
17642  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD25" then do;';
17643  put 'ROLE = "INPUT";';
17644  put 'LEVEL = "INTERVAL";';
17645  put 'end;';
17646  put 'else ';
17647  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD26" then do;';
17648  put 'ROLE = "INPUT";';
17649  put 'LEVEL = "INTERVAL";';
17650  put 'end;';
17651  put 'else ';
17652  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD27" then do;';
17653  put 'ROLE = "INPUT";';
17654  put 'LEVEL = "INTERVAL";';
17655  put 'end;';
17656  put 'else ';
17657  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD28" then do;';
17658  put 'ROLE = "INPUT";';
17659  put 'LEVEL = "INTERVAL";';
17660  put 'end;';
17661  put 'else ';
17662  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD29" then do;';
17663  put 'ROLE = "INPUT";';
17664  put 'LEVEL = "INTERVAL";';
17665  put 'end;';
17666  put 'else ';
17667  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD3" then do;';
17668  put 'ROLE = "INPUT";';
17669  put 'LEVEL = "INTERVAL";';
17670  put 'end;';
17671  put 'else ';
17672  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD30" then do;';
17673  put 'ROLE = "INPUT";';
17674  put 'LEVEL = "INTERVAL";';
17675  put 'end;';
17676  put 'else ';
17677  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD31" then do;';
17678  put 'ROLE = "INPUT";';
17679  put 'LEVEL = "INTERVAL";';
17680  put 'end;';
17681  put 'else ';
17682  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD32" then do;';
17683  put 'ROLE = "INPUT";';
17684  put 'LEVEL = "INTERVAL";';
17685  put 'end;';
17686  put 'else ';
17687  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD33" then do;';
17688  put 'ROLE = "INPUT";';
17689  put 'LEVEL = "INTERVAL";';
17690  put 'end;';
17691  put 'else ';
17692  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD34" then do;';
17693  put 'ROLE = "INPUT";';
17694  put 'LEVEL = "INTERVAL";';
17695  put 'end;';
17696  put 'else ';
17697  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD35" then do;';
17698  put 'ROLE = "INPUT";';
17699  put 'LEVEL = "INTERVAL";';
17700  put 'end;';
17701  put 'else ';
17702  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD36" then do;';
17703  put 'ROLE = "INPUT";';
17704  put 'LEVEL = "INTERVAL";';
17705  put 'end;';
17706  put 'else ';
17707  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD37" then do;';
17708  put 'ROLE = "INPUT";';
17709  put 'LEVEL = "INTERVAL";';
17710  put 'end;';
17711  put 'else ';
17712  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD38" then do;';
17713  put 'ROLE = "INPUT";';
17714  put 'LEVEL = "INTERVAL";';
17715  put 'end;';
17716  put 'else ';
17717  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD39" then do;';
17718  put 'ROLE = "INPUT";';
17719  put 'LEVEL = "INTERVAL";';
17720  put 'end;';
17721  put 'else ';
17722  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD4" then do;';
17723  put 'ROLE = "INPUT";';
17724  put 'LEVEL = "INTERVAL";';
17725  put 'end;';
17726  put 'else ';
17727  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD40" then do;';
17728  put 'ROLE = "INPUT";';
17729  put 'LEVEL = "INTERVAL";';
17730  put 'end;';
17731  put 'else ';
17732  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD41" then do;';
17733  put 'ROLE = "INPUT";';
17734  put 'LEVEL = "INTERVAL";';
17735  put 'end;';
17736  put 'else ';
17737  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD42" then do;';
17738  put 'ROLE = "INPUT";';
17739  put 'LEVEL = "INTERVAL";';
17740  put 'end;';
17741  put 'else ';
17742  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD43" then do;';
17743  put 'ROLE = "INPUT";';
17744  put 'LEVEL = "INTERVAL";';
17745  put 'end;';
17746  put 'else ';
17747  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD44" then do;';
17748  put 'ROLE = "INPUT";';
17749  put 'LEVEL = "INTERVAL";';
17750  put 'end;';
17751  put 'else ';
17752  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD45" then do;';
17753  put 'ROLE = "INPUT";';
17754  put 'LEVEL = "INTERVAL";';
17755  put 'end;';
17756  put 'else ';
17757  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD46" then do;';
17758  put 'ROLE = "INPUT";';
17759  put 'LEVEL = "INTERVAL";';
17760  put 'end;';
17761  put 'else ';
17762  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD47" then do;';
17763  put 'ROLE = "INPUT";';
17764  put 'LEVEL = "INTERVAL";';
17765  put 'end;';
17766  put 'else ';
17767  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD48" then do;';
17768  put 'ROLE = "INPUT";';
17769  put 'LEVEL = "INTERVAL";';
17770  put 'end;';
17771  put 'else ';
17772  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD49" then do;';
17773  put 'ROLE = "INPUT";';
17774  put 'LEVEL = "INTERVAL";';
17775  put 'end;';
17776  put 'else ';
17777  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD5" then do;';
17778  put 'ROLE = "INPUT";';
17779  put 'LEVEL = "INTERVAL";';
17780  put 'end;';
17781  put 'else ';
17782  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD50" then do;';
17783  put 'ROLE = "INPUT";';
17784  put 'LEVEL = "INTERVAL";';
17785  put 'end;';
17786  put 'else ';
17787  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD51" then do;';
17788  put 'ROLE = "INPUT";';
17789  put 'LEVEL = "INTERVAL";';
17790  put 'end;';
17791  put 'else ';
17792  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD52" then do;';
17793  put 'ROLE = "INPUT";';
17794  put 'LEVEL = "INTERVAL";';
17795  put 'end;';
17796  put 'else ';
17797  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD53" then do;';
17798  put 'ROLE = "INPUT";';
17799  put 'LEVEL = "INTERVAL";';
17800  put 'end;';
17801  put 'else ';
17802  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD54" then do;';
17803  put 'ROLE = "INPUT";';
17804  put 'LEVEL = "INTERVAL";';
17805  put 'end;';
17806  put 'else ';
17807  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD55" then do;';
17808  put 'ROLE = "INPUT";';
17809  put 'LEVEL = "INTERVAL";';
17810  put 'end;';
17811  put 'else ';
17812  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD56" then do;';
17813  put 'ROLE = "INPUT";';
17814  put 'LEVEL = "INTERVAL";';
17815  put 'end;';
17816  put 'else ';
17817  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD57" then do;';
17818  put 'ROLE = "INPUT";';
17819  put 'LEVEL = "INTERVAL";';
17820  put 'end;';
17821  put 'else ';
17822  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD58" then do;';
17823  put 'ROLE = "INPUT";';
17824  put 'LEVEL = "INTERVAL";';
17825  put 'end;';
17826  put 'else ';
17827  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD59" then do;';
17828  put 'ROLE = "INPUT";';
17829  put 'LEVEL = "INTERVAL";';
17830  put 'end;';
17831  put 'else ';
17832  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD6" then do;';
17833  put 'ROLE = "INPUT";';
17834  put 'LEVEL = "INTERVAL";';
17835  put 'end;';
17836  put 'else ';
17837  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD60" then do;';
17838  put 'ROLE = "INPUT";';
17839  put 'LEVEL = "INTERVAL";';
17840  put 'end;';
17841  put 'else ';
17842  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD61" then do;';
17843  put 'ROLE = "INPUT";';
17844  put 'LEVEL = "INTERVAL";';
17845  put 'end;';
17846  put 'else ';
17847  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD62" then do;';
17848  put 'ROLE = "INPUT";';
17849  put 'LEVEL = "INTERVAL";';
17850  put 'end;';
17851  put 'else ';
17852  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD63" then do;';
17853  put 'ROLE = "INPUT";';
17854  put 'LEVEL = "INTERVAL";';
17855  put 'end;';
17856  put 'else ';
17857  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD64" then do;';
17858  put 'ROLE = "INPUT";';
17859  put 'LEVEL = "INTERVAL";';
17860  put 'end;';
17861  put 'else ';
17862  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD65" then do;';
17863  put 'ROLE = "INPUT";';
17864  put 'LEVEL = "INTERVAL";';
17865  put 'end;';
17866  put 'else ';
17867  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD66" then do;';
17868  put 'ROLE = "INPUT";';
17869  put 'LEVEL = "INTERVAL";';
17870  put 'end;';
17871  put 'else ';
17872  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD67" then do;';
17873  put 'ROLE = "INPUT";';
17874  put 'LEVEL = "INTERVAL";';
17875  put 'end;';
17876  put 'else ';
17877  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD68" then do;';
17878  put 'ROLE = "INPUT";';
17879  put 'LEVEL = "INTERVAL";';
17880  put 'end;';
17881  put 'else ';
17882  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD7" then do;';
17883  put 'ROLE = "INPUT";';
17884  put 'LEVEL = "INTERVAL";';
17885  put 'end;';
17886  put 'else ';
17887  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD8" then do;';
17888  put 'ROLE = "INPUT";';
17889  put 'LEVEL = "INTERVAL";';
17890  put 'end;';
17891  put 'else ';
17892  put 'if upcase(NAME) = "TEXTCLUSTER4_SVD9" then do;';
17893  put 'ROLE = "INPUT";';
17894  put 'LEVEL = "INTERVAL";';
17895  put 'end;';
17896  run;
 
NOTE: The file X is:
      Filename=C:\Users\lahar\OneDrive\Desktop\Data Mining\Resume\Workspaces\EMWS3\TextCluster4\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=23Nov2023:22:12:52,
      Create Time=19Nov2023:18:16:48
 
NOTE: 364 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17897  filename x;
NOTE: Fileref X has been deassigned.
 
*------------------------------------------------------------*
* Score Log
Date:                November 23, 2023
Time:                22:12:52
*------------------------------------------------------------*
17999  %let EMEXCEPTIONSTRING=;
18000  *------------------------------------------------------------*;
18001  * SCORE: TextCluster4;
18002  *------------------------------------------------------------*;
18003  %let EM_ACTION = SCORE;
18004  %let syscc = 0;
18005  %macro main();
18006
18007     %if %upcase(&EM_ACTION) eq CREATE %then %do;
18008        filename temp catalog 'sashelp.emtxtext.cluster_create.source';
18009        %include temp;
18010        %create();
18011     %end;
18012     %if %upcase(&EM_ACTION) eq TRAIN %then %do;
18013        filename temp catalog 'sashelp.emtxtext.cluster_train.source';
18014        %include temp;
18015        %train();
18016     %end;
18017     %if %upcase(&EM_ACTION) eq REPORT %then %do;
18018        filename temp catalog 'sashelp.emtxtext.cluster_report.source';
18019        %include temp;
18020        %report();
18021     %end;
18022     %if %upcase(&EM_ACTION) eq SCORE %then %do;
18023        filename temp catalog 'sashelp.emtxtext.cluster_score.source';
18024        %include temp;
18025        %score();
18026     %end;
18027  %mend main;
18028
18029  %main();
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.CLUSTER_SCORE.SOURCE.
18030 +%macro tmc_score(import_ds=,configdata=,export_ds=,term_ds=,export_out=,clusters_ds=,svdu=,svds=,
18031 +    import_out=,em_outstat=,prefixstring=,ocluster=,ndescterms=,ftmout=,fterms=,hier=);
18032 +  %if &import_ds ne %then %do;
18033 +
18034 +    %let syscc=0;
18035 +
18036 +    %tmc_doc_score(import=&import_ds,export=&export_ds,emoutstat=&em_outstat,
18037 +                termds=&term_ds,clusters=&clusters_ds,configds=&configdata,
18038 +                _scrout=&import_out, svd_u=&svdu, svd_s=&svds, prefix=&prefixstring,
18039 +                outclusters=&ocluster, descterms=&ndescterms, filterterms=&fterms,
18040 +                filtertmout=&ftmout, hierds=&hier);
18041 +
18042 +  %end;
18043 +
18044 +%mend tmc_score;
18045 +%macro score();
18046 +
18047 +    %global last_parse_node last_filter_node last_prescore_node server_err
18048 +      parsevar EM_SASMSG ;
18049 +    %let syscc=0;
18050 +    %if ^%symexist(tm_debug) %then %let tm_debug=0;
18051 +    /*use saved version of em_info in case macro is not populated*/
18052 +    %em_getname(key=last_tm_nodes, type=data);
18053 +
18054 +    filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
18055 +    %include temp;
18056 +    %tm_get_last_filter(eminfo=&em_user_last_tm_nodes,em_lib=&em_lib,
18057 +                        em_variableset=&em_data_variableset);
18058 +    %if &EMEXCEPTIONSTRING ne %then %goto end_cluster_score;
18059 +    %let lastparsenode=&last_parse_node;
18060 +    %let lastfilternode=&last_filter_node;
18061 +    %let lastprescore=&last_prescore_node;
18062 +    %let filt_node=;
18063 +
18064 +   %em_getname(key=terms, type=data);
18065 +   %em_getname(key=docs, type=data);
18066 +   %em_getname(key=clusters, type=data);
18067 +   %em_getname(key=svd_u, type=data);
18068 +   %em_getname(key=svd_s, type=data);
18069 +   %em_getname(key=emoutstat, type=data);
18070 +   %em_getname(key=tmconfig, type=data);
18071 +
18072 +   %em_getname(key=tmout, type=data);
18073 +   %em_getname(key=validout, type=data);
18074 +   %em_getname(key=testout, type=data);
18075 +   %em_getname(key=scoreout, type=data);
18076 +   %em_getname(key=PRESCORECODE, type=file, extension=sas);
18077 +   %let systmutil=;
18078 +
18079 +    filename temp catalog 'sashelp.emtxtext.tm_data2code.source';
18080 +    %include temp;
18081 +    filename temp catalog 'sashelp.emtext.tmemclus.source';
18082 +    %include temp;
18083 +    filename temp catalog 'sashelp.emtext.tmpred.source';
18084 +    %include temp;
18085 +    filename temp catalog 'sashelp.emtext.tmsort.source';
18086 +    %include temp;
18087 +    filename temp catalog 'sashelp.emtxtext.tmc_doc_score.source';
18088 +    %include temp;
18089 +    filename temp catalog 'sashelp.emtext.tmsvd.source';
18090 +    %include temp;
18091 +    filename temp catalog 'sashelp.emtext.tmfast.source';
18092 +    %include temp;
18093 +
18094 +   %let EM_PUBLISHCODE = PUBLISH;
18095 +   %let EM_SCORECODEFORMAT = OTHER;
18096 +   %let overwrite_pre = ;
18097 +
18098 +   %let lastprescore=%trim(%left(&lastprescore));
18099 +
18100 +   /* Create indexed term table for writing out score code */
18101 +   proc sql noprint;
18102 +       select count(*) into :svdkeep
18103 +       from &em_user_svd_s
18104 +       where keep=1;
18105 +   create table _clusterms as
18106 +      select key, term, role, keep, freq, numdocs, parent, _ispar, weight from &em_user_terms;
18107 +
18108 +   data _filter_tmout;
18109 +      set &EM_LIB..&lastfilternode._tmout;
18110 +   run;
18111 +
18112 +   %tmc_score(import_ds=&em_import_data,export_ds=&em_export_train,
18113 +              import_out=_filter_tmout,
18114 +              export_out=&EM_export_transaction,
18115 +              term_ds=_clusterms,
18116 +              clusters_ds=&em_user_clusters,
18117 +              svdu=&em_user_svd_u,
18118 +              svds=&em_user_svd_s,
18119 +              em_outstat=&em_user_emoutstat,
18120 +              configdata=&em_user_tmconfig,
18121 +              prefixstring=&EM_NODEID,
18122 +              ocluster=&em_user_clusters,
18123 +              ndescterms=&em_property_ndescterms,
18124 +              fterms=&EM_LIB..&lastfilternode._terms,
18125 +              ftmout=&EM_LIB..&lastfilternode._tmout,
18126 +              hier=&em_user_hierds);
18127 +
18128 +   %tmc_score(import_ds=&em_import_validate,export_ds=&em_export_validate,
18129 +              export_out=&EM_USER_validout,
18130 +              import_out=&EM_LIB..&lastfilternode._validout,
18131 +              term_ds=_clusterms,
18132 +              clusters_ds=&em_user_clusters,
18133 +              svdu=&em_user_svd_u,
18134 +              svds=&em_user_svd_s,
18135 +              em_outstat=&em_user_emoutstat,
18136 +              configdata=&em_user_tmconfig,
18137 +              prefixstring=&EM_NODEID);
18138 +   %tmc_score(import_ds=&em_import_test,export_ds=&em_export_test,
18139 +              export_out=&EM_USER_testout,
18140 +              import_out=&EM_LIB..&lastfilternode._testout,
18141 +              term_ds=_clusterms,
18142 +              clusters_ds=&em_user_clusters,
18143 +              svdu=&em_user_svd_u,
18144 +              svds=&em_user_svd_s,
18145 +              em_outstat=&em_user_emoutstat,
18146 +              configdata=&em_user_tmconfig,
18147 +              prefixstring=&EM_NODEID);
18148 +
18149 +   %if &syscc>4 %then %do;
18150 +       %let syscc=0;
18151 +       %goto end_cluster_score;
18152 +   %end;
18153 +
18154 +   * path of the diagram ;
18155 +   %let emwspath = ;
18156 +   data _null_;
18157 +      call symput("emwspath", strip(pathname("&EM_LIB")));
18158 +   run;
18159 +
18160 +   filename pre "&EM_USER_PRESCORECODE";
18161 +   data _null_;
18162 +       file pre;
18163 +       put 'filename temp catalog "sashelp.emtext.tmemclus.source";';
18164 +       put '%include temp;';
18165 +       put 'filename temp catalog "sashelp.emtext.tmpred.source";';
18166 +       put '%include temp;';
18167 +       put 'filename temp catalog "sashelp.emtxtext.tmc_doc_score.source";';
18168 +       put '%include temp;';
18169 +       put 'filename temp catalog "sashelp.emtext.tmsort.source";';
18170 +       put '%include temp;';
18171 +       put 'filename temp catalog "sashelp.emtext.tmsvd.source";';
18172 +       put '%include temp;';
18173 +       put 'filename temp catalog "sashelp.emtext.tmfast.source";';
18174 +       put '%include temp;';
18175 +       put 'filename temp;';
18176 +   run;
18177 +
18178 +
18179 +   /* We need to use last prescore */
18180 +   %if &lastprescore ne %then %do;
18181 +      %let tmprescoreFile = %bquote(&emwspath)&em_dsep&lastprescore&em_dsep.PRESCORECODE.sas;
18182 +      filename tmpre "&tmprescoreFile";
18183 +      %em_copyfile(infref=tmpre, outfref=pre, append=Y);
18184 +      filename tmpre;
18185 +   %end;
18186 +
18187 +   data _codeclusters;
18188 +        set &em_user_clusters (drop=clus_desc);
18189 +   run;
18190 +
18191 +     %if not %symexist(em_term_loc) %then %do;
18192 +       %let em_term_loc = %bquote(%sysfunc(pathname(&EM_LIB)));
18193 +         libname termloc "&em_term_loc";
18194 +
18195 +      %let scored_terms = termloc.&lastfilternode._filtterms;
18196 +       %let scored_clust = termloc.&EM_NODEID._clusters;
18197 +       %let scored_config = termloc.&EM_NODEID._tmconfig;
18198 +       %let scored_svd_u = termloc.&EM_NODEID._svd_u;
18199 +       %let scored_svd_s= termloc.&EM_NODEID._svd_s;
18200 +
18201 +       %if &em_property_algorithm=1.0 %then  %do;
18202 +          %let scored_emoutstat= termloc.&EM_NODEID._emoutstat;
18203 +       %end;
18204 +
18205 +   %end;
18206 +   %else %do; /* Write out data sets to external directory */
18207 +       libname termloc "&em_term_loc";
18208 +        %if %sysfunc(libref(termloc)) ne 0 %then %do;
18209 +           %let  EMEXCEPTIONSTRING = EMTOOL.EMTERMLOC,&em_term_loc;
18210 +           %goto end_cluster_score;
18211 +       %end;
18212 +
18213 +      /* copy datasets to use for prescore code*/
18214 +       data termloc.&EM_LIB._&EM_NODEID._CLUSTERS;
18215 +         set _codeclusters;
18216 +       run;
18217 +
18218 +       data termloc.&EM_LIB._&EM_NODEID._svd_u;
18219 +         set &em_user_svd_u;
18220 +       run;
18221 +
18222 +       data termloc.&EM_LIB._&EM_NODEID._svd_s;
18223 +         set &em_user_svd_s;
18224 +       run;
18225 +
18226 +       data termloc.&EM_LIB._&EM_NODEID._tmconfig;
18227 +         set &em_user_tmconfig;
18228 +       run;
18229 +
18230 +       %let scored_terms = termloc.&EM_LIB._&lastfilternode._filtterms;
18231 +       %let scored_clust = termloc.&EM_LIB._&EM_NODEID._CLUSTERS;
18232 +       %let scored_config = termloc.&EM_LIB._&EM_NODEID._tmconfig;
18233 +       %let scored_svd_u = termloc.&EM_LIB._&EM_NODEID._svd_u;
18234 +       %let scored_svd_s= termloc.&EM_LIB._&EM_NODEID._svd_s;
18235 +
18236 +       %if &em_property_algorithm=1.0 %then  %do;
18237 +         data termloc.&EM_LIB._&EM_NODEID._emoutstat;
18238 +         set &em_user_emoutstat;
18239 +         run;
18240 +           %let scored_emoutstat= termloc.&EM_LIB._&EM_NODEID._emoutstat;
18241 +       %end;
18242 +   %end;
18243 +
18244 +
18245 +
18246 +   %let _score_append=;
18247 +
18248 +   * Now save code, if necessary, for search phrase;
18249 +   filename _tmscore "&EM_FILE_EMPUBLISHSCORECODE";
18250 +   %if &em_property_algorithm=1.0 %then %do;
18251 +   data _NULL_;
18252 +     file _tmscore;
18253 +     length string $200;
18254 +     string ='%tmc_doc_score(import='||'&em_score_output'||",export=work._newexport,";
18255 +     put string;
18256 +     string="      termds=&scored_terms, configds=&scored_config,";
18257 +     put string;
18258 +     string= "      clusters=&scored_clust, emoutstat=&scored_emoutstat, ";
18259 +     put string;
18260 +     string = "      _scrout=work.&lastfilternode._out, svd_u=&scored_svd_u, svd_s=&scored_svd_s, prefix=&em_nodeid);";
18261 +     put string;
18262 +     string='data &em_score_output; set work._newexport;';
18263 +     put string;
18264 +    run;
18265 +    %end;
18266 +    %else %do;
18267 +    data _NULL_;
18268 +     file _tmscore;
18269 +     string= '%'||"tmc_doc_score(import="||'&em_score_output'||",export=work._newexport,";
18270 +     put string;
18271 +     put "      termds=&scored_terms,configds=&scored_config,";
18272 +     put "      clusters=&scored_clust, ";
18273 +     put "      _scrout=work.&lastfilternode._out, svd_u=&scored_svd_u, svd_s=&scored_svd_s, prefix=&em_nodeid);";
18274 +     put 'data &em_score_output; set work._newexport;';
18275 +    run;
18276 +    %end;
18277 +   filename _tmscore;
18278 +
18279 +%end_cluster_score:
18280 +    filename temp;
18281 +    %if &tm_debug =0 %then %do;
18282 +    proc sql noprint;
18283 +        drop table _clusterms;
18284 +        drop table _filter_tmout;
18285 +        drop table _codeclusters;
18286 +    quit;
18287 +    %end;
18288 +
18289 +%mend score;
18290 +
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_GET_LAST_FILTER.SOURCE.
18291 +/* ****************************************************************
18292 + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
18293 + *
18294 + * Name:             tm_get_last_filter.sas
18295 + * Product:          SAS Text Miner
18296 + * Language:         Sas
18297 + * Script:
18298 + *
18299 + * Usage:
18300 + *
18301 + * Purpose:  macro to get the last filter node and the last parse node in the
18302 + *   diagram that corresponds to the current parse variable.  If there is no filter
18303 + *   node, the filter node is set to the last parse node.
18304 + *
18305 + *
18306 + *
18307 + * History:
18308 + * 14Aug09 Initial Coding
18309 + *
18310 + * Notes:
18311 + *    Returns an error in the following cases:
18312 + *      1. There is no preceding parse node.
18313 + *      2. There is no parse node with the current parse variable.
18314 + *
18315 + * Last Modified By:
18316 + * Last Modified On: Wed Sep 23 15:35:04 2009
18317 + *
18318 + * End
18319 + * ************************************************************** */
18320 +%macro tm_get_last_filter(eminfo=,em_lib=, em_variableset=);
18321 +   %let last_parse_node=;
18322 +   %let last_filter_node=;
18323 +   %let last_prescore_node=;
18324 +   %let server_err=;
18325 +   %let EMEXCEPTIONSTRING=;
18326 +   %let syscc=0;
18327 +
18328 +    /* verify that setinit for SAS Text Miner is currently active */
18329 +    %if %sysfunc(sysprod(PRODNUM107)) ne 1 %then %do;
18330 +       %let EMEXCEPTIONSTRING = EMTOOL.NOTMLICENSE;
18331 +        %goto end_macro;
18332 +        %end;
18333 +
18334 +
18335 +    * find last filter or text parse node if no filter node. ;
18336 +   %if %sysfunc(exist(&eminfo)) %then %do;
18337 +      proc sql noprint;
18338 +      select data into :last_parse_node from &eminfo where key="LastTextParsing";
18339 +         select data into :last_filter_node from &eminfo where key="LastTextFilter";
18340 +         select data into :last_prescore_node from &eminfo where kupcase(key)="PRESCORECODE";
18341 +      quit;
18342 +
18343 +   %end;
18344 +
18345 +   %if &last_parse_node= %then %do;
18346 +      %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGNODE;
18347 +      %goto end_macro;
18348 +      %end;
18349 +
18350 +   %else %if &last_filter_node= %then %let last_filter_node = %ktrim(&last_parse_node);
18351 +   %else %let last_filter_node = %ktrim(&last_filter_node);
18352 +   %let last_parse_node = %ktrim(&last_parse_node);
18353 +
18354 +   * Check to make sure parse variable is present and still exists;
18355 +   %let parsevar = ;
18356 +   proc sql noprint;
18357 +    select parsevar into :parsevar
18358 +    from &em_lib..&last_filter_node._tmconfig;
18359 +    quit;
18360 +
18361 +    *check for dropped parsevar on input dataset;
18362 +       %let parsevarOK= ;
18363 +       %let parsevarN=%kupcase(%ktrim(&parsevar));
18364 +       data _null_;
18365 +         set &em_variableset(where=(kupcase(NAME)="&parsevarN" and USE in('Y' 'D')));
18366 +         if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
18367 +         run;
18368 +       %if(&parsevarOK eq ) %then %do;
18369 +          %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGVAR;
18370 +          %goto end_macro;
18371 +          %end;
18372 +%end_macro:
18373 +
18374 +%mend tm_get_last_filter;
NOTE: %INCLUDE (level 1) ending.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TEXTCLUSTER4_VARIABLESET.
      WHERE (KUPCASE(NAME)='RESUME_STR') and USE in ('D', 'Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_DATA2CODE.SOURCE.
18375 +/* ****************************************************************
18376 + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
18377 + *
18378 + * Name:             tm_data2code.sas
18379 + * Product:          SAS Text Miner
18380 + * Language:         Sas
18381 + * Script:
18382 + *
18383 + * Usage:  %tm_data2code(data=, outdata=WORK.DATA);
18384 + *
18385 + * Purpose:          To do a data2code (like %em_data2code()) but allow the input data
18386 + *  to be view or data.
18387 + *
18388 + *    PARAMETERS:
18389 + *        DATA        = data set
18390 + *        OUTDATA     = out data set
18391 + *        OUTFILE     = file where to saved the code
18392 + *        APPEND      = append (Y/N)
18393 + * History:
18394 + * 11Jun09 Initial Coding
18395 + *
18396 + * Notes:
18397 + *
18398 + * Last Modified By:
18399 + * Last Modified On: Thu Jul 23 11:00:06 2009
18400 + *
18401 + * End
18402 + * ************************************************************** */
18403 +%macro tm_data2code(data=, outdata=WORK.DATA, outfile=, append=N);
18404 +%if &data eq %then %do;
18405 +   %put ERROR: Data set not defined;
18406 +   %end;
18407 +%else %do;
18408 +   %if (^%sysfunc(exist(&data)) and ^%sysfunc(exist(&data, view))) %then %do;
18409 +       %put ERROR: Data set does not exist;
18410 +       %end;
18411 +   %else %do;
18412 +      %global em_data em_outdata em_codefile em_append;
18413 +      %let em_data=&data;
18414 +      %let em_outdata=&outdata;
18415 +      %let em_codefile=&outfile;
18416 +      %let em_append=&append;
18417 +      proc display c=sashelp.emutil.data2code.scl; run;
18418 +      %end;
18419 +   %end;
18420 +%mend;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMEMCLUS.SOURCE.
18421 +
18422 + /*
18423 +
18424 +  Macro:   tmemclus.sas
18425 +  Purpose: Call proc emclus with given defaults and parameters.
18426 +  Syntax:  %tmemclus(data=, role=, clusters=, seed=,
18427 +                   outstat=, out=, vars=, cov=, iter=, secclus=,
18428 +                   seciter=, min=, method=, eps=, init=, print=,
18429 +                   p=, outliers=, decvar=, initstd=, dist=,
18430 +                   secstd=, nobs=, threads=);
18431 +  Required Parameters:  data=      The input data set.
18432 +                        role=      Train or score
18433 +                        clusters=  The number of primary clusters
18434 +
18435 +  Optional Parameters:  vars=      Variables to be used
18436 +                   cov=       Type of covariance matrix
18437 +                   iter=      Number of EM iterations
18438 +                   secclus    Number of secondary clusters
18439 +                   seciter    Number of k-means iterations
18440 +                   min=       Minimum number of obs in a cluster
18441 +                   method=    Standard or scaled
18442 +                   eps=       Stopping tolerance
18443 +                   init=      Random, Fastclus, or Emclus
18444 +                   print=     All, last, or none
18445 +                   p=
18446 +                   outliers=  Keep, cluster, or ignore
18447 +                   outstat=   Name of OUTSTAT data set
18448 +                   out=       Name of OUT data set
18449 +                   seed=      Name of SEED data set
18450 +                   decvar=    Proportion to decrease variances
18451 +                   initstd=   Initial standard deviation
18452 +                   dist=      Minimum distance between clusters
18453 +                   secstd=    Secondary cluster max std dev.
18454 +                   nobs=      Number of obs read in each iteration
18455 +  History:
18456 +  2001/01/16 - Bill Wheeler - Initial Coding.
18457 +  2001/11/29 - Bill Wheeler - Updated for version 8 or 9
18458 +*/
18459 +%MACRO tmemclus(data=, role=, clusters=, seed=,
18460 + outstat=, out=, vars=, cov=, iter=, secclus=,
18461 + seciter=, min=, method=, eps=, init=, print=,
18462 + p=, outliers=, decvar=, initstd=, dist=, secstd=, nobs=, threads=);
18463 +
18464 + %local saveout saveseed op1 op2 op3 op4;
18465 +
18466 + %LET saveout = &out;
18467 + %LET saveseed = &outstat;
18468 +
18469 + /* defaults */
18470 + %if &role= %then %let role = TRAIN;
18471 + %if &seed ne %then %let seed = seed=&seed;
18472 + %if &vars= %then %let var = ;
18473 + %else %let var = var &vars;
18474 + %if &cov ne %then %let cov = cov = &cov;
18475 + %if &iter ne %then %let iter = iter = &iter;
18476 + %if &init ne %then %let init = init = &init;
18477 + %if &eps ne  %then %let eps = eps = &eps;
18478 + %if &min ne %then %let min = min = &min;
18479 + %if &seciter ne %then %let seciter = seciter = &seciter;
18480 + %if &print ne %then %let print = print = &print;
18481 + %if &p ne %then %let p = p = &p;
18482 + %if &outliers ne %then %let outliers = outliers = &outliers;
18483 + %if &method ne %then %let method = method = &method;
18484 + %if &decvar ne %then %let decvar = decvar = &decvar;
18485 + %if &outstat ne %then %let outstat = outstat = &outstat;
18486 + %if &out ne %then %let out = out = &out;
18487 + %if (&threads >= 0)  %then %let threads = threads = &threads;
18488 + %else %let threads = ;
18489 +
18490 + %LET op1 = ;
18491 + %LET op2 = ;
18492 + %LET op3 = ;
18493 + %LET op4 = ;
18494 + %if ^(&initstd=) %then %let op1 = %str(initstd = &initstd);
18495 + %if ^(&dist=) %then %let op2 = %str(dist = &dist);
18496 + %if ^(&secstd=) %then %let op3 = %str(secstd = &secstd);
18497 + %if ^(&nobs=) %then %let op4 = %str(nobs = &nobs);
18498 +
18499 +
18500 + %IF &SYSVER < 9 %THEN %DO;
18501 +    %LET cov = ;
18502 +    %LET decvar = ;
18503 +    %LET outliers = ;
18504 +    %LET out = ;
18505 + %END;
18506 +
18507 +
18508 + %if %upcase(&role) = TRAIN %then
18509 + %do;
18510 +   proc emclus data = &data
18511 +   clusters = &clusters
18512 +   &seed
18513 +   &outstat
18514 +   &out
18515 +   &init
18516 +   &eps
18517 +   &method
18518 +   &secclus
18519 +   &min
18520 +   &print
18521 +   &outliers
18522 +   &iter
18523 +   &op1 &op2
18524 +   &op3 &op4
18525 +   &decvar
18526 +   &cov
18527 +   &threads
18528 +   ;
18529 +   &var;
18530 + %end;
18531 + %else
18532 +  %do;
18533 +    proc emclus data = &data
18534 +    role = score
18535 +    clusters = &clusters
18536 +    &seed
18537 +    &out
18538 +    &cov
18539 +    ;
18540 +    &var;
18541 +  %end;
18542 +
18543 + %IF &SYSVER < 9 and &saveout ^= %THEN %DO;
18544 +   proc emclus data = &data
18545 +   role = score
18546 +   clusters = &clusters
18547 +   seed = &saveseed
18548 +   &saveout
18549 +   ;
18550 +   &var;
18551 + %END;
18552 +
18553 +
18554 +%MEND tmemclus;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMPRED.SOURCE.
18555 +
18556 +/*
18557 +  Macro: tmpred(inds,outds,clusters,type=,ignore=,freqDS=)
18558 +
18559 +  Description: This macro will take output from
18560 +     emclus and generate predicted
18561 +      predicted clusters.
18562 +
18563 +  Parms: inds - input data set, produced by emclus.
18564 +   outds - data set with clusters created by this macro.
18565 +   clusters - number of clusters that should be on this data set
18566 +   type - valid values: 'max' or 'prob'.  Max will just take the
18567 +      cluster with the highest probability as the predicted cluster.
18568 +      In the case of a tie the first cluster with that value will
18569 +       selected.
18570 +      Prob will attempt to select multiple clusters based on
18571 +      how many clusters were requested.  That is if 3 clusters
18572 +      were requested, any cluster with prob>1/3 will be selected
18573 +      as the predicted cluster. THIS OPTION IS UNTESTED.
18574 +*/
18575 +
18576 +%macro tmpred(inds,outds,clusters,type=, ignore=0, freqDS=, compress=1);
18577 +
18578 +  %local _str newfreqDS _flag;
18579 +
18580 +  * set the optional arguments;
18581 +  %if &type= %then %let type=max;
18582 +  %if &ignore = 1 %then %let
18583 +    _str = if _CLUSTER_ = &clusters then _CLUSTER_ = .;
18584 +  %else %let _str = ;
18585 +  %if %str(&freqDS) ^= %str() %then %do;
18586 +   %let newfreqDS = &freqDS(keep=_c1-_c&clusters);
18587 +   %let _flag = 1;
18588 +  %end;
18589 +  %else %let _flag = 0;
18590 +
18591 +  %if &compress = 1 %then %let compress = compress=Y;
18592 +  %else %let compress = ;
18593 +
18594 +  data &outds(&compress drop=_c1-_c&clusters)
18595 +    %if &_flag = 1 %then %do;
18596 +    &newfreqDS
18597 +    %end;
18598 +    ;
18599 +    set &inds end=eof;
18600 +   * array for holding all probabilities;
18601 +    array _p prob1--prob&clusters;
18602 +    array _c(&clusters);
18603 +    retain _c 0;
18604 +   * get rid of working columns;
18605 +    drop _max_ _i /*prob1--prob&clusters*/ _WARN_;
18606 +    /* keep the largest probability and the cluster */
18607 +    _max_ = 0;
18608 +    do _i = 1 to &clusters;
18609 +      if _p(_i) > _max_ then do;
18610 +        _max_ = _p(_i);
18611 +        _CLUSTER_ = _i;
18612 +      end;
18613 +    end;
18614 +    if (_CLUSTER_ >= 1) and (_CLUSTER_ <= &clusters) then
18615 +      _c(_CLUSTER_) = _c(_CLUSTER_) + 1;
18616 +    else _CLUSTER_ = .;
18617 +    &_str;
18618 +    %if &_flag = 1 %then %do;
18619 +      if eof then do;
18620 +        output &freqDS;
18621 +                output &outDS;
18622 +          end;
18623 +          else output &outDS;
18624 +        %end;
18625 +
18626 +    run;
18627 +%mend tmpred;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMSORT.SOURCE.
18628 + /*
18629 +PROC SORT macro
18630 +
18631 +%tmsort(data=, out=, by=);
18632 +
18633 +data=      - name of input data set (outtree data set from PROC CLUSTER)
18634 +out=       - name of the output data set
18635 +by=        - by statement
18636 +options=   - proc options
18637 +*/
18638 +
18639 +%macro tmsort(data=, out=, by=, options=, threads=THREADS);
18640 +  %if %BQUOTE(&out) ^= %then %let out = out =  &out;
18641 +  %if &SYSVER < 9 %then %let threads = ;
18642 +
18643 +  proc sort data = %STR(&data) &threads &options
18644 +    &out;
18645 +    by &by;
18646 +  run;
18647 +
18648 +%mend tmsort;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TMC_DOC_SCORE.SOURCE.
18649 +/*****************************************************************************
18650 +*
18651 +* tmc_doc_score
18652 +*
18653 +*  import  =  the doc data set of _document_ ids's as input
18654 +*  export = the new doc dataset with the svd dimensions and cluster results as output
18655 +*  termds = the terms table as input
18656 +*  clusters = input dataset of clusters from train
18657 +*  emoutstat = input dataset of seeds from training
18658 +*  _scrout = input OUT data set to be scored, may be trimmed based on conent of termds
18659 +*  svd_u = input singular vectors
18660 +
18661 +
18662 +*  svd_s = input singular values
18663 +*  prefxi = variable prefix string identifier.
18664 +*
18665 +**************************************************************************************/
18666 +
18667 +%macro tmc_doc_score(import=,export=,termds=,export_out=,clusters=,emoutstat=,
18668 +                 _scrout=,svd_u=,svd_s=,configds=,prefix=, outclusters=,hierds=,
18669 +                filterterms=,filtertmout=, descterms=);
18670 +
18671 +   %if ^%symexist(tm_debug) %then %let tm_debug=0;
18672 +
18673 +    proc sql noprint;
18674 +        select cellwgt into: cellwgt
18675 +            from &configds;
18676 +        select clus_alg into: algorithm
18677 +            from &configds;
18678 +        select parseVar into :textvar
18679 +            from &configds;
18680 +        select count(*) into :nclus
18681 +            from &clusters;
18682 +        select count(*) into :svdkeep
18683 +            from &svd_s
18684 +            where keep=1;
18685 +    quit;
18686 +
18687 +    %let svdkeep=%left(&svdkeep);
18688 +    %let nclus=%left(&nclus);
18689 +    %let algorithm=%left(&algorithm);
18690 +    %Let cellwgt=%left(&cellwgt);
18691 +    data _import_ds;
18692 +        set &import;
18693 +    run;
18694 +
18695 +
18696 +    %tmsort(data=&termds(where=(keep='Y')), out=_terms(keep= KEY PARENT),
18697 +            by=KEY);
18698 +    %tmsort(data=&_scrout, out=&_scrout, by=_termnum_);
18699 +
18700 +    data _svdm1;
18701 +        merge _terms (where=(PARENT ne _termnum_) in=_b_ keep=KEY PARENT rename=(KEY=_TERMNUM_))
18702 +              &_scrout (in = _A_ rename=(_COUNT_=COUNT));
18703 +        by _termnum_;
18704 +        if _B_;
18705 +        if (_A_ and _B_ and (PARENT ne .))
18706 +          then _TERMNUM_ = PARENT;
18707 +
18708 +        keep _TERMNUM_ _DOCUMENT_ COUNT;
18709 +        if (_DOCUMENT_=.) or (COUNT=.) then delete;
18710 +    run;
18711 +
18712 +    proc sql ;
18713 +       create table _scrout as select distinct _TERMNUM_, _DOCUMENT_,
18714 +        sum(COUNT) as _COUNT_ from _svdm1
18715 +        group by _TERMNUM_, _DOCUMENT_;
18716 +
18717 +       drop table _svdm1;
18718 +       drop table _terms;
18719 +    quit;
18720 +
18721 +    %tmsort(data=&termds(where=(KEEP='Y' and PARENT=.)),
18722 +         out=_weights (rename=(KEY=INDEX WEIGHT=GWGT) keep=KEY WEIGHT),
18723 +         by=KEY, options=, threads=);
18724 +
18725 +
18726 +    %tmsort(data=_scrout, out=_scrout, by=_DOCUMENT_, options=, threads=);
18727 +      %let svdkeep=%left(&svdkeep);
18728 +      data &svd_u;
18729 +         set &svd_u(keep= index col1-col&svdkeep);
18730 +      run;
18731 +
18732 +      proc sql;
18733 +         create table  _inweights as
18734 +         select a.*
18735 +         from _weights a right join &svd_u b
18736 +         on a.index=b.index
18737 +         ;
18738 +       quit;
18739 +    %if %lowcase(&cellwgt) = bin %then %let cellwgt=BINARY;
18740 +    proc spsvd data=_scrout IN_U=&svd_u
18741 +        local = &cellwgt global = none in_global = _inweights ;
18742 +        row _TERMNUM_;
18743 +        col _DOCUMENT_;
18744 +        entry _COUNT_;
18745 +        output colpro=_COLPRO bigpro normcol prefix="&prefix._SVD";
18746 +    run;
18747 +    proc sort data=_import_ds;
18748 +    by _DOCUMENT_; run;
18749 +
18750 +    proc sort data=_colpro;
18751 +    by INDEX;
18752 +    run;
18753 +
18754 +    data &export;
18755 +        merge _import_ds (in=_C_ ) _colpro (rename=(INDEX=_DOCUMENT_));
18756 +        by _DOCUMENT_;
18757 +        if _C_;
18758 +    run;
18759 +
18760 +    data &export;
18761 +       set  &export;
18762 +       array svd_array &prefix._SVD1 - &prefix._SVD&svdkeep.;
18763 +       do i = 1 to dim(svd_array);
18764 +          if svd_array(i)=. then svd_array(i)=0;
18765 +       end;
18766 +       drop i;
18767 +    run;
18768 +
18769 +
18770 +    %tmsort(data=&export, out=, by=_document_, options=, threads=);
18771 +
18772 +    %if %left(&algorithm)=1.0 %then %do;
18773 +
18774 +        %tmemclus(data=&export,
18775 +            role=SCORE, clusters=&nclus,
18776 +            seed=&emoutstat,
18777 +            outstat=, out=&export,
18778 +            vars=%STR(&prefix._SVD1 - &prefix._SVD&SVDKEEP),
18779 +            cov=, iter=5, secclus=,
18780 +            seciter=, min=, method=, eps=.1, init=, print=,
18781 +            p=, outliers=, decvar=0,
18782 +            initstd=, dist=, secstd=, nobs=);
18783 +        run;
18784 +
18785 +        %tmpred(&export, &export, &nclus, type=, ignore=0,
18786 +                  freqDS=, compress=1);
18787 +
18788 +        data &export;
18789 +           set &export;
18790 +           rename prob1-prob&nClus = &prefix._prob1-&prefix._prob&nclus;
18791 +           rename _cluster_=&prefix._cluster_;
18792 +        run;
18793 +
18794 +        %if &outclusters ne %then %do;
18795 +              %let memloc = _tmmem;
18796 +              proc tmutil data=&_scrout key=&filterterms ;
18797 +                 control init memloc="&memloc" release;
18798 +                 output keeponly out=_outtmutil;
18799 +              run;
18800 +
18801 +              data _docdata;
18802 +                 set &export (rename=(&prefix._cluster_=cluster));
18803 +              run;
18804 +
18805 +              /* Recalculate desc terms */
18806 +              data _terms_;
18807 +               set &filterterms;
18808 +               by key _ispar;
18809 +               if first.key then
18810 +                output;
18811 +               else;
18812 +              run;
18813 +
18814 +              data _terms_;
18815 +               set _terms_;
18816 +               if _ispar='+' then
18817 +                  Term=_ispar || ' ' || term;
18818 +              run;
18819 +
18820 +             %tmsort(data=_outtmutil,
18821 +               out=_tmout_,
18822 +               by=_termnum_,
18823 +                  options=,
18824 +               threads=threads);
18825 +
18826 +
18827 +             data _tmout_;
18828 +               merge _tmout_ (in=_A_)
18829 +                  _terms_ (rename=(key=_termnum_ term=_term_) keep=key term );
18830 +               by _termnum_;
18831 +               if _A_;
18832 +             run;
18833 +
18834 +             data _docs_;
18835 +               set _docdata (rename=(cluster=_cluster_) keep=_document_ cluster);
18836 +               _SEGMNT_=_cluster_;
18837 +             run;
18838 +
18839 +             %tmterm1(DSN_TPARS=_tmout_,
18840 +              DSN_CLUS=_docs_,
18841 +              DSN_DESC=_desc_,
18842 +              N_DESC_TERMS=&descterms,
18843 +              N_CLUS=&nclus,
18844 +              top_freq=%eval(&descterms*2),
18845 +              key=);
18846 +
18847 +             %tmsort(data=_desc_,
18848 +               out=_desc_,
18849 +               by=_cluster_,
18850 +                  options=,
18851 +               threads=threads);
18852 +
18853 +             proc sql noprint;
18854 +               create table &outclusters as
18855 +                 select a.clus_desc, b.* from &outclusters b left join _desc_ a
18856 +                 on a._cluster_=b._cluster_;
18857 +             quit;
18858 +
18859 +       %end;
18860 +
18861 +    %end;
18862 +    %else %do;
18863 +
18864 +        data _clustermean;
18865 +            set &clusters(keep=_cluster_ _mean1-_mean&svdkeep. freq);
18866 +        run;
18867 +
18868 +        proc sql;
18869 +        create table _meandocs as
18870 +            select a.*, b.*
18871 +            from &export(keep=&prefix._SVD1 - &prefix._SVD&SVDKEEP _document_) a , _clustermean b;
18872 +        quit;
18873 +
18874 +
18875 +        proc sort data=_meandocs;
18876 +        by _document_;
18877 +        run;
18878 +
18879 +        %if (&syscc>4) %then %do;
18880 +            %let emexceptionstring=EMTOOL.INSUFFICIENTMEM;
18881 +            %goto end_tmc;
18882 +        %end;
18883 +
18884 +        %tmsort(data=_meandocs,out=,by=_document_);
18885 +
18886 +          data _docdata(drop=_mean1-_mean&svdkeep. j _CLUSTER_ _freq_ rename=(_cluster_=&prefix._cluster_ distance=&prefix._distance));
18887 +            set _meandocs;
18888 +            drop _minDist_ _dist_ j freq;
18889 +            label CLUSTER = 'Cluster ID';
18890 +            array _means(&svdkeep) _mean1-_mean&svdkeep.;
18891 +            array _cols(&svdkeep) &prefix._SVD1-&prefix._SVD&svdkeep.;
18892 +            by _document_;
18893 +            retain CLUSTER _mindist_;
18894 +            _dist_ = 0;
18895 +            /* innner product*/
18896 +            do j = 1 to &svdkeep;
18897 +                _dist_ = _dist_ + (_cols(j)-_means(j))*(_cols(j)-_means(j));
18898 +            end;
18899 +
18900 +            /* initialization*/
18901 +            if first._document_ then do;
18902 +                _minDist_ = _dist_;
18903 +                CLUSTER = _cluster_;
18904 +            end;
18905 +            /*optimization*/
18906 +            if (_dist_ < _minDist_) then do;
18907 +                _minDist_ = _dist_;
18908 +                CLUSTER = _cluster_;
18909 +            end;
18910 +            if last._document_ then do;
18911 +               output;
18912 +            end;
18913 +        run;
18914 +        proc sort data=_docdata;
18915 +           by _document_;
18916 +        proc sort data=&export;
18917 +           by _document_;
18918 +        run;
18919 +
18920 +        data &export;
18921 +           merge &export _docdata;
18922 +           by _document_;
18923 +           rename cluster=&prefix._cluster_;
18924 +        run;
18925 +    %end;
18926 +
18927 +    /* Reorder variables in exported data set */
18928 +    proc sql noprint;
18929 +        create table &export as
18930 +        select &textvar, &prefix._cluster_, *
18931 +        from &export;
18932 +    quit;
18933 +
18934 +
18935 +    %if &outclusters ne %then %do;
18936 +
18937 +        /* update freqencies in cluster table */
18938 +         proc freq data =_docdata ;
18939 +            tables cluster/out=_tempfreqtable;
18940 +         run;
18941 +
18942 +        proc sql noprint;
18943 +            create table &outclusters as
18944 +            select  a.*, b.count as freq, b.percent/100 as percent
18945 +            from &clusters (drop= freq percent _rmsstd_) a, _tempfreqtable b
18946 +           where a._cluster_=b.cluster;
18947 +
18948 +        quit;
18949 +
18950 +        %if %left(&algorithm)=2.0 %then %do;
18951 +
18952 +          proc sql noprint;
18953 +
18954 +             create table &hierds as select a.freq, b.*
18955 +                from &outclusters a right join &hierds b on a._cluster_=b._cluster_;
18956 +          quit;
18957 +
18958 +          /* Find descriptive terms for clusters & parents */
18959 +          filename temp catalog 'sashelp.emtxtext.tmgethierterms.source';
18960 +          %include temp;
18961 +          filename temp;
18962 +
18963 +          %tm_getHierTerms(hierds=&hierds,
18964 +                         docs=_docdata,
18965 +                         tmout=&filtertmout,
18966 +                         terms= &filterterms,
18967 +                         ndescterms=&descterms);
18968 +
18969 +          proc sql noprint;
18970 +             create table &outclusters as
18971 +                select a.clus_desc, b.* from &hierds a, &outclusters b
18972 +                where a._cluster_=b._cluster_;
18973 +
18974 +             update &hierds set freq=0 where clus_desc="" and _cluster_ ne 1;
18975 +          quit;
18976 +
18977 +          /* Add frequencies to ancestors */
18978 +          data _hd;
18979 +             set &hierds;
18980 +             cluster=_cluster_;
18981 +             drop _cluster_ parent;
18982 +          run;
18983 +
18984 +          %let empty=1;
18985 +
18986 +          %do %while (&empty);
18987 +
18988 +            proc sql noprint;
18989 +                update _hd set freq=
18990 +                    (select sum(freq) from &HIERDS
18991 +                    where parent=cluster)
18992 +                    where freq=. and cluster not in
18993 +                    (select parent from &hierds where freq=.);
18994 +                select count(*) into :empty from _hd
18995 +                    where freq=.;
18996 +                update &hierds set freq=(select freq from _hd where _cluster_=cluster);
18997 +            quit;
18998 +
18999 +          %end;
19000 +
19001 +          /* Set graphdesc variable for graph display */
19002 +          data &hierds(drop=plus pos sub);
19003 +            set &hierds;
19004 +            plus='';
19005 +            if substr(CLUS_DESC, 1, 1) = "+" then plus="+ ";
19006 +            if ktrim(clus_desc) ne "" then do;
19007 +              if(substr(CLUS_DESC, 1, 1)) = "'" then do;
19008 +                 pos = findc(CLUS_DESC, "'",2);
19009 +                 sub = substr(CLUS_DESC,1,pos);
19010 +              end;
19011 +              else sub = scan(CLUS_DESC, 1);
19012 +              graphdesc=_CLUSTER_ || ': ' || plus || sub;
19013 +            end;
19014 +            else graphdesc=_CLUSTER_;
19015 +          run;
19016 +        %end;
19017 +
19018 +         /*calculate residual for each doc */
19019 +
19020 +         proc sort data=_docdata (rename=(cluster=_cluster_));
19021 +            by _cluster_;
19022 +         run;
19023 +
19024 +         data _rmscalc;
19025 +            merge _docdata(in=inhere) &outclusters;
19026 +            array _means(&svdkeep) _mean1-_mean&svdkeep.;
19027 +            array _svds(&svdkeep) &prefixstring._SVD1 - &prefixstring._SVD&svdkeep.;
19028 +            by _cluster_;
19029 +            error=0;
19030 +            do i = 1 to &svdkeep;
19031 +               error +( (_svds{i}-_means{i}) * (_svds{i}-_means{i}));
19032 +            end;
19033 +
19034 +            drop i ;
19035 +         run;
19036 +
19037 +          /*calc standardized residual for clusters*/
19038 +         proc summary data=_rmscalc nway;
19039 +            class _cluster_;
19040 +            var error;
19041 +            output out=_meanerr mean=meane sum=sume;
19042 +         run;
19043 +
19044 +         data _rmsse;
19045 +            set _meanerr;
19046 +            /* original code divides by number of svd dims*/
19047 +            if _freq_ gt 1 then do;
19048 +              _rmsstd_=sqrt(sume/((_freq_-1)*(&svdkeep.)));
19049 +            end;
19050 +            else do;
19051 +              _rmsstd_=0;
19052 +            end;
19053 +            keep _cluster_  _rmsstd_;
19054 +         run;
19055 +
19056 +
19057 +         proc sql noprint;
19058 +           create table _clusstat2 as
19059 +           select a.*,b.*
19060 +           from &outclusters a left join _rmsse b
19061 +           on a._cluster_=b._cluster_;
19062 +
19063 +           create table &outclusters as
19064 +           select * from _clusstat2;
19065 +         quit;
19066 +
19067 +
19068 +    %end;
19069 +
19070 +
19071 +%end_tmc:
19072 +    %if &tm_debug =0  %then %do;
19073 +    proc sql noprint;
19074 +        drop table _weights;
19075 +        drop table _colpro;
19076 +        drop table _scrout;
19077 +        drop table _svdm1;
19078 +        drop table _inweights;
19079 +        drop table _clustermean;
19080 +        drop table _clusstat2;
19081 +        drop table _outtmutil;
19082 +        drop table _rmscalc;
19083 +        drop table _rmsse;
19084 +        drop table _meanerr;
19085 +        drop table _meandocs;
19086 +        drop table _import_ds;
19087 +        drop table _hd;
19088 +        drop table _terms_;
19089 +        drop table _docs_;
19090 +        drop table _tmout_;
19091 +        drop table _desc_;
19092 +        drop table _docdata;
19093 +    quit;
19094 +    %end;
19095 +
19096 +%mend tmc_doc_score;
19097 +
19098 +
19099 +
19100 +
19101 +
19102 +
19103 +
19104 +
19105 +
19106 +
19107 +
19108 +
19109 +
19110 +
19111 +
19112 +
19113 +
19114 +
19115 +
19116 +
19117 +
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMSVD.SOURCE.
19119 + /*
19121 +  Macro:     tmsvd.sas
19122 +  Purpose:  Call proc spsvd with given defaults and parameters.
19123 +  Syntax:   %tmsvd(in,k=,global=,local=,row=,col=,entry=,scaleOp=,normOp=,
19124 +            in_global=,in_u=,in_s=,in_v=,u=,s=,v=,wgt=,wordPro=,
19125 +           colPro=, p=, tol=, gwgt=, mink=, maxk=, res=, remote=, compact=,bigpro=0);
19127 +  Required Parameters:  in     The data= data set.
19128 +  Optional Parameters:  k= The number of dimensions to reduce to
19129 +                   global=  The global weight to use, defaults to IDF.
19130 +                   local=  The local weight to use, defaults to BINARY.
19131 +                   row=   Column in the input data set that represents
19132 +                          the matrix row,
19133 +                       defaults to _termnum_.
19134 +            col=   Column in the input data set that represents
19135 +                          the matrix column,
19136 +                         defaults to _document_.
19137 +            entry= Column in the input data set that represents the
19138 +                          value in the
19139 +                         given row,column cell.  Defaults to _count_.
19140 +             scaleOp= Scale options: scalerow scalecol scaleall
19141 +            normOp=  Normalization options: normrow normcol normall
19142 +            in_global= The gwgt= output data set from a prior spsvd run.
19143 +                   in_u=  The u= output from a prior spsvd run.
19144 +                   in_s=  The s= output from a prior spsvd run.
19145 +                   in_v=  The v= output from a prior spsvd run.
19146 +                   u=     matrix U data set
19147 +                   s=     matrix S data set
19148 +                   v=     matrix V data set
19149 +                  wgt=   weighted input matrix data set
19150 +                  wordPro= projections of rows of A onto columns of V
19151 +                  colPro=  projection of columns of A onto columns of U
19152 +                  p=   number of iterations
19153 +                  tol= convergence tolerance
19154 +                   gwgt= global weights data set
19155 +                  mink=
19156 +                  maxk=
19157 +                  res=
19158 +                  remote= name of file
19160 +  History:
19161 +  2001/01/16 - Kevin Daly - Initial coding.
19162 +  2001/01/19 - Kevin Daly - Fixed so that when global=NONE and local=NONE,
19163 +             no gwgt data set
19164 +               is requested.  This was causing an error and the proc
19165 +              would terminate.
19166 +  2001/02/21 - Bill Wheeler - Allowd all options to be specified
19167 +  2001/05/14 - Bill Wheeler - Added version 9 options min_k, max_k, resolution
19168 +  2001/08/14 - Bill Wheeler - Added remote option
19169 +  2001/11/29 - Bill Wheeler - Updated for version 8 or 9
19170 +*/
19172 +%macro tmsvd(in,k=,global=,local=,row=,col=,entry=,scaleOp=,normOp=,
19173 +             in_global=, in_u=, in_s=, in_v=, u=, s=, v=,
19174 +             wgt=, wordPro=, colPro=, p=, tol=, gwgt=, mink=, maxk=, res=,
19175 +             remote=, compact=,bigpro= );
19177 +  %put;
19178 +  /* Defaults */
19179 +  %if &k ^= %then %let k = k = &k;
19180 +  %if &global ^= %then %let global = global = &global;
19181 +  %if %lowcase(&local) = bin %then %let local=BINARY;
19182 +  %if &local ^= %then %let local=local=&local;
19183 +  %if &row= %then %let row=_termnum_;
19184 +  %if &col= %then %let col=_document_;
19185 +  %if &entry= %then %let entry=_count_;
19186 +  %if &scaleOp ^= %then %let scaleOp = scaledoc;
19187 +  %if &normOp ^= %then %let normOp = normdoc;
19188 +  %if &compact ^= %then %let compact = compact;
19189 +  %else %let compact = ;
19191 +  %if &in_global ^= %then %let in_global = in_global=&in_global;
19192 +  %if &in_u ^= %then %let in_u = in_u=&in_u;
19193 +  %if &in_s ^= %then %let in_s = in_s=&in_s;
19194 +  %if &in_v ^= %then %let in_v = in_v=&in_v;
19195 +  %if ((&p ^= ) and (&p ^= .)) %then %let p = p=&p;
19196 +  %else %let p = ;
19197 +  %if ((&tol ^= ) and (&tol ^= .)) %then %let tol = tol=&tol;
19198 +  %else %let tol = ;
19200 +  %IF &SYSVER < 9 %THEN %DO;
19201 +    %IF &k = %THEN %DO;
19202 +      %IF &maxk ^= %THEN %LET k = k = &maxk;
19203 +      %ELSE %LET k = k = 100;
19204 +    %END;
19205 +    %LET mink = ;
19206 +    %LET maxk = ;
19207 +    %LET res = ;
19208 +    %LET remote = ;
19209 +    %LET compact = ;
19210 +  %END;
19213 +  %if &colPro ^= %then %let colPro = COLPRO=&colPro;
19214 +  %if &gwgt ^= %then %let gwgt = GWGT=&gwgt;
19215 +  %if &s ^= %then %let s = S=&s;
19216 +  %if &u ^= %then %let u = U=&u;
19217 +  %if &v ^= %then %let v = V=&v;
19218 +  %if &wordPro ^= %then %let wordPro = WORDPRO=&wordPro;
19219 +  %if &wgt ^= %then %let wgt = WGT=&wgt;
19220 +  %if (&mink ^=  ) and (&mink ^= .) %then %let mink = min_k = &mink;
19221 +  %else %let mink = ;
19222 +  %if &maxk ^= %then %let maxk = max_k = &maxk;
19223 +  %if &res ^= %then %let res = res = &res;
19224 +  proc sort data=&in; by &col;
19225 +  /* Run the proc */
19226 +  proc spsvd data=&in
19227 +      &mink
19228 +      &maxk
19229 +      &res
19230 +      &k &compact
19231 +    &local &global &in_global
19232 +    &in_u &in_s &in_v &p &tol;
19233 +    row &row; col &col; entry &entry;
19234 +      output &colPro &gwgt &normOp &scaleOp &s &u &v
19235 +           &wordPro &wgt &bigpro;
19236 +    &remote;
19237 +  run;
19239 +%mend tmsvd;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMFAST.SOURCE.
19240 + /*
19241 +
19242 +  Macro:   tmfast.sas
19243 +  Purpose: Call proc fastclus with given defaults and parameters.
19244 +  Syntax:  %tmfast(data=, clusters=, outstat=, vars=);
19245 +
19246 +  Required Parameters:  data=      The input data set.
19247 +                        clusters=  The maximum number of clusters
19248 +
19249 +  Optional Parameters:  vars=      Variables to be used
19250 +                        outstat=   The name of the OUTSTAT data set
19251 +                        outseed=   The name of the OUTSEED data set
19252 +
19253 +  Either outstat or outseed mut be given, but not both.
19254 +  History:
19255 +  2001/01/16 - Bill Wheeler - Initial Coding.
19256 +
19257 +*/
19258 +%MACRO tmfast(data=, clusters=, outstat=, outseed=,
19259 +                 id=, out=, vars=);
19260 + /* defaults */
19261 + %if (&id ne ) %then %let id = id &id;
19262 + %if (&out ne ) %then %let out = out = &out;
19263 + %if (&vars ne ) %then %let var = var &vars;
19264 + %else %let var = ;
19265 +
19266 + %if &outseed= %then
19267 + %do;
19268 +   proc fastclus data = &data
19269 +   maxclusters = &clusters noprint
19270 +   outstat = &outstat &out;
19271 +   &var;
19272 +   &id;
19273 + %end;
19274 + %else
19275 + %do;
19276 +   proc fastclus data = &data
19277 +   maxclusters = &clusters noprint
19278 +   outseed = &outseed &out;
19279 +   &var;
19280 +   &id;
19281 + %end;
19282 +%MEND tmfast;
NOTE: %INCLUDE (level 1) ending.
NOTE: Table WORK._CLUSTERMS created, with 16666 rows and 9 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 218546 observations read from the data set EMWS3.TEXTFILTER4_TMOUT.
NOTE: The data set WORK._FILTER_TMOUT has 218546 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 674 observations read from the data set EMWS3.TEXTPARSING_TRAIN.
NOTE: There were 674 observations read from the data set EMWS3.TEXTFILTER4_DOC_IDS.
NOTE: There were 674 observations read from the data set EMWS3.TEXTFILTER4_TRAIN.
NOTE: The data set WORK._IMPORT_DS has 674 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 16666 observations read from the data set WORK._CLUSTERMS.
      WHERE keep='Y';
NOTE: The data set WORK._TERMS has 16666 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 218546 observations read from the data set WORK._FILTER_TMOUT.
NOTE: The data set WORK._FILTER_TMOUT has 218546 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 13209 observations read from the data set WORK._TERMS.
      WHERE PARENT not = _termnum_;
NOTE: There were 218546 observations read from the data set WORK._FILTER_TMOUT.
NOTE: The data set WORK._SVDM1 has 218546 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
NOTE: Table WORK._SCROUT created, with 205198 rows and 3 columns.
 
NOTE: Table WORK._SVDM1 has been dropped.
NOTE: Table WORK._TERMS has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.10 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 8502 observations read from the data set WORK._CLUSTERMS.
      WHERE (KEEP='Y') and (PARENT=.);
NOTE: The data set WORK._WEIGHTS has 8502 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 205198 observations read from the data set WORK._SCROUT.
NOTE: The data set WORK._SCROUT has 205198 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8502 observations read from the data set EMWS3.TEXTCLUSTER4_SVD_U.
NOTE: The data set EMWS3.TEXTCLUSTER4_SVD_U has 8502 observations and 69 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.00 seconds
 
 
NOTE: Table WORK._INWEIGHTS created, with 8502 rows and 2 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.14 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 205198 observations read from the data set WORK._SCROUT.
NOTE: There were 8502 observations read from the data set EMWS3.TEXTCLUSTER4_SVD_U.
NOTE: There were 8502 observations read from the data set WORK._INWEIGHTS.
NOTE: The data set WORK._COLPRO has 673 observations and 69 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.32 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 674 observations read from the data set WORK._IMPORT_DS.
NOTE: The data set WORK._IMPORT_DS has 674 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 673 observations read from the data set WORK._COLPRO.
NOTE: The data set WORK._COLPRO has 673 observations and 69 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 674 observations read from the data set WORK._IMPORT_DS.
NOTE: There were 673 observations read from the data set WORK._COLPRO.
NOTE: The data set EMWS3.TEXTCLUSTER4_TRAIN has 674 observations and 73 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER4_TRAIN.
NOTE: The data set EMWS3.TEXTCLUSTER4_TRAIN has 674 observations and 73 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER4_TRAIN.
NOTE: The data set EMWS3.TEXTCLUSTER4_TRAIN has 674 observations and 73 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER4_TRAIN.
NOTE: There were 11 observations read from the data set EMWS3.TEXTCLUSTER4_EMOUTSTAT.
NOTE: The data set EMWS3.TEXTCLUSTER4_TRAIN has 674 observations and 79 variables.
NOTE: PROCEDURE EMCLUS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER4_TRAIN.
NOTE: The data set EMWS3.TEXTCLUSTER4_TRAIN has 674 observations and 79 variables.
NOTE: Compressing data set EMWS3.TEXTCLUSTER4_TRAIN decreased size by 66.67 percent.
      Compressed is 19 pages; un-compressed would require 57 pages.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER4_TRAIN.
NOTE: The data set EMWS3.TEXTCLUSTER4_TRAIN has 674 observations and 79 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 218546 observations read from the data set WORK._FILTER_TMOUT.
NOTE: There were 16666 observations read from the data set EMWS3.TEXTFILTER4_TERMS_DATA.
      WHERE KEEP='Y';
NOTE: There were 73331 observations read from the data set EMWS3.TEXTFILTER4_TERM_STRINGS.
NOTE: The data set WORK._OUTTMUTIL has 205198 observations and 3 variables.
NOTE: PROCEDURE TMUTIL used (Total process time):
      real time           0.17 seconds
      cpu time            0.09 seconds
 
 
 
NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER4_TRAIN.
NOTE: The data set WORK._DOCDATA has 674 observations and 79 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 16666 observations read from the data set EMWS3.TEXTFILTER4_TERMS_DATA.
      WHERE KEEP='Y';
NOTE: There were 73331 observations read from the data set EMWS3.TEXTFILTER4_TERM_STRINGS.
NOTE: There were 16666 observations read from the data set EMWS3.TEXTFILTER4_TERMS.
NOTE: The data set WORK._TERMS_ has 13209 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13209 observations read from the data set WORK._TERMS_.
NOTE: The data set WORK._TERMS_ has 13209 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 205198 observations read from the data set WORK._OUTTMUTIL.
NOTE: The data set WORK._TMOUT_ has 205198 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 205198 observations read from the data set WORK._TMOUT_.
NOTE: There were 13209 observations read from the data set WORK._TERMS_.
NOTE: The data set WORK._TMOUT_ has 205198 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 674 observations read from the data set WORK._DOCDATA.
NOTE: The data set WORK._DOCS_ has 674 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: SQL view WORK._CMB has been defined.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 205198 observations read from the data set WORK._TMOUT_.
NOTE: There were 674 observations read from the data set WORK._DOCS_.
NOTE: There were 205198 observations read from the data set WORK._CMB.
NOTE: The data set WORK._TFREQ has 25498 observations and 5 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.10 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 205198 observations read from the data set WORK._TMOUT_.
NOTE: There were 674 observations read from the data set WORK._DOCS_.
NOTE: There were 205198 observations read from the data set WORK._CMB.
NOTE: The data set WORK._SUM has 6 observations and 4 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK._SUM.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Table WORK._SUM has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 25498 observations read from the data set WORK._TFREQ.
NOTE: The data set WORK._TFREQ has 25498 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 25498 observations read from the data set WORK._TFREQ.
NOTE: The data set WORK._UNQT has 150 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 150 observations read from the data set WORK._UNQT.
NOTE: 78 observations with duplicate key values were deleted.
NOTE: The data set WORK._UNQT has 72 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Table WORK._CLCDF created, with 356 rows and 3 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Table WORK._UNQT has been dropped.
NOTE: Table WORK._TFREQ has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 356 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDF has 72 observations and 7 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 72 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDF has 72 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 72 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDFTR has 356 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Table WORK._CLCDF has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 356 observations read from the data set WORK._CLCDFTR.
NOTE: The data set WORK._CLCDFTR has 356 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 356 observations read from the data set WORK._CLCDFTR.
NOTE: The data set WORK._DESC_ has 5 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Table WORK._CLCDFTR has been dropped.
NOTE: View WORK._CMB has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK._DESC_.
NOTE: The data set WORK._DESC_ has 5 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: Variable clus_desc already exists on file EMWS3.TEXTCLUSTER4_CLUSTERS.
NOTE: Table EMWS3.TEXTCLUSTER4_CLUSTERS created, with 5 rows and 73 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: Variable Resume_str already exists on file EMWS3.TEXTCLUSTER4_TRAIN.
WARNING: Variable TextCluster4_cluster_ already exists on file EMWS3.TEXTCLUSTER4_TRAIN.
NOTE: Table EMWS3.TEXTCLUSTER4_TRAIN created, with 674 rows and 79 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 674 observations read from the data set WORK._DOCDATA.
NOTE: The data set WORK._TEMPFREQTABLE has 5 observations and 3 variables.
NOTE: The PROCEDURE FREQ printed page 2.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
NOTE: Table EMWS3.TEXTCLUSTER4_CLUSTERS created, with 5 rows and 72 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 674 observations read from the data set WORK._DOCDATA.
NOTE: The data set WORK._DOCDATA has 674 observations and 79 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 674 observations read from the data set WORK._DOCDATA.
NOTE: There were 5 observations read from the data set EMWS3.TEXTCLUSTER4_CLUSTERS.
NOTE: The data set WORK._RMSCALC has 674 observations and 151 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 674 observations read from the data set WORK._RMSCALC.
NOTE: The data set WORK._MEANERR has 5 observations and 5 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK._MEANERR.
NOTE: The data set WORK._RMSSE has 5 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
WARNING: Variable _cluster_ already exists on file WORK._CLUSSTAT2.
NOTE: Table WORK._CLUSSTAT2 created, with 5 rows and 73 columns.
 
NOTE: Table EMWS3.TEXTCLUSTER4_CLUSTERS created, with 5 rows and 73 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 405 observations read from the data set EMWS3.TEXTFILTER4_VALIDATE.
NOTE: The data set WORK._IMPORT_DS has 405 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 16666 observations read from the data set WORK._CLUSTERMS.
      WHERE keep='Y';
NOTE: The data set WORK._TERMS has 16666 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 121692 observations read from the data set EMWS3.TEXTFILTER4_VALIDOUT.
NOTE: The data set EMWS3.TEXTFILTER4_VALIDOUT has 121692 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13209 observations read from the data set WORK._TERMS.
      WHERE PARENT not = _termnum_;
NOTE: There were 121692 observations read from the data set EMWS3.TEXTFILTER4_VALIDOUT.
NOTE: The data set WORK._SVDM1 has 121692 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: Table WORK._SCROUT created, with 121692 rows and 3 columns.
 
NOTE: Table WORK._SVDM1 has been dropped.
NOTE: Table WORK._TERMS has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 8502 observations read from the data set WORK._CLUSTERMS.
      WHERE (KEEP='Y') and (PARENT=.);
NOTE: The data set WORK._WEIGHTS has 8502 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 121692 observations read from the data set WORK._SCROUT.
NOTE: The data set WORK._SCROUT has 121692 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 8502 observations read from the data set EMWS3.TEXTCLUSTER4_SVD_U.
NOTE: The data set EMWS3.TEXTCLUSTER4_SVD_U has 8502 observations and 69 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Table WORK._INWEIGHTS created, with 8502 rows and 2 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 121692 observations read from the data set WORK._SCROUT.
NOTE: There were 8502 observations read from the data set EMWS3.TEXTCLUSTER4_SVD_U.
NOTE: There were 8502 observations read from the data set WORK._INWEIGHTS.
NOTE: The data set WORK._COLPRO has 405 observations and 69 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 405 observations read from the data set WORK._IMPORT_DS.
NOTE: The data set WORK._IMPORT_DS has 405 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 405 observations read from the data set WORK._COLPRO.
NOTE: The data set WORK._COLPRO has 405 observations and 69 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 405 observations read from the data set WORK._IMPORT_DS.
NOTE: There were 405 observations read from the data set WORK._COLPRO.
NOTE: The data set EMWS3.TEXTCLUSTER4_VALIDATE has 405 observations and 73 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 405 observations read from the data set EMWS3.TEXTCLUSTER4_VALIDATE.
NOTE: The data set EMWS3.TEXTCLUSTER4_VALIDATE has 405 observations and 73 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 405 observations read from the data set EMWS3.TEXTCLUSTER4_VALIDATE.
NOTE: The data set EMWS3.TEXTCLUSTER4_VALIDATE has 405 observations and 73 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 405 observations read from the data set EMWS3.TEXTCLUSTER4_VALIDATE.
NOTE: There were 11 observations read from the data set EMWS3.TEXTCLUSTER4_EMOUTSTAT.
NOTE: The data set EMWS3.TEXTCLUSTER4_VALIDATE has 405 observations and 79 variables.
NOTE: PROCEDURE EMCLUS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 405 observations read from the data set EMWS3.TEXTCLUSTER4_VALIDATE.
NOTE: The data set EMWS3.TEXTCLUSTER4_VALIDATE has 405 observations and 79 variables.
NOTE: Compressing data set EMWS3.TEXTCLUSTER4_VALIDATE decreased size by 64.71 percent.
      Compressed is 12 pages; un-compressed would require 34 pages.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 405 observations read from the data set EMWS3.TEXTCLUSTER4_VALIDATE.
NOTE: The data set EMWS3.TEXTCLUSTER4_VALIDATE has 405 observations and 79 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: Variable Resume_str already exists on file EMWS3.TEXTCLUSTER4_VALIDATE.
WARNING: Variable TextCluster4_cluster_ already exists on file EMWS3.TEXTCLUSTER4_VALIDATE.
NOTE: Table EMWS3.TEXTCLUSTER4_VALIDATE created, with 405 rows and 79 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 274 observations read from the data set EMWS3.TEXTFILTER4_TEST.
NOTE: The data set WORK._IMPORT_DS has 274 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 16666 observations read from the data set WORK._CLUSTERMS.
      WHERE keep='Y';
NOTE: The data set WORK._TERMS has 16666 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 80503 observations read from the data set EMWS3.TEXTFILTER4_TESTOUT.
NOTE: The data set EMWS3.TEXTFILTER4_TESTOUT has 80503 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13209 observations read from the data set WORK._TERMS.
      WHERE PARENT not = _termnum_;
NOTE: There were 80503 observations read from the data set EMWS3.TEXTFILTER4_TESTOUT.
NOTE: The data set WORK._SVDM1 has 80503 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
NOTE: Table WORK._SCROUT created, with 80503 rows and 3 columns.
 
NOTE: Table WORK._SVDM1 has been dropped.
NOTE: Table WORK._TERMS has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 8502 observations read from the data set WORK._CLUSTERMS.
      WHERE (KEEP='Y') and (PARENT=.);
NOTE: The data set WORK._WEIGHTS has 8502 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 80503 observations read from the data set WORK._SCROUT.
NOTE: The data set WORK._SCROUT has 80503 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8502 observations read from the data set EMWS3.TEXTCLUSTER4_SVD_U.
NOTE: The data set EMWS3.TEXTCLUSTER4_SVD_U has 8502 observations and 69 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Table WORK._INWEIGHTS created, with 8502 rows and 2 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 80503 observations read from the data set WORK._SCROUT.
NOTE: There were 8502 observations read from the data set EMWS3.TEXTCLUSTER4_SVD_U.
NOTE: There were 8502 observations read from the data set WORK._INWEIGHTS.
NOTE: The data set WORK._COLPRO has 274 observations and 69 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 274 observations read from the data set WORK._IMPORT_DS.
NOTE: The data set WORK._IMPORT_DS has 274 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 274 observations read from the data set WORK._COLPRO.
NOTE: The data set WORK._COLPRO has 274 observations and 69 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 274 observations read from the data set WORK._IMPORT_DS.
NOTE: There were 274 observations read from the data set WORK._COLPRO.
NOTE: The data set EMWS3.TEXTCLUSTER4_TEST has 274 observations and 73 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 274 observations read from the data set EMWS3.TEXTCLUSTER4_TEST.
NOTE: The data set EMWS3.TEXTCLUSTER4_TEST has 274 observations and 73 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 274 observations read from the data set EMWS3.TEXTCLUSTER4_TEST.
NOTE: The data set EMWS3.TEXTCLUSTER4_TEST has 274 observations and 73 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 274 observations read from the data set EMWS3.TEXTCLUSTER4_TEST.
NOTE: There were 11 observations read from the data set EMWS3.TEXTCLUSTER4_EMOUTSTAT.
NOTE: The data set EMWS3.TEXTCLUSTER4_TEST has 274 observations and 79 variables.
NOTE: PROCEDURE EMCLUS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 274 observations read from the data set EMWS3.TEXTCLUSTER4_TEST.
NOTE: The data set EMWS3.TEXTCLUSTER4_TEST has 274 observations and 79 variables.
NOTE: Compressing data set EMWS3.TEXTCLUSTER4_TEST decreased size by 65.22 percent.
      Compressed is 8 pages; un-compressed would require 23 pages.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 274 observations read from the data set EMWS3.TEXTCLUSTER4_TEST.
NOTE: The data set EMWS3.TEXTCLUSTER4_TEST has 274 observations and 79 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: Variable Resume_str already exists on file EMWS3.TEXTCLUSTER4_TEST.
WARNING: Variable TextCluster4_cluster_ already exists on file EMWS3.TEXTCLUSTER4_TEST.
NOTE: Table EMWS3.TEXTCLUSTER4_TEST created, with 274 rows and 79 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PRE is:
      Filename=C:\Users\lahar\OneDrive\Desktop\Data Mining\Resume\Workspaces\EMWS3\TextCluster4\PRESCORECODE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=23Nov2023:22:12:55,
      Create Time=23Nov2023:22:12:55
 
NOTE: 13 records were written to the file PRE.
      The minimum record length was 14.
      The maximum record length was 62.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PRE is:
      Filename=C:\Users\lahar\OneDrive\Desktop\Data Mining\Resume\Workspaces\EMWS3\TextCluster4\PRESCORECODE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=452,
      Last Modified=23Nov2023:22:12:55,
      Create Time=23Nov2023:22:12:55
 
NOTE: 23 records were written to the file PRE.
      The minimum record length was 1.
      The maximum record length was 86.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref TMPRE has been deassigned.
 
NOTE: There were 5 observations read from the data set EMWS3.TEXTCLUSTER4_CLUSTERS.
NOTE: The data set WORK._CODECLUSTERS has 5 observations and 72 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Libref TERMLOC refers to the same physical library as EMWS3.
NOTE: Libref TERMLOC was successfully assigned as follows:
      Engine:        V9
      Physical Name: C:\Users\lahar\OneDrive\Desktop\Data Mining\Resume\Workspaces\EMWS3
 
NOTE: The file _TMSCORE is:
      Filename=C:\Users\lahar\OneDrive\Desktop\Data Mining\Resume\Workspaces\EMWS3\TextCluster4\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=23Nov2023:22:12:55,
      Create Time=23Nov2023:22:12:55
 
NOTE: 5 records were written to the file _TMSCORE.
      The minimum record length was 43.
      The maximum record length was 119.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref _TMSCORE has been deassigned.
NOTE: Fileref TEMP has been deassigned.
19283  *------------------------------------------------------------*;
19284  * End SCORE: TextCluster4;
19285  *------------------------------------------------------------*;
 
19287  *------------------------------------------------------------*;
19288  * TextCluster4: Computing metadata for TRAIN data;
19289  *------------------------------------------------------------*;
 
19999  proc sort data = EMWS3.TextFilter4_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
20000  by TARGET KEY;
20001  run;
 
NOTE: There were 5 observations read from the data set EMWS3.TEXTFILTER4_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 5 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20002  proc sort data = EMWS3.TextCluster4_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
20003  by TARGET KEY;
20004  run;
 
NOTE: There were 4 observations read from the data set EMWS3.TEXTCLUSTER4_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20005  data EMWS3.TextCluster4_EMINFO;
20006  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
20007  by TARGET KEY;
20008  run;
 
NOTE: There were 5 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 4 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS3.TEXTCLUSTER4_EMINFO has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20009  proc datasets lib=work nolist;
20010  delete TEMP_INFO SORTEDEMINFO;
20011  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
20012  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
*------------------------------------------------------------*
* Report Log
Date:                November 23, 2023
Time:                22:12:56
*------------------------------------------------------------*
20036  %let EMEXCEPTIONSTRING=;
20037  *------------------------------------------------------------*;
20038  * REPORT: TextCluster4;
20039  *------------------------------------------------------------*;
20040  %let EM_ACTION = REPORT;
20041  %let syscc = 0;
20042  %macro main();
20043
20044     %if %upcase(&EM_ACTION) eq CREATE %then %do;
20045        filename temp catalog 'sashelp.emtxtext.cluster_create.source';
20046        %include temp;
20047        %create();
20048     %end;
20049     %if %upcase(&EM_ACTION) eq TRAIN %then %do;
20050        filename temp catalog 'sashelp.emtxtext.cluster_train.source';
20051        %include temp;
20052        %train();
20053     %end;
20054     %if %upcase(&EM_ACTION) eq REPORT %then %do;
20055        filename temp catalog 'sashelp.emtxtext.cluster_report.source';
20056        %include temp;
20057        %report();
20058     %end;
20059     %if %upcase(&EM_ACTION) eq SCORE %then %do;
20060        filename temp catalog 'sashelp.emtxtext.cluster_score.source';
20061        %include temp;
20062        %score();
20063     %end;
20064  %mend main;
20065
20066  %main();
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.CLUSTER_REPORT.SOURCE.
20067 +%macro report();
20068 +
20069 +    %EM_GETNAME(KEY=GRAPH_TABLE, TYPE=DATA);
20070 +    %EM_GETNAME(KEY=clusters, TYPE=DATA);
20071 +    %EM_GETNAME(KEY=prescorecode, type=file, extension=sas);
20072 +    %em_getname(key=svd_s, type=data);
20073 +    %em_getname(key=hierds, type=data);
20074 +
20075 +    proc sql noprint;
20076 +        select count(*) into :svdkeep
20077 +            from &em_user_svd_s
20078 +            where keep=1;
20079 +        select count(*) into :nclus
20080 +            from &em_user_clusters;
20081 +    quit;
20082 +    %let svdkeep=%left(&svdkeep);
20083 +    %let nclus=%left(&nclus);
20084 +    %let clusterid=%sysfunc(sasmsg(sashelp.tmine, rpt_text_clusterid_vlabel, NOQUOTE));
20085 +    %let frequency=%sysfunc(sasmsg(sashelp.tmine, rpt_text_frequency_vlabel, NOQUOTE));
20086 +    %let percentage=%sysfunc(sasmsg(sashelp.tmine, rpt_text_percentage_vlabel, NOQUOTE));
20087 +    %let descterms=%sysfunc(sasmsg(sashelp.tmine, rpt_text_descterms_vlabel, NOQUOTE));
20088 +    %let rmsstd=%sysfunc(sasmsg(sashelp.tmine, rpt_text_rmsstd_vlabel, NOQUOTE));
20089 +    %let coordinate=%sysfunc(sasmsg(sashelp.tmine, rpt_text_coordinate_vlabel, NOQUOTE));
20090 +    %let parent=%sysfunc(sasmsg(sashelp.tmine, rpt_text_parent_vlabel, NOQUOTE));
20091 +    %let hierlevel=%sysfunc(sasmsg(sashelp.tmine, rpt_text_hierlevel_vlabel, NOQUOTE));
20092 +    %let graphdesc=%sysfunc(sasmsg(sashelp.tmine, rpt_text_graphdesc_vlabel, NOQUOTE));
20093 +    %let descshort=%sysfunc(sasmsg(sashelp.tmine, rpt_text_descshort_vlabel, NOQUOTE));
20094 +
20095 +    data &em_user_graph_table;
20096 +        set &em_user_clusters;
20097 +        label _cluster_="&clusterid"
20098 +              clus_desc="&DescTerms"
20099 +              freq="&Frequency"
20100 +              percent="&Percentage"
20101 +              _rmsstd_="&rmsstd"
20102 +              %do i=1 %to &svdkeep;
20103 +                _mean&i="&Coordinate &i"
20104 +              %end;
20105 +              ;
20106 +        format percent percent10.;
20107 +        desc_short = clus_desc;
20108 +        if COUNTW(clus_desc, ' ') > 5 then do;
20109 +            call scan(clus_desc, 6, position, len, ' ');
20110 +            desc_short=substr(clus_desc, 1, position-1) || '...';
20111 +            drop position len;
20112 +            label desc_short="&descshort";
20113 +        end;
20114 +    run;
20115 +
20116 +    proc sql noprint;
20117 +        create table &em_user_graph_table as
20118 +        select _cluster_, clus_desc, freq, percent, *
20119 +        from &em_user_graph_table;
20120 +    quit;
20121 +
20122 +    %let block = %sysfunc(sasmsg(sashelp.tmine, rpt_text_clusters_title, NOQUOTE));
20123 +
20124 +    %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_prescore_title, NOQUOTE));
20125 +    %EM_REPORT(KEY=PRESCORECODE, VIEWTYPE=SOURCE, DESCRIPTION=%nrbquote(&desc),
20126 +              BLOCK=Scoring, AUTODISPLAY=N);
20127 +
20128 +    %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_clusfreqbyrms_title, NOQUOTE));
20129 +    %EM_REPORT(KEY=GRAPH_TABLE, VIEWTYPE=SCATTER, X=FREQ, Y=_RMSSTD_, DESCRIPTION=%nrbquote(&desc),
20130 +            BLOCK=%nrbquote(&block), AUTODISPLAY=Y, TIP=%if &em_property_nDescTerms > 5 %then desc_short; %else clus_desc;);
20131 +
20132 +    %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_clusters_title, NOQUOTE));
20133 +    %EM_REPORT(KEY=GRAPH_TABLE, VIEWTYPE=DATA, DESCRIPTION=%nrbquote(&desc), BLOCK=%nrbquote(&block), AUTODISPLAY=Y);
20134 +
20135 +    %if &nclus > 2 %then %do;
20136 +        data work.graph_table(drop=_cluster_);
20137 +            set &em_user_graph_table;
20138 +            cluster=put(_cluster_,best12.);
20139 +        run;
20140 +        proc distance data=work.graph_table out=work.graph_table method=EUCLID nostd;
20141 +            var RATIO(_mean1-_mean&svdkeep);
20142 +            id cluster;
20143 +        run;
20144 +        proc mds data=work.graph_table out=work.graph_table
20145 +            level=ratio dimension=2 noprint;
20146 +        run;
20147 +        data work.graph_table;
20148 +            set work.graph_table;
20149 +            if _name_ ne '';
20150 +            Cluster=input(substr(_name_,2),8.);
20151 +            LABEL dim1='X' dim2='Y';
20152 +        run;
20153 +        proc sql noprint;
20154 +            create table &em_user_graph_table as
20155 +            select a.*, b.dim1, b.dim2
20156 +            from &em_user_graph_table a, work.graph_table b
20157 +            where a._cluster_=b.cluster;
20158 +        quit;
20159 +
20160 +        %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_clusterdist_title, NOQUOTE));
20161 +        %EM_REPORT(KEY=GRAPH_TABLE, VIEWTYPE=SCATTER, X=DIM1, Y=DIM2, BLOCK=%nrbquote(&BLOCK),
20162 +            DESCRIPTION=%nrbquote(&desc), AUTODISPLAY=Y, TIP=%if &em_property_nDescTerms > 5 %then desc_short; %else clus_desc;,
20163 +            GROUP=_CLUSTER_, LEGEND=N);
20164 +    %end;
20165 +    %else %do;
20166 +        %put &em_codebar;
20167 +        %let errormsg=%sysfunc(sasmsg(sashelp.tmine, EMTOOL.NODISTANCEREPORT_NOTE, NOQUOTE));
20168 +        %put &errormsg;
20169 +        %put &em_codebar;
20170 +    %end;
20171 +
20172 +    %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_clusterfreq_title, NOQUOTE));
20173 +    %EM_REPORT(KEY=GRAPH_TABLE, VIEWTYPE=PIE, X=_cluster_, Y=freq, DESCRIPTION=%nrbquote(&desc),
20174 +        TOOLTIP=clus_desc, BLOCK=%nrbquote(&block), AUTODISPLAY=Y);
20175 +
20176 +    %if &EM_PROPERTY_ALGORITHM=2.0 %then %do;
20177 +
20178 +        proc sql noprint;
20179 +            create table &em_user_hierds as
20180 +            select level, _cluster_, parent, clus_desc, *
20181 +            from &em_user_hierds;
20182 +        quit;
20183 +        filename temp catalog 'sashelp.emtext.tmsort.source';
20184 +        %include temp;
20185 +        %tmsort(data=&em_user_hierds, out=, by=level parent _cluster_);
20186 +
20187 +        data &em_user_hierds;
20188 +            set &em_user_hierds;
20189 +            label _cluster_="&clusterid"
20190 +                  clus_desc="&descterms"
20191 +                  freq="&frequency"
20192 +                  parent="&parent"
20193 +                  level="&hierlevel"
20194 +                  graphdesc="&graphdesc";
20195 +        run;
20196 +        %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_clusterhierarchy_title, NOQUOTE));
20197 +        %em_report(viewtype=constellation, linkkey=hierds, nodekey=hierds, method=HIERARCHY,
20198 +            linkfrom=_CLUSTER_,linkto=PARENT,linkid=_cluster_,nodeid=_CLUSTER_,nodesize=FREQ,nodelabel=graphdesc,
20199 +            nodetip=clus_desc, BLOCK=%nrbquote(&block), DESCRIPTION=%nrbquote(&desc), AUTODISPLAY=Y);
20200 +
20201 +        %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_hierarchydata_title, NOQUOTE));
20202 +        %em_report(KEY=hierds, VIEWTYPE=data, DESCRIPTION=%nrbquote(&DESC), AUTODISPLAY=Y, BLOCK=%nrbquote(&BLOCK));
20203 +    %end;
20204 +
20205 +    proc sql noprint;
20206 +        drop table work.graph_table;
20207 +    quit;
20208 +
20209 +%mend report;
20210 +
NOTE: %INCLUDE (level 1) ending.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set EMWS3.TEXTCLUSTER4_CLUSTERS.
NOTE: The data set EMWS3.TEXTCLUSTER4_GRAPH_TABLE has 5 observations and 74 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: Variable clus_desc already exists on file EMWS3.TEXTCLUSTER4_GRAPH_TABLE.
WARNING: Variable _CLUSTER_ already exists on file EMWS3.TEXTCLUSTER4_GRAPH_TABLE.
WARNING: Variable freq already exists on file EMWS3.TEXTCLUSTER4_GRAPH_TABLE.
WARNING: Variable percent already exists on file EMWS3.TEXTCLUSTER4_GRAPH_TABLE.
NOTE: Table EMWS3.TEXTCLUSTER4_GRAPH_TABLE created, with 5 rows and 74 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 265 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 265 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 5 observations read from the data set EMWS3.TEXTCLUSTER4_GRAPH_TABLE.
NOTE: The data set WORK.GRAPH_TABLE has 5 observations and 74 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: Found negative value(s) in the ratio variable(s). The distance matrix may be meaningless.
NOTE: The data set WORK.GRAPH_TABLE has 5 observations and 6 variables.
NOTE: PROCEDURE DISTANCE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Convergence reached in 4 iterations.
NOTE: The data set WORK.GRAPH_TABLE has 7 observations and 7 variables.
NOTE: PROCEDURE MDS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.GRAPH_TABLE.
NOTE: The data set WORK.GRAPH_TABLE has 5 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
NOTE: Table EMWS3.TEXTCLUSTER4_GRAPH_TABLE created, with 5 rows and 76 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 530 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 530 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 663 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
NOTE: Table WORK.GRAPH_TABLE has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20211  *------------------------------------------------------------*;
20212  * End REPORT: TextCluster4;
20213  *------------------------------------------------------------*;
 
20214  /* Reset EM Options */
20215  options formchar="|----|+|---+=|-/\<>*";
20216  options nocenter ls=256 ps=10000;
20217  goptions reset=all device=GIF NODISPLAY;
 
20218  proc sort data=WORK.EM_USER_REPORT;
20219  by ID VIEW;
20220  run;
 
NOTE: There were 663 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 663 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
