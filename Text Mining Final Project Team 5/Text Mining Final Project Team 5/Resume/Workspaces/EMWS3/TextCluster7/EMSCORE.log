*------------------------------------------------------------*
* Score Log
Date:                November 23, 2023
Time:                22:12:43
*------------------------------------------------------------*
18004  %let EMEXCEPTIONSTRING=;
18005  *------------------------------------------------------------*;
18006  * SCORE: TextCluster7;
18007  *------------------------------------------------------------*;
18008  %let EM_ACTION = SCORE;
18009  %let syscc = 0;
18010  %macro main();
18011  
18012     %if %upcase(&EM_ACTION) eq CREATE %then %do;
18013        filename temp catalog 'sashelp.emtxtext.cluster_create.source';
18014        %include temp;
18015        %create();
18016     %end;
18017     %if %upcase(&EM_ACTION) eq TRAIN %then %do;
18018        filename temp catalog 'sashelp.emtxtext.cluster_train.source';
18019        %include temp;
18020        %train();
18021     %end;
18022     %if %upcase(&EM_ACTION) eq REPORT %then %do;
18023        filename temp catalog 'sashelp.emtxtext.cluster_report.source';
18024        %include temp;
18025        %report();
18026     %end;
18027     %if %upcase(&EM_ACTION) eq SCORE %then %do;
18028        filename temp catalog 'sashelp.emtxtext.cluster_score.source';
18029        %include temp;
18030        %score();
18031     %end;
18032  %mend main;
18033  
18034  %main();
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.CLUSTER_SCORE.SOURCE.
18035 +%macro tmc_score(import_ds=,configdata=,export_ds=,term_ds=,export_out=,clusters_ds=,svdu=,svds=,
18036 +    import_out=,em_outstat=,prefixstring=,ocluster=,ndescterms=,ftmout=,fterms=,hier=);
18037 +  %if &import_ds ne %then %do;
18038 +
18039 +    %let syscc=0;
18040 +
18041 +    %tmc_doc_score(import=&import_ds,export=&export_ds,emoutstat=&em_outstat,
18042 +                termds=&term_ds,clusters=&clusters_ds,configds=&configdata,
18043 +                _scrout=&import_out, svd_u=&svdu, svd_s=&svds, prefix=&prefixstring,
18044 +                outclusters=&ocluster, descterms=&ndescterms, filterterms=&fterms,
18045 +                filtertmout=&ftmout, hierds=&hier);
18046 +
18047 +  %end;
18048 +
18049 +%mend tmc_score;
18050 +%macro score();
18051 +
18052 +    %global last_parse_node last_filter_node last_prescore_node server_err
18053 +      parsevar EM_SASMSG ;
18054 +    %let syscc=0;
18055 +    %if ^%symexist(tm_debug) %then %let tm_debug=0;
18056 +    /*use saved version of em_info in case macro is not populated*/
18057 +    %em_getname(key=last_tm_nodes, type=data);
18058 +
18059 +    filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
18060 +    %include temp;
18061 +    %tm_get_last_filter(eminfo=&em_user_last_tm_nodes,em_lib=&em_lib,
18062 +                        em_variableset=&em_data_variableset);
18063 +    %if &EMEXCEPTIONSTRING ne %then %goto end_cluster_score;
18064 +    %let lastparsenode=&last_parse_node;
18065 +    %let lastfilternode=&last_filter_node;
18066 +    %let lastprescore=&last_prescore_node;
18067 +    %let filt_node=;
18068 +
18069 +   %em_getname(key=terms, type=data);
18070 +   %em_getname(key=docs, type=data);
18071 +   %em_getname(key=clusters, type=data);
18072 +   %em_getname(key=svd_u, type=data);
18073 +   %em_getname(key=svd_s, type=data);
18074 +   %em_getname(key=emoutstat, type=data);
18075 +   %em_getname(key=tmconfig, type=data);
18076 +
18077 +   %em_getname(key=tmout, type=data);
18078 +   %em_getname(key=validout, type=data);
18079 +   %em_getname(key=testout, type=data);
18080 +   %em_getname(key=scoreout, type=data);
18081 +   %em_getname(key=PRESCORECODE, type=file, extension=sas);
18082 +   %let systmutil=;
18083 +
18084 +    filename temp catalog 'sashelp.emtxtext.tm_data2code.source';
18085 +    %include temp;
18086 +    filename temp catalog 'sashelp.emtext.tmemclus.source';
18087 +    %include temp;
18088 +    filename temp catalog 'sashelp.emtext.tmpred.source';
18089 +    %include temp;
18090 +    filename temp catalog 'sashelp.emtext.tmsort.source';
18091 +    %include temp;
18092 +    filename temp catalog 'sashelp.emtxtext.tmc_doc_score.source';
18093 +    %include temp;
18094 +    filename temp catalog 'sashelp.emtext.tmsvd.source';
18095 +    %include temp;
18096 +    filename temp catalog 'sashelp.emtext.tmfast.source';
18097 +    %include temp;
18098 +
18099 +   %let EM_PUBLISHCODE = PUBLISH;
18100 +   %let EM_SCORECODEFORMAT = OTHER;
18101 +   %let overwrite_pre = ;
18102 +
18103 +   %let lastprescore=%trim(%left(&lastprescore));
18104 +
18105 +   /* Create indexed term table for writing out score code */
18106 +   proc sql noprint;
18107 +       select count(*) into :svdkeep
18108 +       from &em_user_svd_s
18109 +       where keep=1;
18110 +   create table _clusterms as
18111 +      select key, term, role, keep, freq, numdocs, parent, _ispar, weight from &em_user_terms;
18112 +
18113 +   data _filter_tmout;
18114 +      set &EM_LIB..&lastfilternode._tmout;
18115 +   run;
18116 +
18117 +   %tmc_score(import_ds=&em_import_data,export_ds=&em_export_train,
18118 +              import_out=_filter_tmout,
18119 +              export_out=&EM_export_transaction,
18120 +              term_ds=_clusterms,
18121 +              clusters_ds=&em_user_clusters,
18122 +              svdu=&em_user_svd_u,
18123 +              svds=&em_user_svd_s,
18124 +              em_outstat=&em_user_emoutstat,
18125 +              configdata=&em_user_tmconfig,
18126 +              prefixstring=&EM_NODEID,
18127 +              ocluster=&em_user_clusters,
18128 +              ndescterms=&em_property_ndescterms,
18129 +              fterms=&EM_LIB..&lastfilternode._terms,
18130 +              ftmout=&EM_LIB..&lastfilternode._tmout,
18131 +              hier=&em_user_hierds);
18132 +
18133 +   %tmc_score(import_ds=&em_import_validate,export_ds=&em_export_validate,
18134 +              export_out=&EM_USER_validout,
18135 +              import_out=&EM_LIB..&lastfilternode._validout,
18136 +              term_ds=_clusterms,
18137 +              clusters_ds=&em_user_clusters,
18138 +              svdu=&em_user_svd_u,
18139 +              svds=&em_user_svd_s,
18140 +              em_outstat=&em_user_emoutstat,
18141 +              configdata=&em_user_tmconfig,
18142 +              prefixstring=&EM_NODEID);
18143 +   %tmc_score(import_ds=&em_import_test,export_ds=&em_export_test,
18144 +              export_out=&EM_USER_testout,
18145 +              import_out=&EM_LIB..&lastfilternode._testout,
18146 +              term_ds=_clusterms,
18147 +              clusters_ds=&em_user_clusters,
18148 +              svdu=&em_user_svd_u,
18149 +              svds=&em_user_svd_s,
18150 +              em_outstat=&em_user_emoutstat,
18151 +              configdata=&em_user_tmconfig,
18152 +              prefixstring=&EM_NODEID);
18153 +
18154 +   %if &syscc>4 %then %do;
18155 +       %let syscc=0;
18156 +       %goto end_cluster_score;
18157 +   %end;
18158 +
18159 +   * path of the diagram ;
18160 +   %let emwspath = ;
18161 +   data _null_;
18162 +      call symput("emwspath", strip(pathname("&EM_LIB")));
18163 +   run;
18164 +
18165 +   filename pre "&EM_USER_PRESCORECODE";
18166 +   data _null_;
18167 +       file pre;
18168 +       put 'filename temp catalog "sashelp.emtext.tmemclus.source";';
18169 +       put '%include temp;';
18170 +       put 'filename temp catalog "sashelp.emtext.tmpred.source";';
18171 +       put '%include temp;';
18172 +       put 'filename temp catalog "sashelp.emtxtext.tmc_doc_score.source";';
18173 +       put '%include temp;';
18174 +       put 'filename temp catalog "sashelp.emtext.tmsort.source";';
18175 +       put '%include temp;';
18176 +       put 'filename temp catalog "sashelp.emtext.tmsvd.source";';
18177 +       put '%include temp;';
18178 +       put 'filename temp catalog "sashelp.emtext.tmfast.source";';
18179 +       put '%include temp;';
18180 +       put 'filename temp;';
18181 +   run;
18182 +
18183 +
18184 +   /* We need to use last prescore */
18185 +   %if &lastprescore ne %then %do;
18186 +      %let tmprescoreFile = %bquote(&emwspath)&em_dsep&lastprescore&em_dsep.PRESCORECODE.sas;
18187 +      filename tmpre "&tmprescoreFile";
18188 +      %em_copyfile(infref=tmpre, outfref=pre, append=Y);
18189 +      filename tmpre;
18190 +   %end;
18191 +
18192 +   data _codeclusters;
18193 +        set &em_user_clusters (drop=clus_desc);
18194 +   run;
18195 +
18196 +     %if not %symexist(em_term_loc) %then %do;
18197 +       %let em_term_loc = %bquote(%sysfunc(pathname(&EM_LIB)));
18198 +         libname termloc "&em_term_loc";
18199 +
18200 +      %let scored_terms = termloc.&lastfilternode._filtterms;
18201 +       %let scored_clust = termloc.&EM_NODEID._clusters;
18202 +       %let scored_config = termloc.&EM_NODEID._tmconfig;
18203 +       %let scored_svd_u = termloc.&EM_NODEID._svd_u;
18204 +       %let scored_svd_s= termloc.&EM_NODEID._svd_s;
18205 +
18206 +       %if &em_property_algorithm=1.0 %then  %do;
18207 +          %let scored_emoutstat= termloc.&EM_NODEID._emoutstat;
18208 +       %end;
18209 +
18210 +   %end;
18211 +   %else %do; /* Write out data sets to external directory */
18212 +       libname termloc "&em_term_loc";
18213 +        %if %sysfunc(libref(termloc)) ne 0 %then %do;
18214 +           %let  EMEXCEPTIONSTRING = EMTOOL.EMTERMLOC,&em_term_loc;
18215 +           %goto end_cluster_score;
18216 +       %end;
18217 +
18218 +      /* copy datasets to use for prescore code*/
18219 +       data termloc.&EM_LIB._&EM_NODEID._CLUSTERS;
18220 +         set _codeclusters;
18221 +       run;
18222 +
18223 +       data termloc.&EM_LIB._&EM_NODEID._svd_u;
18224 +         set &em_user_svd_u;
18225 +       run;
18226 +
18227 +       data termloc.&EM_LIB._&EM_NODEID._svd_s;
18228 +         set &em_user_svd_s;
18229 +       run;
18230 +
18231 +       data termloc.&EM_LIB._&EM_NODEID._tmconfig;
18232 +         set &em_user_tmconfig;
18233 +       run;
18234 +
18235 +       %let scored_terms = termloc.&EM_LIB._&lastfilternode._filtterms;
18236 +       %let scored_clust = termloc.&EM_LIB._&EM_NODEID._CLUSTERS;
18237 +       %let scored_config = termloc.&EM_LIB._&EM_NODEID._tmconfig;
18238 +       %let scored_svd_u = termloc.&EM_LIB._&EM_NODEID._svd_u;
18239 +       %let scored_svd_s= termloc.&EM_LIB._&EM_NODEID._svd_s;
18240 +
18241 +       %if &em_property_algorithm=1.0 %then  %do;
18242 +         data termloc.&EM_LIB._&EM_NODEID._emoutstat;
18243 +         set &em_user_emoutstat;
18244 +         run;
18245 +           %let scored_emoutstat= termloc.&EM_LIB._&EM_NODEID._emoutstat;
18246 +       %end;
18247 +   %end;
18248 +
18249 +
18250 +
18251 +   %let _score_append=;
18252 +
18253 +   * Now save code, if necessary, for search phrase;
18254 +   filename _tmscore "&EM_FILE_EMPUBLISHSCORECODE";
18255 +   %if &em_property_algorithm=1.0 %then %do;
18256 +   data _NULL_;
18257 +     file _tmscore;
18258 +     length string $200;
18259 +     string ='%tmc_doc_score(import='||'&em_score_output'||",export=work._newexport,";
18260 +     put string;
18261 +     string="      termds=&scored_terms, configds=&scored_config,";
18262 +     put string;
18263 +     string= "      clusters=&scored_clust, emoutstat=&scored_emoutstat, ";
18264 +     put string;
18265 +     string = "      _scrout=work.&lastfilternode._out, svd_u=&scored_svd_u, svd_s=&scored_svd_s, prefix=&em_nodeid);";
18266 +     put string;
18267 +     string='data &em_score_output; set work._newexport;';
18268 +     put string;
18269 +    run;
18270 +    %end;
18271 +    %else %do;
18272 +    data _NULL_;
18273 +     file _tmscore;
18274 +     string= '%'||"tmc_doc_score(import="||'&em_score_output'||",export=work._newexport,";
18275 +     put string;
18276 +     put "      termds=&scored_terms,configds=&scored_config,";
18277 +     put "      clusters=&scored_clust, ";
18278 +     put "      _scrout=work.&lastfilternode._out, svd_u=&scored_svd_u, svd_s=&scored_svd_s, prefix=&em_nodeid);";
18279 +     put 'data &em_score_output; set work._newexport;';
18280 +    run;
18281 +    %end;
18282 +   filename _tmscore;
18283 +
18284 +%end_cluster_score:
18285 +    filename temp;
18286 +    %if &tm_debug =0 %then %do;
18287 +    proc sql noprint;
18288 +        drop table _clusterms;
18289 +        drop table _filter_tmout;
18290 +        drop table _codeclusters;
18291 +    quit;
18292 +    %end;
18293 +
18294 +%mend score;
18295 +
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_GET_LAST_FILTER.SOURCE.
18296 +/* ****************************************************************
18297 + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
18298 + *
18299 + * Name:             tm_get_last_filter.sas
18300 + * Product:          SAS Text Miner
18301 + * Language:         Sas
18302 + * Script:
18303 + *
18304 + * Usage:
18305 + *
18306 + * Purpose:  macro to get the last filter node and the last parse node in the
18307 + *   diagram that corresponds to the current parse variable.  If there is no filter
18308 + *   node, the filter node is set to the last parse node.
18309 + *
18310 + *
18311 + *
18312 + * History:
18313 + * 14Aug09 Initial Coding
18314 + *
18315 + * Notes:
18316 + *    Returns an error in the following cases:
18317 + *      1. There is no preceding parse node.
18318 + *      2. There is no parse node with the current parse variable.
18319 + *
18320 + * Last Modified By:
18321 + * Last Modified On: Wed Sep 23 15:35:04 2009
18322 + *
18323 + * End
18324 + * ************************************************************** */
18325 +%macro tm_get_last_filter(eminfo=,em_lib=, em_variableset=);
18326 +   %let last_parse_node=;
18327 +   %let last_filter_node=;
18328 +   %let last_prescore_node=;
18329 +   %let server_err=;
18330 +   %let EMEXCEPTIONSTRING=;
18331 +   %let syscc=0;
18332 +
18333 +    /* verify that setinit for SAS Text Miner is currently active */
18334 +    %if %sysfunc(sysprod(PRODNUM107)) ne 1 %then %do;
18335 +       %let EMEXCEPTIONSTRING = EMTOOL.NOTMLICENSE;
18336 +        %goto end_macro;
18337 +        %end;
18338 +
18339 +
18340 +    * find last filter or text parse node if no filter node. ;
18341 +   %if %sysfunc(exist(&eminfo)) %then %do;
18342 +      proc sql noprint;
18343 +      select data into :last_parse_node from &eminfo where key="LastTextParsing";
18344 +         select data into :last_filter_node from &eminfo where key="LastTextFilter";
18345 +         select data into :last_prescore_node from &eminfo where kupcase(key)="PRESCORECODE";
18346 +      quit;
18347 +
18348 +   %end;
18349 +
18350 +   %if &last_parse_node= %then %do;
18351 +      %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGNODE;
18352 +      %goto end_macro;
18353 +      %end;
18354 +
18355 +   %else %if &last_filter_node= %then %let last_filter_node = %ktrim(&last_parse_node);
18356 +   %else %let last_filter_node = %ktrim(&last_filter_node);
18357 +   %let last_parse_node = %ktrim(&last_parse_node);
18358 +
18359 +   * Check to make sure parse variable is present and still exists;
18360 +   %let parsevar = ;
18361 +   proc sql noprint;
18362 +    select parsevar into :parsevar
18363 +    from &em_lib..&last_filter_node._tmconfig;
18364 +    quit;
18365 +
18366 +    *check for dropped parsevar on input dataset;
18367 +       %let parsevarOK= ;
18368 +       %let parsevarN=%kupcase(%ktrim(&parsevar));
18369 +       data _null_;
18370 +         set &em_variableset(where=(kupcase(NAME)="&parsevarN" and USE in('Y' 'D')));
18371 +         if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
18372 +         run;
18373 +       %if(&parsevarOK eq ) %then %do;
18374 +          %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGVAR;
18375 +          %goto end_macro;
18376 +          %end;
18377 +%end_macro:
18378 +
18379 +%mend tm_get_last_filter;
NOTE: %INCLUDE (level 1) ending.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TEXTCLUSTER7_VARIABLESET.
      WHERE (KUPCASE(NAME)='RESUME_STR') and USE in ('D', 'Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_DATA2CODE.SOURCE.
18380 +/* ****************************************************************
18381 + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
18382 + *
18383 + * Name:             tm_data2code.sas
18384 + * Product:          SAS Text Miner
18385 + * Language:         Sas
18386 + * Script:
18387 + *
18388 + * Usage:  %tm_data2code(data=, outdata=WORK.DATA);
18389 + *
18390 + * Purpose:          To do a data2code (like %em_data2code()) but allow the input data
18391 + *  to be view or data.
18392 + *
18393 + *    PARAMETERS:
18394 + *        DATA        = data set
18395 + *        OUTDATA     = out data set
18396 + *        OUTFILE     = file where to saved the code
18397 + *        APPEND      = append (Y/N)
18398 + * History:
18399 + * 11Jun09 Initial Coding
18400 + *
18401 + * Notes:
18402 + *
18403 + * Last Modified By:
18404 + * Last Modified On: Thu Jul 23 11:00:06 2009
18405 + *
18406 + * End
18407 + * ************************************************************** */
18408 +%macro tm_data2code(data=, outdata=WORK.DATA, outfile=, append=N);
18409 +%if &data eq %then %do;
18410 +   %put ERROR: Data set not defined;
18411 +   %end;
18412 +%else %do;
18413 +   %if (^%sysfunc(exist(&data)) and ^%sysfunc(exist(&data, view))) %then %do;
18414 +       %put ERROR: Data set does not exist;
18415 +       %end;
18416 +   %else %do;
18417 +      %global em_data em_outdata em_codefile em_append;
18418 +      %let em_data=&data;
18419 +      %let em_outdata=&outdata;
18420 +      %let em_codefile=&outfile;
18421 +      %let em_append=&append;
18422 +      proc display c=sashelp.emutil.data2code.scl; run;
18423 +      %end;
18424 +   %end;
18425 +%mend;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMEMCLUS.SOURCE.
18426 +
18427 + /*
18428 +
18429 +  Macro:   tmemclus.sas
18430 +  Purpose: Call proc emclus with given defaults and parameters.
18431 +  Syntax:  %tmemclus(data=, role=, clusters=, seed=,
18432 +                   outstat=, out=, vars=, cov=, iter=, secclus=,
18433 +                   seciter=, min=, method=, eps=, init=, print=,
18434 +                   p=, outliers=, decvar=, initstd=, dist=,
18435 +                   secstd=, nobs=, threads=);
18436 +  Required Parameters:  data=      The input data set.
18437 +                        role=      Train or score
18438 +                        clusters=  The number of primary clusters
18439 +
18440 +  Optional Parameters:  vars=      Variables to be used
18441 +                   cov=       Type of covariance matrix
18442 +                   iter=      Number of EM iterations
18443 +                   secclus    Number of secondary clusters
18444 +                   seciter    Number of k-means iterations
18445 +                   min=       Minimum number of obs in a cluster
18446 +                   method=    Standard or scaled
18447 +                   eps=       Stopping tolerance
18448 +                   init=      Random, Fastclus, or Emclus
18449 +                   print=     All, last, or none
18450 +                   p=
18451 +                   outliers=  Keep, cluster, or ignore
18452 +                   outstat=   Name of OUTSTAT data set
18453 +                   out=       Name of OUT data set
18454 +                   seed=      Name of SEED data set
18455 +                   decvar=    Proportion to decrease variances
18456 +                   initstd=   Initial standard deviation
18457 +                   dist=      Minimum distance between clusters
18458 +                   secstd=    Secondary cluster max std dev.
18459 +                   nobs=      Number of obs read in each iteration
18460 +  History:
18461 +  2001/01/16 - Bill Wheeler - Initial Coding.
18462 +  2001/11/29 - Bill Wheeler - Updated for version 8 or 9
18463 +*/
18464 +%MACRO tmemclus(data=, role=, clusters=, seed=,
18465 + outstat=, out=, vars=, cov=, iter=, secclus=,
18466 + seciter=, min=, method=, eps=, init=, print=,
18467 + p=, outliers=, decvar=, initstd=, dist=, secstd=, nobs=, threads=);
18468 +
18469 + %local saveout saveseed op1 op2 op3 op4;
18470 +
18471 + %LET saveout = &out;
18472 + %LET saveseed = &outstat;
18473 +
18474 + /* defaults */
18475 + %if &role= %then %let role = TRAIN;
18476 + %if &seed ne %then %let seed = seed=&seed;
18477 + %if &vars= %then %let var = ;
18478 + %else %let var = var &vars;
18479 + %if &cov ne %then %let cov = cov = &cov;
18480 + %if &iter ne %then %let iter = iter = &iter;
18481 + %if &init ne %then %let init = init = &init;
18482 + %if &eps ne  %then %let eps = eps = &eps;
18483 + %if &min ne %then %let min = min = &min;
18484 + %if &seciter ne %then %let seciter = seciter = &seciter;
18485 + %if &print ne %then %let print = print = &print;
18486 + %if &p ne %then %let p = p = &p;
18487 + %if &outliers ne %then %let outliers = outliers = &outliers;
18488 + %if &method ne %then %let method = method = &method;
18489 + %if &decvar ne %then %let decvar = decvar = &decvar;
18490 + %if &outstat ne %then %let outstat = outstat = &outstat;
18491 + %if &out ne %then %let out = out = &out;
18492 + %if (&threads >= 0)  %then %let threads = threads = &threads;
18493 + %else %let threads = ;
18494 +
18495 + %LET op1 = ;
18496 + %LET op2 = ;
18497 + %LET op3 = ;
18498 + %LET op4 = ;
18499 + %if ^(&initstd=) %then %let op1 = %str(initstd = &initstd);
18500 + %if ^(&dist=) %then %let op2 = %str(dist = &dist);
18501 + %if ^(&secstd=) %then %let op3 = %str(secstd = &secstd);
18502 + %if ^(&nobs=) %then %let op4 = %str(nobs = &nobs);
18503 +
18504 +
18505 + %IF &SYSVER < 9 %THEN %DO;
18506 +    %LET cov = ;
18507 +    %LET decvar = ;
18508 +    %LET outliers = ;
18509 +    %LET out = ;
18510 + %END;
18511 +
18512 +
18513 + %if %upcase(&role) = TRAIN %then
18514 + %do;
18515 +   proc emclus data = &data
18516 +   clusters = &clusters
18517 +   &seed
18518 +   &outstat
18519 +   &out
18520 +   &init
18521 +   &eps
18522 +   &method
18523 +   &secclus
18524 +   &min
18525 +   &print
18526 +   &outliers
18527 +   &iter
18528 +   &op1 &op2
18529 +   &op3 &op4
18530 +   &decvar
18531 +   &cov
18532 +   &threads
18533 +   ;
18534 +   &var;
18535 + %end;
18536 + %else
18537 +  %do;
18538 +    proc emclus data = &data
18539 +    role = score
18540 +    clusters = &clusters
18541 +    &seed
18542 +    &out
18543 +    &cov
18544 +    ;
18545 +    &var;
18546 +  %end;
18547 +
18548 + %IF &SYSVER < 9 and &saveout ^= %THEN %DO;
18549 +   proc emclus data = &data
18550 +   role = score
18551 +   clusters = &clusters
18552 +   seed = &saveseed
18553 +   &saveout
18554 +   ;
18555 +   &var;
18556 + %END;
18557 +
18558 +
18559 +%MEND tmemclus;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMPRED.SOURCE.
18560 +
18561 +/*
18562 +  Macro: tmpred(inds,outds,clusters,type=,ignore=,freqDS=)
18563 +
18564 +  Description: This macro will take output from
18565 +     emclus and generate predicted
18566 +      predicted clusters.
18567 +
18568 +  Parms: inds - input data set, produced by emclus.
18569 +   outds - data set with clusters created by this macro.
18570 +   clusters - number of clusters that should be on this data set
18571 +   type - valid values: 'max' or 'prob'.  Max will just take the
18572 +      cluster with the highest probability as the predicted cluster.
18573 +      In the case of a tie the first cluster with that value will
18574 +       selected.
18575 +      Prob will attempt to select multiple clusters based on
18576 +      how many clusters were requested.  That is if 3 clusters
18577 +      were requested, any cluster with prob>1/3 will be selected
18578 +      as the predicted cluster. THIS OPTION IS UNTESTED.
18579 +*/
18580 +
18581 +%macro tmpred(inds,outds,clusters,type=, ignore=0, freqDS=, compress=1);
18582 +
18583 +  %local _str newfreqDS _flag;
18584 +
18585 +  * set the optional arguments;
18586 +  %if &type= %then %let type=max;
18587 +  %if &ignore = 1 %then %let
18588 +    _str = if _CLUSTER_ = &clusters then _CLUSTER_ = .;
18589 +  %else %let _str = ;
18590 +  %if %str(&freqDS) ^= %str() %then %do;
18591 +   %let newfreqDS = &freqDS(keep=_c1-_c&clusters);
18592 +   %let _flag = 1;
18593 +  %end;
18594 +  %else %let _flag = 0;
18595 +
18596 +  %if &compress = 1 %then %let compress = compress=Y;
18597 +  %else %let compress = ;
18598 +
18599 +  data &outds(&compress drop=_c1-_c&clusters)
18600 +    %if &_flag = 1 %then %do;
18601 +    &newfreqDS
18602 +    %end;
18603 +    ;
18604 +    set &inds end=eof;
18605 +   * array for holding all probabilities;
18606 +    array _p prob1--prob&clusters;
18607 +    array _c(&clusters);
18608 +    retain _c 0;
18609 +   * get rid of working columns;
18610 +    drop _max_ _i /*prob1--prob&clusters*/ _WARN_;
18611 +    /* keep the largest probability and the cluster */
18612 +    _max_ = 0;
18613 +    do _i = 1 to &clusters;
18614 +      if _p(_i) > _max_ then do;
18615 +        _max_ = _p(_i);
18616 +        _CLUSTER_ = _i;
18617 +      end;
18618 +    end;
18619 +    if (_CLUSTER_ >= 1) and (_CLUSTER_ <= &clusters) then
18620 +      _c(_CLUSTER_) = _c(_CLUSTER_) + 1;
18621 +    else _CLUSTER_ = .;
18622 +    &_str;
18623 +    %if &_flag = 1 %then %do;
18624 +      if eof then do;
18625 +        output &freqDS;
18626 +                output &outDS;
18627 +          end;
18628 +          else output &outDS;
18629 +        %end;
18630 +
18631 +    run;
18632 +%mend tmpred;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMSORT.SOURCE.
18633 + /*
18634 +PROC SORT macro
18635 +
18636 +%tmsort(data=, out=, by=);
18637 +
18638 +data=      - name of input data set (outtree data set from PROC CLUSTER)
18639 +out=       - name of the output data set
18640 +by=        - by statement
18641 +options=   - proc options
18642 +*/
18643 +
18644 +%macro tmsort(data=, out=, by=, options=, threads=THREADS);
18645 +  %if %BQUOTE(&out) ^= %then %let out = out =  &out;
18646 +  %if &SYSVER < 9 %then %let threads = ;
18647 +
18648 +  proc sort data = %STR(&data) &threads &options
18649 +    &out;
18650 +    by &by;
18651 +  run;
18652 +
18653 +%mend tmsort;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TMC_DOC_SCORE.SOURCE.
18654 +/*****************************************************************************
18655 +*
18656 +* tmc_doc_score
18657 +*
18658 +*  import  =  the doc data set of _document_ ids's as input
18659 +*  export = the new doc dataset with the svd dimensions and cluster results as output
18660 +*  termds = the terms table as input
18661 +*  clusters = input dataset of clusters from train
18662 +*  emoutstat = input dataset of seeds from training
18663 +*  _scrout = input OUT data set to be scored, may be trimmed based on conent of termds
18664 +*  svd_u = input singular vectors
18665 +
18666 +
18667 +*  svd_s = input singular values
18668 +*  prefxi = variable prefix string identifier.
18669 +*
18670 +**************************************************************************************/
18671 +
18672 +%macro tmc_doc_score(import=,export=,termds=,export_out=,clusters=,emoutstat=,
18673 +                 _scrout=,svd_u=,svd_s=,configds=,prefix=, outclusters=,hierds=,
18674 +                filterterms=,filtertmout=, descterms=);
18675 +
18676 +   %if ^%symexist(tm_debug) %then %let tm_debug=0;
18677 +
18678 +    proc sql noprint;
18679 +        select cellwgt into: cellwgt
18680 +            from &configds;
18681 +        select clus_alg into: algorithm
18682 +            from &configds;
18683 +        select parseVar into :textvar
18684 +            from &configds;
18685 +        select count(*) into :nclus
18686 +            from &clusters;
18687 +        select count(*) into :svdkeep
18688 +            from &svd_s
18689 +            where keep=1;
18690 +    quit;
18691 +
18692 +    %let svdkeep=%left(&svdkeep);
18693 +    %let nclus=%left(&nclus);
18694 +    %let algorithm=%left(&algorithm);
18695 +    %Let cellwgt=%left(&cellwgt);
18696 +    data _import_ds;
18697 +        set &import;
18698 +    run;
18699 +
18700 +
18701 +    %tmsort(data=&termds(where=(keep='Y')), out=_terms(keep= KEY PARENT),
18702 +            by=KEY);
18703 +    %tmsort(data=&_scrout, out=&_scrout, by=_termnum_);
18704 +
18705 +    data _svdm1;
18706 +        merge _terms (where=(PARENT ne _termnum_) in=_b_ keep=KEY PARENT rename=(KEY=_TERMNUM_))
18707 +              &_scrout (in = _A_ rename=(_COUNT_=COUNT));
18708 +        by _termnum_;
18709 +        if _B_;
18710 +        if (_A_ and _B_ and (PARENT ne .))
18711 +          then _TERMNUM_ = PARENT;
18712 +
18713 +        keep _TERMNUM_ _DOCUMENT_ COUNT;
18714 +        if (_DOCUMENT_=.) or (COUNT=.) then delete;
18715 +    run;
18716 +
18717 +    proc sql ;
18718 +       create table _scrout as select distinct _TERMNUM_, _DOCUMENT_,
18719 +        sum(COUNT) as _COUNT_ from _svdm1
18720 +        group by _TERMNUM_, _DOCUMENT_;
18721 +
18722 +       drop table _svdm1;
18723 +       drop table _terms;
18724 +    quit;
18725 +
18726 +    %tmsort(data=&termds(where=(KEEP='Y' and PARENT=.)),
18727 +         out=_weights (rename=(KEY=INDEX WEIGHT=GWGT) keep=KEY WEIGHT),
18728 +         by=KEY, options=, threads=);
18729 +
18730 +
18731 +    %tmsort(data=_scrout, out=_scrout, by=_DOCUMENT_, options=, threads=);
18732 +      %let svdkeep=%left(&svdkeep);
18733 +      data &svd_u;
18734 +         set &svd_u(keep= index col1-col&svdkeep);
18735 +      run;
18736 +
18737 +      proc sql;
18738 +         create table  _inweights as
18739 +         select a.*
18740 +         from _weights a right join &svd_u b
18741 +         on a.index=b.index
18742 +         ;
18743 +       quit;
18744 +    %if %lowcase(&cellwgt) = bin %then %let cellwgt=BINARY;
18745 +    proc spsvd data=_scrout IN_U=&svd_u
18746 +        local = &cellwgt global = none in_global = _inweights ;
18747 +        row _TERMNUM_;
18748 +        col _DOCUMENT_;
18749 +        entry _COUNT_;
18750 +        output colpro=_COLPRO bigpro normcol prefix="&prefix._SVD";
18751 +    run;
18752 +    proc sort data=_import_ds;
18753 +    by _DOCUMENT_; run;
18754 +
18755 +    proc sort data=_colpro;
18756 +    by INDEX;
18757 +    run;
18758 +
18759 +    data &export;
18760 +        merge _import_ds (in=_C_ ) _colpro (rename=(INDEX=_DOCUMENT_));
18761 +        by _DOCUMENT_;
18762 +        if _C_;
18763 +    run;
18764 +
18765 +    data &export;
18766 +       set  &export;
18767 +       array svd_array &prefix._SVD1 - &prefix._SVD&svdkeep.;
18768 +       do i = 1 to dim(svd_array);
18769 +          if svd_array(i)=. then svd_array(i)=0;
18770 +       end;
18771 +       drop i;
18772 +    run;
18773 +
18774 +
18775 +    %tmsort(data=&export, out=, by=_document_, options=, threads=);
18776 +
18777 +    %if %left(&algorithm)=1.0 %then %do;
18778 +
18779 +        %tmemclus(data=&export,
18780 +            role=SCORE, clusters=&nclus,
18781 +            seed=&emoutstat,
18782 +            outstat=, out=&export,
18783 +            vars=%STR(&prefix._SVD1 - &prefix._SVD&SVDKEEP),
18784 +            cov=, iter=5, secclus=,
18785 +            seciter=, min=, method=, eps=.1, init=, print=,
18786 +            p=, outliers=, decvar=0,
18787 +            initstd=, dist=, secstd=, nobs=);
18788 +        run;
18789 +
18790 +        %tmpred(&export, &export, &nclus, type=, ignore=0,
18791 +                  freqDS=, compress=1);
18792 +
18793 +        data &export;
18794 +           set &export;
18795 +           rename prob1-prob&nClus = &prefix._prob1-&prefix._prob&nclus;
18796 +           rename _cluster_=&prefix._cluster_;
18797 +        run;
18798 +
18799 +        %if &outclusters ne %then %do;
18800 +              %let memloc = _tmmem;
18801 +              proc tmutil data=&_scrout key=&filterterms ;
18802 +                 control init memloc="&memloc" release;
18803 +                 output keeponly out=_outtmutil;
18804 +              run;
18805 +
18806 +              data _docdata;
18807 +                 set &export (rename=(&prefix._cluster_=cluster));
18808 +              run;
18809 +
18810 +              /* Recalculate desc terms */
18811 +              data _terms_;
18812 +               set &filterterms;
18813 +               by key _ispar;
18814 +               if first.key then
18815 +                output;
18816 +               else;
18817 +              run;
18818 +
18819 +              data _terms_;
18820 +               set _terms_;
18821 +               if _ispar='+' then
18822 +                  Term=_ispar || ' ' || term;
18823 +              run;
18824 +
18825 +             %tmsort(data=_outtmutil,
18826 +               out=_tmout_,
18827 +               by=_termnum_,
18828 +                  options=,
18829 +               threads=threads);
18830 +
18831 +
18832 +             data _tmout_;
18833 +               merge _tmout_ (in=_A_)
18834 +                  _terms_ (rename=(key=_termnum_ term=_term_) keep=key term );
18835 +               by _termnum_;
18836 +               if _A_;
18837 +             run;
18838 +
18839 +             data _docs_;
18840 +               set _docdata (rename=(cluster=_cluster_) keep=_document_ cluster);
18841 +               _SEGMNT_=_cluster_;
18842 +             run;
18843 +
18844 +             %tmterm1(DSN_TPARS=_tmout_,
18845 +              DSN_CLUS=_docs_,
18846 +              DSN_DESC=_desc_,
18847 +              N_DESC_TERMS=&descterms,
18848 +              N_CLUS=&nclus,
18849 +              top_freq=%eval(&descterms*2),
18850 +              key=);
18851 +
18852 +             %tmsort(data=_desc_,
18853 +               out=_desc_,
18854 +               by=_cluster_,
18855 +                  options=,
18856 +               threads=threads);
18857 +
18858 +             proc sql noprint;
18859 +               create table &outclusters as
18860 +                 select a.clus_desc, b.* from &outclusters b left join _desc_ a
18861 +                 on a._cluster_=b._cluster_;
18862 +             quit;
18863 +
18864 +       %end;
18865 +
18866 +    %end;
18867 +    %else %do;
18868 +
18869 +        data _clustermean;
18870 +            set &clusters(keep=_cluster_ _mean1-_mean&svdkeep. freq);
18871 +        run;
18872 +
18873 +        proc sql;
18874 +        create table _meandocs as
18875 +            select a.*, b.*
18876 +            from &export(keep=&prefix._SVD1 - &prefix._SVD&SVDKEEP _document_) a , _clustermean b;
18877 +        quit;
18878 +
18879 +
18880 +        proc sort data=_meandocs;
18881 +        by _document_;
18882 +        run;
18883 +
18884 +        %if (&syscc>4) %then %do;
18885 +            %let emexceptionstring=EMTOOL.INSUFFICIENTMEM;
18886 +            %goto end_tmc;
18887 +        %end;
18888 +
18889 +        %tmsort(data=_meandocs,out=,by=_document_);
18890 +
18891 +          data _docdata(drop=_mean1-_mean&svdkeep. j _CLUSTER_ _freq_ rename=(_cluster_=&prefix._cluster_ distance=&prefix._distance));
18892 +            set _meandocs;
18893 +            drop _minDist_ _dist_ j freq;
18894 +            label CLUSTER = 'Cluster ID';
18895 +            array _means(&svdkeep) _mean1-_mean&svdkeep.;
18896 +            array _cols(&svdkeep) &prefix._SVD1-&prefix._SVD&svdkeep.;
18897 +            by _document_;
18898 +            retain CLUSTER _mindist_;
18899 +            _dist_ = 0;
18900 +            /* innner product*/
18901 +            do j = 1 to &svdkeep;
18902 +                _dist_ = _dist_ + (_cols(j)-_means(j))*(_cols(j)-_means(j));
18903 +            end;
18904 +
18905 +            /* initialization*/
18906 +            if first._document_ then do;
18907 +                _minDist_ = _dist_;
18908 +                CLUSTER = _cluster_;
18909 +            end;
18910 +            /*optimization*/
18911 +            if (_dist_ < _minDist_) then do;
18912 +                _minDist_ = _dist_;
18913 +                CLUSTER = _cluster_;
18914 +            end;
18915 +            if last._document_ then do;
18916 +               output;
18917 +            end;
18918 +        run;
18919 +        proc sort data=_docdata;
18920 +           by _document_;
18921 +        proc sort data=&export;
18922 +           by _document_;
18923 +        run;
18924 +
18925 +        data &export;
18926 +           merge &export _docdata;
18927 +           by _document_;
18928 +           rename cluster=&prefix._cluster_;
18929 +        run;
18930 +    %end;
18931 +
18932 +    /* Reorder variables in exported data set */
18933 +    proc sql noprint;
18934 +        create table &export as
18935 +        select &textvar, &prefix._cluster_, *
18936 +        from &export;
18937 +    quit;
18938 +
18939 +
18940 +    %if &outclusters ne %then %do;
18941 +
18942 +        /* update freqencies in cluster table */
18943 +         proc freq data =_docdata ;
18944 +            tables cluster/out=_tempfreqtable;
18945 +         run;
18946 +
18947 +        proc sql noprint;
18948 +            create table &outclusters as
18949 +            select  a.*, b.count as freq, b.percent/100 as percent
18950 +            from &clusters (drop= freq percent _rmsstd_) a, _tempfreqtable b
18951 +           where a._cluster_=b.cluster;
18952 +
18953 +        quit;
18954 +
18955 +        %if %left(&algorithm)=2.0 %then %do;
18956 +
18957 +          proc sql noprint;
18958 +
18959 +             create table &hierds as select a.freq, b.*
18960 +                from &outclusters a right join &hierds b on a._cluster_=b._cluster_;
18961 +          quit;
18962 +
18963 +          /* Find descriptive terms for clusters & parents */
18964 +          filename temp catalog 'sashelp.emtxtext.tmgethierterms.source';
18965 +          %include temp;
18966 +          filename temp;
18967 +
18968 +          %tm_getHierTerms(hierds=&hierds,
18969 +                         docs=_docdata,
18970 +                         tmout=&filtertmout,
18971 +                         terms= &filterterms,
18972 +                         ndescterms=&descterms);
18973 +
18974 +          proc sql noprint;
18975 +             create table &outclusters as
18976 +                select a.clus_desc, b.* from &hierds a, &outclusters b
18977 +                where a._cluster_=b._cluster_;
18978 +
18979 +             update &hierds set freq=0 where clus_desc="" and _cluster_ ne 1;
18980 +          quit;
18981 +
18982 +          /* Add frequencies to ancestors */
18983 +          data _hd;
18984 +             set &hierds;
18985 +             cluster=_cluster_;
18986 +             drop _cluster_ parent;
18987 +          run;
18988 +
18989 +          %let empty=1;
18990 +
18991 +          %do %while (&empty);
18992 +
18993 +            proc sql noprint;
18994 +                update _hd set freq=
18995 +                    (select sum(freq) from &HIERDS
18996 +                    where parent=cluster)
18997 +                    where freq=. and cluster not in
18998 +                    (select parent from &hierds where freq=.);
18999 +                select count(*) into :empty from _hd
19000 +                    where freq=.;
19001 +                update &hierds set freq=(select freq from _hd where _cluster_=cluster);
19002 +            quit;
19003 +
19004 +          %end;
19005 +
19006 +          /* Set graphdesc variable for graph display */
19007 +          data &hierds(drop=plus pos sub);
19008 +            set &hierds;
19009 +            plus='';
19010 +            if substr(CLUS_DESC, 1, 1) = "+" then plus="+ ";
19011 +            if ktrim(clus_desc) ne "" then do;
19012 +              if(substr(CLUS_DESC, 1, 1)) = "'" then do;
19013 +                 pos = findc(CLUS_DESC, "'",2);
19014 +                 sub = substr(CLUS_DESC,1,pos);
19015 +              end;
19016 +              else sub = scan(CLUS_DESC, 1);
19017 +              graphdesc=_CLUSTER_ || ': ' || plus || sub;
19018 +            end;
19019 +            else graphdesc=_CLUSTER_;
19020 +          run;
19021 +        %end;
19022 +
19023 +         /*calculate residual for each doc */
19024 +
19025 +         proc sort data=_docdata (rename=(cluster=_cluster_));
19026 +            by _cluster_;
19027 +         run;
19028 +
19029 +         data _rmscalc;
19030 +            merge _docdata(in=inhere) &outclusters;
19031 +            array _means(&svdkeep) _mean1-_mean&svdkeep.;
19032 +            array _svds(&svdkeep) &prefixstring._SVD1 - &prefixstring._SVD&svdkeep.;
19033 +            by _cluster_;
19034 +            error=0;
19035 +            do i = 1 to &svdkeep;
19036 +               error +( (_svds{i}-_means{i}) * (_svds{i}-_means{i}));
19037 +            end;
19038 +
19039 +            drop i ;
19040 +         run;
19041 +
19042 +          /*calc standardized residual for clusters*/
19043 +         proc summary data=_rmscalc nway;
19044 +            class _cluster_;
19045 +            var error;
19046 +            output out=_meanerr mean=meane sum=sume;
19047 +         run;
19048 +
19049 +         data _rmsse;
19050 +            set _meanerr;
19051 +            /* original code divides by number of svd dims*/
19052 +            if _freq_ gt 1 then do;
19053 +              _rmsstd_=sqrt(sume/((_freq_-1)*(&svdkeep.)));
19054 +            end;
19055 +            else do;
19056 +              _rmsstd_=0;
19057 +            end;
19058 +            keep _cluster_  _rmsstd_;
19059 +         run;
19060 +
19061 +
19062 +         proc sql noprint;
19063 +           create table _clusstat2 as
19064 +           select a.*,b.*
19065 +           from &outclusters a left join _rmsse b
19066 +           on a._cluster_=b._cluster_;
19067 +
19068 +           create table &outclusters as
19069 +           select * from _clusstat2;
19070 +         quit;
19071 +
19072 +
19073 +    %end;
19074 +
19075 +
19076 +%end_tmc:
19077 +    %if &tm_debug =0  %then %do;
19078 +    proc sql noprint;
19079 +        drop table _weights;
19080 +        drop table _colpro;
19081 +        drop table _scrout;
19082 +        drop table _svdm1;
19083 +        drop table _inweights;
19084 +        drop table _clustermean;
19085 +        drop table _clusstat2;
19086 +        drop table _outtmutil;
19087 +        drop table _rmscalc;
19088 +        drop table _rmsse;
19089 +        drop table _meanerr;
19090 +        drop table _meandocs;
19091 +        drop table _import_ds;
19092 +        drop table _hd;
19093 +        drop table _terms_;
19094 +        drop table _docs_;
19095 +        drop table _tmout_;
19096 +        drop table _desc_;
19097 +        drop table _docdata;
19098 +    quit;
19099 +    %end;
19100 +
19101 +%mend tmc_doc_score;
19102 +
19103 +
19104 +
19105 +
19106 +
19107 +
19108 +
19109 +
19110 +
19111 +
19112 +
19113 +
19114 +
19115 +
19116 +
19117 +
19118 +
19119 +
19120 +
19121 +
19122 +
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMSVD.SOURCE.
19124 + /*
19126 +  Macro:     tmsvd.sas
19127 +  Purpose:  Call proc spsvd with given defaults and parameters.
19128 +  Syntax:   %tmsvd(in,k=,global=,local=,row=,col=,entry=,scaleOp=,normOp=,
19129 +            in_global=,in_u=,in_s=,in_v=,u=,s=,v=,wgt=,wordPro=,
19130 +           colPro=, p=, tol=, gwgt=, mink=, maxk=, res=, remote=, compact=,bigpro=0);
19132 +  Required Parameters:  in     The data= data set.
19133 +  Optional Parameters:  k= The number of dimensions to reduce to
19134 +                   global=  The global weight to use, defaults to IDF.
19135 +                   local=  The local weight to use, defaults to BINARY.
19136 +                   row=   Column in the input data set that represents
19137 +                          the matrix row,
19138 +                       defaults to _termnum_.
19139 +            col=   Column in the input data set that represents
19140 +                          the matrix column,
19141 +                         defaults to _document_.
19142 +            entry= Column in the input data set that represents the
19143 +                          value in the
19144 +                         given row,column cell.  Defaults to _count_.
19145 +             scaleOp= Scale options: scalerow scalecol scaleall
19146 +            normOp=  Normalization options: normrow normcol normall
19147 +            in_global= The gwgt= output data set from a prior spsvd run.
19148 +                   in_u=  The u= output from a prior spsvd run.
19149 +                   in_s=  The s= output from a prior spsvd run.
19150 +                   in_v=  The v= output from a prior spsvd run.
19151 +                   u=     matrix U data set
19152 +                   s=     matrix S data set
19153 +                   v=     matrix V data set
19154 +                  wgt=   weighted input matrix data set
19155 +                  wordPro= projections of rows of A onto columns of V
19156 +                  colPro=  projection of columns of A onto columns of U
19157 +                  p=   number of iterations
19158 +                  tol= convergence tolerance
19159 +                   gwgt= global weights data set
19160 +                  mink=
19161 +                  maxk=
19162 +                  res=
19163 +                  remote= name of file
19165 +  History:
19166 +  2001/01/16 - Kevin Daly - Initial coding.
19167 +  2001/01/19 - Kevin Daly - Fixed so that when global=NONE and local=NONE,
19168 +             no gwgt data set
19169 +               is requested.  This was causing an error and the proc
19170 +              would terminate.
19171 +  2001/02/21 - Bill Wheeler - Allowd all options to be specified
19172 +  2001/05/14 - Bill Wheeler - Added version 9 options min_k, max_k, resolution
19173 +  2001/08/14 - Bill Wheeler - Added remote option
19174 +  2001/11/29 - Bill Wheeler - Updated for version 8 or 9
19175 +*/
19177 +%macro tmsvd(in,k=,global=,local=,row=,col=,entry=,scaleOp=,normOp=,
19178 +             in_global=, in_u=, in_s=, in_v=, u=, s=, v=,
19179 +             wgt=, wordPro=, colPro=, p=, tol=, gwgt=, mink=, maxk=, res=,
19180 +             remote=, compact=,bigpro= );
19182 +  %put;
19183 +  /* Defaults */
19184 +  %if &k ^= %then %let k = k = &k;
19185 +  %if &global ^= %then %let global = global = &global;
19186 +  %if %lowcase(&local) = bin %then %let local=BINARY;
19187 +  %if &local ^= %then %let local=local=&local;
19188 +  %if &row= %then %let row=_termnum_;
19189 +  %if &col= %then %let col=_document_;
19190 +  %if &entry= %then %let entry=_count_;
19191 +  %if &scaleOp ^= %then %let scaleOp = scaledoc;
19192 +  %if &normOp ^= %then %let normOp = normdoc;
19193 +  %if &compact ^= %then %let compact = compact;
19194 +  %else %let compact = ;
19196 +  %if &in_global ^= %then %let in_global = in_global=&in_global;
19197 +  %if &in_u ^= %then %let in_u = in_u=&in_u;
19198 +  %if &in_s ^= %then %let in_s = in_s=&in_s;
19199 +  %if &in_v ^= %then %let in_v = in_v=&in_v;
19200 +  %if ((&p ^= ) and (&p ^= .)) %then %let p = p=&p;
19201 +  %else %let p = ;
19202 +  %if ((&tol ^= ) and (&tol ^= .)) %then %let tol = tol=&tol;
19203 +  %else %let tol = ;
19205 +  %IF &SYSVER < 9 %THEN %DO;
19206 +    %IF &k = %THEN %DO;
19207 +      %IF &maxk ^= %THEN %LET k = k = &maxk;
19208 +      %ELSE %LET k = k = 100;
19209 +    %END;
19210 +    %LET mink = ;
19211 +    %LET maxk = ;
19212 +    %LET res = ;
19213 +    %LET remote = ;
19214 +    %LET compact = ;
19215 +  %END;
19218 +  %if &colPro ^= %then %let colPro = COLPRO=&colPro;
19219 +  %if &gwgt ^= %then %let gwgt = GWGT=&gwgt;
19220 +  %if &s ^= %then %let s = S=&s;
19221 +  %if &u ^= %then %let u = U=&u;
19222 +  %if &v ^= %then %let v = V=&v;
19223 +  %if &wordPro ^= %then %let wordPro = WORDPRO=&wordPro;
19224 +  %if &wgt ^= %then %let wgt = WGT=&wgt;
19225 +  %if (&mink ^=  ) and (&mink ^= .) %then %let mink = min_k = &mink;
19226 +  %else %let mink = ;
19227 +  %if &maxk ^= %then %let maxk = max_k = &maxk;
19228 +  %if &res ^= %then %let res = res = &res;
19229 +  proc sort data=&in; by &col;
19230 +  /* Run the proc */
19231 +  proc spsvd data=&in
19232 +      &mink
19233 +      &maxk
19234 +      &res
19235 +      &k &compact
19236 +    &local &global &in_global
19237 +    &in_u &in_s &in_v &p &tol;
19238 +    row &row; col &col; entry &entry;
19239 +      output &colPro &gwgt &normOp &scaleOp &s &u &v
19240 +           &wordPro &wgt &bigpro;
19241 +    &remote;
19242 +  run;
19244 +%mend tmsvd;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMFAST.SOURCE.
19245 + /*
19246 +
19247 +  Macro:   tmfast.sas
19248 +  Purpose: Call proc fastclus with given defaults and parameters.
19249 +  Syntax:  %tmfast(data=, clusters=, outstat=, vars=);
19250 +
19251 +  Required Parameters:  data=      The input data set.
19252 +                        clusters=  The maximum number of clusters
19253 +
19254 +  Optional Parameters:  vars=      Variables to be used
19255 +                        outstat=   The name of the OUTSTAT data set
19256 +                        outseed=   The name of the OUTSEED data set
19257 +
19258 +  Either outstat or outseed mut be given, but not both.
19259 +  History:
19260 +  2001/01/16 - Bill Wheeler - Initial Coding.
19261 +
19262 +*/
19263 +%MACRO tmfast(data=, clusters=, outstat=, outseed=,
19264 +                 id=, out=, vars=);
19265 + /* defaults */
19266 + %if (&id ne ) %then %let id = id &id;
19267 + %if (&out ne ) %then %let out = out = &out;
19268 + %if (&vars ne ) %then %let var = var &vars;
19269 + %else %let var = ;
19270 +
19271 + %if &outseed= %then
19272 + %do;
19273 +   proc fastclus data = &data
19274 +   maxclusters = &clusters noprint
19275 +   outstat = &outstat &out;
19276 +   &var;
19277 +   &id;
19278 + %end;
19279 + %else
19280 + %do;
19281 +   proc fastclus data = &data
19282 +   maxclusters = &clusters noprint
19283 +   outseed = &outseed &out;
19284 +   &var;
19285 +   &id;
19286 + %end;
19287 +%MEND tmfast;
NOTE: %INCLUDE (level 1) ending.
NOTE: Table WORK._CLUSTERMS created, with 16666 rows and 9 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 218546 observations read from the data set EMWS3.TEXTFILTER5_TMOUT.
NOTE: The data set WORK._FILTER_TMOUT has 218546 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 674 observations read from the data set EMWS3.TEXTPARSING_TRAIN.
NOTE: There were 674 observations read from the data set EMWS3.TEXTFILTER5_DOC_IDS.
NOTE: There were 674 observations read from the data set EMWS3.TEXTFILTER5_TRAIN.
NOTE: The data set WORK._IMPORT_DS has 674 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      


NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 16666 observations read from the data set WORK._CLUSTERMS.
      WHERE keep='Y';
NOTE: The data set WORK._TERMS has 16666 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 218546 observations read from the data set WORK._FILTER_TMOUT.
NOTE: The data set WORK._FILTER_TMOUT has 218546 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 13209 observations read from the data set WORK._TERMS.
      WHERE PARENT not = _termnum_;
NOTE: There were 218546 observations read from the data set WORK._FILTER_TMOUT.
NOTE: The data set WORK._SVDM1 has 218546 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

NOTE: Table WORK._SCROUT created, with 205198 rows and 3 columns.

NOTE: Table WORK._SVDM1 has been dropped.
NOTE: Table WORK._TERMS has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
      


NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 8502 observations read from the data set WORK._CLUSTERMS.
      WHERE (KEEP='Y') and (PARENT=.);
NOTE: The data set WORK._WEIGHTS has 8502 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 205198 observations read from the data set WORK._SCROUT.
NOTE: The data set WORK._SCROUT has 205198 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      


NOTE: There were 8502 observations read from the data set EMWS3.TEXTCLUSTER7_SVD_U.
NOTE: The data set EMWS3.TEXTCLUSTER7_SVD_U has 8502 observations and 70 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: Table WORK._INWEIGHTS created, with 8502 rows and 2 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 205198 observations read from the data set WORK._SCROUT.
NOTE: There were 8502 observations read from the data set EMWS3.TEXTCLUSTER7_SVD_U.
NOTE: There were 8502 observations read from the data set WORK._INWEIGHTS.
NOTE: The data set WORK._COLPRO has 673 observations and 70 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.13 seconds
      cpu time            0.07 seconds
      


NOTE: There were 674 observations read from the data set WORK._IMPORT_DS.
NOTE: The data set WORK._IMPORT_DS has 674 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: There were 673 observations read from the data set WORK._COLPRO.
NOTE: The data set WORK._COLPRO has 673 observations and 70 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 674 observations read from the data set WORK._IMPORT_DS.
NOTE: There were 673 observations read from the data set WORK._COLPRO.
NOTE: The data set EMWS3.TEXTCLUSTER7_TRAIN has 674 observations and 74 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER7_TRAIN.
NOTE: The data set EMWS3.TEXTCLUSTER7_TRAIN has 674 observations and 74 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER7_TRAIN.
NOTE: The data set EMWS3.TEXTCLUSTER7_TRAIN has 674 observations and 74 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER7_TRAIN.
NOTE: There were 11 observations read from the data set EMWS3.TEXTCLUSTER7_EMOUTSTAT.
NOTE: The data set EMWS3.TEXTCLUSTER7_TRAIN has 674 observations and 80 variables.
NOTE: PROCEDURE EMCLUS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER7_TRAIN.
NOTE: The data set EMWS3.TEXTCLUSTER7_TRAIN has 674 observations and 80 variables.
NOTE: Compressing data set EMWS3.TEXTCLUSTER7_TRAIN decreased size by 66.67 percent. 
      Compressed is 19 pages; un-compressed would require 57 pages.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.00 seconds
      


NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER7_TRAIN.
NOTE: The data set EMWS3.TEXTCLUSTER7_TRAIN has 674 observations and 80 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
      


NOTE: There were 218546 observations read from the data set WORK._FILTER_TMOUT.
NOTE: There were 16666 observations read from the data set EMWS3.TEXTFILTER5_TERMS_DATA.
      WHERE KEEP='Y';
NOTE: There were 73331 observations read from the data set EMWS3.TEXTFILTER5_TERM_STRINGS.
NOTE: The data set WORK._OUTTMUTIL has 205198 observations and 3 variables.
NOTE: PROCEDURE TMUTIL used (Total process time):
      real time           0.74 seconds
      cpu time            0.01 seconds
      


NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER7_TRAIN.
NOTE: The data set WORK._DOCDATA has 674 observations and 80 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 16666 observations read from the data set EMWS3.TEXTFILTER5_TERMS_DATA.
      WHERE KEEP='Y';
NOTE: There were 73331 observations read from the data set EMWS3.TEXTFILTER5_TERM_STRINGS.
NOTE: There were 16666 observations read from the data set EMWS3.TEXTFILTER5_TERMS.
NOTE: The data set WORK._TERMS_ has 13209 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      


NOTE: There were 13209 observations read from the data set WORK._TERMS_.
NOTE: The data set WORK._TERMS_ has 13209 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 205198 observations read from the data set WORK._OUTTMUTIL.
NOTE: The data set WORK._TMOUT_ has 205198 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      


NOTE: There were 205198 observations read from the data set WORK._TMOUT_.
NOTE: There were 13209 observations read from the data set WORK._TERMS_.
NOTE: The data set WORK._TMOUT_ has 205198 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      


NOTE: There were 674 observations read from the data set WORK._DOCDATA.
NOTE: The data set WORK._DOCS_ has 674 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: SQL view WORK._CMB has been defined.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 205198 observations read from the data set WORK._TMOUT_.
NOTE: There were 674 observations read from the data set WORK._DOCS_.
NOTE: There were 205198 observations read from the data set WORK._CMB.
NOTE: The data set WORK._TFREQ has 27073 observations and 5 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.09 seconds
      cpu time            0.04 seconds
      


NOTE: There were 205198 observations read from the data set WORK._TMOUT_.
NOTE: There were 674 observations read from the data set WORK._DOCS_.
NOTE: There were 205198 observations read from the data set WORK._CMB.
NOTE: The data set WORK._SUM has 6 observations and 4 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      


NOTE: There were 6 observations read from the data set WORK._SUM.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Table WORK._SUM has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 27073 observations read from the data set WORK._TFREQ.
NOTE: The data set WORK._TFREQ has 27073 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 27073 observations read from the data set WORK._TFREQ.
NOTE: The data set WORK._UNQT has 150 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 150 observations read from the data set WORK._UNQT.
NOTE: 86 observations with duplicate key values were deleted.
NOTE: The data set WORK._UNQT has 64 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

NOTE: Table WORK._CLCDF created, with 320 rows and 3 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

NOTE: Table WORK._UNQT has been dropped.
NOTE: Table WORK._TFREQ has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 320 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDF has 64 observations and 7 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 64 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDF has 64 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 64 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDFTR has 320 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: Table WORK._CLCDF has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 320 observations read from the data set WORK._CLCDFTR.
NOTE: The data set WORK._CLCDFTR has 320 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 320 observations read from the data set WORK._CLCDFTR.
NOTE: The data set WORK._DESC_ has 5 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Table WORK._CLCDFTR has been dropped.
NOTE: View WORK._CMB has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 5 observations read from the data set WORK._DESC_.
NOTE: The data set WORK._DESC_ has 5 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: Variable clus_desc already exists on file EMWS3.TEXTCLUSTER7_CLUSTERS.
NOTE: Table EMWS3.TEXTCLUSTER7_CLUSTERS created, with 5 rows and 74 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: Variable Resume_str already exists on file EMWS3.TEXTCLUSTER7_TRAIN.
WARNING: Variable TextCluster7_cluster_ already exists on file EMWS3.TEXTCLUSTER7_TRAIN.
NOTE: Table EMWS3.TEXTCLUSTER7_TRAIN created, with 674 rows and 80 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 674 observations read from the data set WORK._DOCDATA.
NOTE: The data set WORK._TEMPFREQTABLE has 5 observations and 3 variables.
NOTE: The PROCEDURE FREQ printed page 2.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
NOTE: Table EMWS3.TEXTCLUSTER7_CLUSTERS created, with 5 rows and 73 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 674 observations read from the data set WORK._DOCDATA.
NOTE: The data set WORK._DOCDATA has 674 observations and 80 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 674 observations read from the data set WORK._DOCDATA.
NOTE: There were 5 observations read from the data set EMWS3.TEXTCLUSTER7_CLUSTERS.
NOTE: The data set WORK._RMSCALC has 674 observations and 153 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 674 observations read from the data set WORK._RMSCALC.
NOTE: The data set WORK._MEANERR has 5 observations and 5 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 5 observations read from the data set WORK._MEANERR.
NOTE: The data set WORK._RMSSE has 5 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

WARNING: Variable _cluster_ already exists on file WORK._CLUSSTAT2.
NOTE: Table WORK._CLUSSTAT2 created, with 5 rows and 74 columns.

NOTE: Table EMWS3.TEXTCLUSTER7_CLUSTERS created, with 5 rows and 74 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 405 observations read from the data set EMWS3.TEXTFILTER5_VALIDATE.
NOTE: The data set WORK._IMPORT_DS has 405 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 16666 observations read from the data set WORK._CLUSTERMS.
      WHERE keep='Y';
NOTE: The data set WORK._TERMS has 16666 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 121692 observations read from the data set EMWS3.TEXTFILTER5_VALIDOUT.
NOTE: The data set EMWS3.TEXTFILTER5_VALIDOUT has 121692 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13209 observations read from the data set WORK._TERMS.
      WHERE PARENT not = _termnum_;
NOTE: There were 121692 observations read from the data set EMWS3.TEXTFILTER5_VALIDOUT.
NOTE: The data set WORK._SVDM1 has 121692 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

NOTE: Table WORK._SCROUT created, with 121692 rows and 3 columns.

NOTE: Table WORK._SVDM1 has been dropped.
NOTE: Table WORK._TERMS has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      


NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 8502 observations read from the data set WORK._CLUSTERMS.
      WHERE (KEEP='Y') and (PARENT=.);
NOTE: The data set WORK._WEIGHTS has 8502 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 121692 observations read from the data set WORK._SCROUT.
NOTE: The data set WORK._SCROUT has 121692 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      


NOTE: There were 8502 observations read from the data set EMWS3.TEXTCLUSTER7_SVD_U.
NOTE: The data set EMWS3.TEXTCLUSTER7_SVD_U has 8502 observations and 70 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

NOTE: Table WORK._INWEIGHTS created, with 8502 rows and 2 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 121692 observations read from the data set WORK._SCROUT.
NOTE: There were 8502 observations read from the data set EMWS3.TEXTCLUSTER7_SVD_U.
NOTE: There were 8502 observations read from the data set WORK._INWEIGHTS.
NOTE: The data set WORK._COLPRO has 405 observations and 70 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.10 seconds
      cpu time            0.06 seconds
      


NOTE: There were 405 observations read from the data set WORK._IMPORT_DS.
NOTE: The data set WORK._IMPORT_DS has 405 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 405 observations read from the data set WORK._COLPRO.
NOTE: The data set WORK._COLPRO has 405 observations and 70 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 405 observations read from the data set WORK._IMPORT_DS.
NOTE: There were 405 observations read from the data set WORK._COLPRO.
NOTE: The data set EMWS3.TEXTCLUSTER7_VALIDATE has 405 observations and 74 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 405 observations read from the data set EMWS3.TEXTCLUSTER7_VALIDATE.
NOTE: The data set EMWS3.TEXTCLUSTER7_VALIDATE has 405 observations and 74 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 405 observations read from the data set EMWS3.TEXTCLUSTER7_VALIDATE.
NOTE: The data set EMWS3.TEXTCLUSTER7_VALIDATE has 405 observations and 74 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      


NOTE: There were 405 observations read from the data set EMWS3.TEXTCLUSTER7_VALIDATE.
NOTE: There were 11 observations read from the data set EMWS3.TEXTCLUSTER7_EMOUTSTAT.
NOTE: The data set EMWS3.TEXTCLUSTER7_VALIDATE has 405 observations and 80 variables.
NOTE: PROCEDURE EMCLUS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 405 observations read from the data set EMWS3.TEXTCLUSTER7_VALIDATE.
NOTE: The data set EMWS3.TEXTCLUSTER7_VALIDATE has 405 observations and 80 variables.
NOTE: Compressing data set EMWS3.TEXTCLUSTER7_VALIDATE decreased size by 64.71 percent. 
      Compressed is 12 pages; un-compressed would require 34 pages.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      


NOTE: There were 405 observations read from the data set EMWS3.TEXTCLUSTER7_VALIDATE.
NOTE: The data set EMWS3.TEXTCLUSTER7_VALIDATE has 405 observations and 80 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: Variable Resume_str already exists on file EMWS3.TEXTCLUSTER7_VALIDATE.
WARNING: Variable TextCluster7_cluster_ already exists on file EMWS3.TEXTCLUSTER7_VALIDATE.
NOTE: Table EMWS3.TEXTCLUSTER7_VALIDATE created, with 405 rows and 80 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 274 observations read from the data set EMWS3.TEXTFILTER5_TEST.
NOTE: The data set WORK._IMPORT_DS has 274 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 16666 observations read from the data set WORK._CLUSTERMS.
      WHERE keep='Y';
NOTE: The data set WORK._TERMS has 16666 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 80503 observations read from the data set EMWS3.TEXTFILTER5_TESTOUT.
NOTE: The data set EMWS3.TEXTFILTER5_TESTOUT has 80503 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13209 observations read from the data set WORK._TERMS.
      WHERE PARENT not = _termnum_;
NOTE: There were 80503 observations read from the data set EMWS3.TEXTFILTER5_TESTOUT.
NOTE: The data set WORK._SVDM1 has 80503 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

NOTE: Table WORK._SCROUT created, with 80503 rows and 3 columns.

NOTE: Table WORK._SVDM1 has been dropped.
NOTE: Table WORK._TERMS has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.08 seconds
      cpu time            0.04 seconds
      


NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 8502 observations read from the data set WORK._CLUSTERMS.
      WHERE (KEEP='Y') and (PARENT=.);
NOTE: The data set WORK._WEIGHTS has 8502 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 80503 observations read from the data set WORK._SCROUT.
NOTE: The data set WORK._SCROUT has 80503 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      


NOTE: There were 8502 observations read from the data set EMWS3.TEXTCLUSTER7_SVD_U.
NOTE: The data set EMWS3.TEXTCLUSTER7_SVD_U has 8502 observations and 70 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: Table WORK._INWEIGHTS created, with 8502 rows and 2 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 80503 observations read from the data set WORK._SCROUT.
NOTE: There were 8502 observations read from the data set EMWS3.TEXTCLUSTER7_SVD_U.
NOTE: There were 8502 observations read from the data set WORK._INWEIGHTS.
NOTE: The data set WORK._COLPRO has 274 observations and 70 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
      


NOTE: There were 274 observations read from the data set WORK._IMPORT_DS.
NOTE: The data set WORK._IMPORT_DS has 274 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 274 observations read from the data set WORK._COLPRO.
NOTE: The data set WORK._COLPRO has 274 observations and 70 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 274 observations read from the data set WORK._IMPORT_DS.
NOTE: There were 274 observations read from the data set WORK._COLPRO.
NOTE: The data set EMWS3.TEXTCLUSTER7_TEST has 274 observations and 74 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 274 observations read from the data set EMWS3.TEXTCLUSTER7_TEST.
NOTE: The data set EMWS3.TEXTCLUSTER7_TEST has 274 observations and 74 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 274 observations read from the data set EMWS3.TEXTCLUSTER7_TEST.
NOTE: The data set EMWS3.TEXTCLUSTER7_TEST has 274 observations and 74 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 274 observations read from the data set EMWS3.TEXTCLUSTER7_TEST.
NOTE: There were 11 observations read from the data set EMWS3.TEXTCLUSTER7_EMOUTSTAT.
NOTE: The data set EMWS3.TEXTCLUSTER7_TEST has 274 observations and 80 variables.
NOTE: PROCEDURE EMCLUS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 274 observations read from the data set EMWS3.TEXTCLUSTER7_TEST.
NOTE: The data set EMWS3.TEXTCLUSTER7_TEST has 274 observations and 80 variables.
NOTE: Compressing data set EMWS3.TEXTCLUSTER7_TEST decreased size by 65.22 percent. 
      Compressed is 8 pages; un-compressed would require 23 pages.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: There were 274 observations read from the data set EMWS3.TEXTCLUSTER7_TEST.
NOTE: The data set EMWS3.TEXTCLUSTER7_TEST has 274 observations and 80 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: Variable Resume_str already exists on file EMWS3.TEXTCLUSTER7_TEST.
WARNING: Variable TextCluster7_cluster_ already exists on file EMWS3.TEXTCLUSTER7_TEST.
NOTE: Table EMWS3.TEXTCLUSTER7_TEST created, with 274 rows and 80 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The file PRE is:
      Filename=C:\Users\lahar\OneDrive\Desktop\Data Mining\Resume\Workspaces\EMWS3\TextCluster7\PRESCORECODE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=23Nov2023:22:12:47,
      Create Time=23Nov2023:22:12:47

NOTE: 13 records were written to the file PRE.
      The minimum record length was 14.
      The maximum record length was 62.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The file PRE is:
      Filename=C:\Users\lahar\OneDrive\Desktop\Data Mining\Resume\Workspaces\EMWS3\TextCluster7\PRESCORECODE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=452,
      Last Modified=23Nov2023:22:12:47,
      Create Time=23Nov2023:22:12:47

NOTE: 23 records were written to the file PRE.
      The minimum record length was 1.
      The maximum record length was 86.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Fileref TMPRE has been deassigned.

NOTE: There were 5 observations read from the data set EMWS3.TEXTCLUSTER7_CLUSTERS.
NOTE: The data set WORK._CODECLUSTERS has 5 observations and 73 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Libref TERMLOC refers to the same physical library as EMWS3.
NOTE: Libref TERMLOC was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: C:\Users\lahar\OneDrive\Desktop\Data Mining\Resume\Workspaces\EMWS3

NOTE: The file _TMSCORE is:
      Filename=C:\Users\lahar\OneDrive\Desktop\Data Mining\Resume\Workspaces\EMWS3\TextCluster7\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=23Nov2023:22:12:47,
      Create Time=23Nov2023:22:12:47

NOTE: 5 records were written to the file _TMSCORE.
      The minimum record length was 43.
      The maximum record length was 119.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Fileref _TMSCORE has been deassigned.
NOTE: Fileref TEMP has been deassigned.
19288  *------------------------------------------------------------*;
19289  * End SCORE: TextCluster7;
19290  *------------------------------------------------------------*;

19292  *------------------------------------------------------------*;
19293  * TextCluster7: Computing metadata for TRAIN data;
19294  *------------------------------------------------------------*;

20009  proc sort data = EMWS3.TextFilter5_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
20010  by TARGET KEY;
20011  run;

NOTE: There were 5 observations read from the data set EMWS3.TEXTFILTER5_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 5 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20012  proc sort data = EMWS3.TextCluster7_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
20013  by TARGET KEY;
20014  run;

NOTE: There were 4 observations read from the data set EMWS3.TEXTCLUSTER7_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20015  data EMWS3.TextCluster7_EMINFO;
20016  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
20017  by TARGET KEY;
20018  run;

NOTE: There were 5 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 4 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS3.TEXTCLUSTER7_EMINFO has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

20019  proc datasets lib=work nolist;
20020  delete TEMP_INFO SORTEDEMINFO;
20021  run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
20022  quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

