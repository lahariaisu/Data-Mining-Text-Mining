*------------------------------------------------------------*
* Report Log
Date:                November 23, 2023
Time:                22:13:06
*------------------------------------------------------------*
19721  data EMWS3.Tree9_EMOUTFIT;
19722  set EMWS3.Tree9_EMOUTFIT;
19723  length TargetLabel $200;
19724  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
19725  if upcase(TARGET) eq "CATEGORY" then TargetLabel = 'Category';
19726  run;

NOTE: There were 1 observations read from the data set EMWS3.TREE9_EMOUTFIT.
NOTE: The data set EMWS3.TREE9_EMOUTFIT has 1 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19727  proc sort data=EMWS3.Tree9_EMREPORTFIT nothreads;
19728  by TARGET;
19729  run;

NOTE: There were 8 observations read from the data set EMWS3.TREE9_EMREPORTFIT.
NOTE: The data set EMWS3.TREE9_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19730  %let _EMwarndup = 0;
19731  %let _EMtargetdup =;
19732  %let _EMASEtargetdup =;
19733  data _null_;
19734  set EMWS3.Tree9_EMOUTFIT;
19735  if .<_ASE_<0.000001 then do;
19736  call symput('_EMwarndup', '1');
19737  call symput('_EMtargetdup', target);
19738  call symput('_EMASEtargetdup', put(_ASE_, best.));
19739  end;
19740  run;

NOTE: There were 1 observations read from the data set EMWS3.TREE9_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19741  %let EMEXCEPTIONSTRING=;
19742  *------------------------------------------------------------*;
19743  * REPORT: Tree9;
19744  *------------------------------------------------------------*;
19745  %let EM_ACTION = REPORT;
19746  %let syscc = 0;
19747  %macro main;
19748  
19749    %if %upcase(&EM_ACTION) = CREATE %then %do;
19750      filename temp catalog 'sashelp.emmodl.tree_create.source';
19751      %include temp;
19752      filename temp;
19753  
19754      %em_tree_create;
19755    %end;
19756  
19757     %else
19758     %if %upcase(&EM_ACTION) = TRAIN %then %do;
19759  
19760         filename temp catalog 'sashelp.emmodl.tree_train.source';
19761         %include temp;
19762         filename temp;
19763         %em_tree_train;
19764     %end;
19765  
19766    %else
19767    %if %upcase(&EM_ACTION) = SCORE %then %do;
19768      filename temp catalog 'sashelp.emmodl.tree_score.source';
19769      %include temp;
19770      filename temp;
19771  
19772      %em_tree_score;
19773  
19774    %end;
19775  
19776    %else
19777    %if %upcase(&EM_ACTION) = REPORT %then %do;
19778  
19779         filename temp catalog 'sashelp.emmodl.tree_report.source';
19780         %include temp;
19781         filename temp;
19782  
19783         %em_tree_report;
19784     %end;
19785  
19786    %else
19787    %if %upcase(&EM_ACTION) = OPENINT %then %do;
19788  
19789         filename temp catalog 'sashelp.emmodl.tree_actions.source';
19790         %include temp;
19791         filename temp;
19792         %EM_TREE_OPENTREEVIEWER;
19793  
19794     %end;
19795  
19796    %else
19797    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
19798  
19799         filename temp catalog 'sashelp.emmodl.tree_actions.source';
19800         %include temp;
19801         filename temp;
19802         %EM_TREE_CLOSETREEVIEWER;
19803  
19804     %end;
19805  
19806  
19807     %doendm:
19808  %mend main;
19809  
19810  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
19812 +%macro em_tree_makePlotDs( multipleTar= );
19814 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19815 +  %EM_GETNAME(key=OUTNODES, type=DATA);
19816 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19817 +  %EM_GETNAME(key=OUTRULES, type=DATA);
19819 +  /* determine if validation statistics will be displayed */
19820 +  %let validflag=N;
19821 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
19822 +    /* determine if validation data exists */
19823 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
19824 +      %let validflag=Y;
19825 +    %end;
19826 +  %end;
19828 +   /* retrieve name of decmeta even in presence of multiple targets */
19829 +   %let decmeta = ;
19830 +   %if &EM_DEC_DECMETA eq %then %do;
19831 +     data _Target;
19832 +       set &em_data_variableset;
19833 +       where ROLE='TARGET' and USE in('D', 'Y');
19834 +       keep NAME;
19835 +     run;
19836 +     proc sort data=_Target;
19837 +       by NAME;
19838 +     run;
19839 +     proc sort data=EM_TARGETDECINFO;
19840 +       by TARGET;
19841 +     run;
19842 +     data _Target;
19843 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
19844 +       by NAME;
19845 +       if _a then do;
19846 +         call symput('decmeta', trim(DECMETA));
19847 +       end;
19848 +     run;
19849 +     proc delete data=_Target;run;
19850 +   %end;
19851 +   %else %let decmeta = &EM_DEC_DECMETA;
19854 +  /* retrieve targetEvent from decmeta */
19855 +  %let targetEvent=;
19856 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19857 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19858 +      data _null_;
19859 +       set &DECMETA(where=(_TYPE_="TARGET"));
19860 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
19861 +      run;
19862 +    %end;
19863 +  %end;
19865 +  /* retrieve predicted var for targetEvent from decmeta */
19866 +  %let predTarget=;
19867 +  %let predLvl=;
19868 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19869 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19870 +      data _null_;
19871 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
19872 +       call symput('predTarget', strip(VARIABLE));
19873 +       call symput('predLvl', strip(LEVEL));
19874 +      run;
19875 +    %end;
19876 +  %end;
19877 +  %else %do;
19878 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19879 +      data _null_;
19880 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
19881 +       call symput('predTarget', strip(VARIABLE));
19882 +      run;
19883 +    %end;
19884 +  %end;
19886 +  /* create BelowText value */
19887 +  data belowtext;
19888 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
19889 +    keep node belowtext;
19890 +  run;
19892 +  /* replace belowtext with variable label if it exists */
19893 +  data belowtext2;
19894 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
19895 +    keep node belowtextlbl;
19896 +  run;
19898 +  proc sort data=belowtext; by node; run;
19899 +  proc sort data=belowtext2; by node; run;
19901 +  data belowtext;
19902 +    merge belowtext belowtext2(in=_a);
19903 +    by node;
19904 +    if _a then belowtext=belowtextlbl;
19905 +    keep node belowtext;
19906 +  run;
19908 +  /* create AboveText value */
19909 +  data abovetext;
19910 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
19911 +  run;
19912 +  proc sort data=abovetext; by node numeric_value; run;
19914 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
19915 +  data abovetext;
19916 +    set abovetext(rename=(node=parent));
19917 +    by parent numeric_value;
19918 +    retain abovetext tempstring flag branch origval origchar ;
19919 +    length abovetext $256;
19920 +    length tempstring origchar $64;
19922 +    if STAT in ("INTERVAL", "ORDINAL") then do;
19923 +      if first.parent then do;
19924 +        if missing(character_value) then do;
19925 +          numeric_value = round(numeric_value, &sp_precision);
19926 +          abovetext = "< "||strip(NUMERIC_VALUE);
19927 +          branch = 1;
19928 +          origval = numeric_value;
19929 +          output;
19930 +        end;
19931 +        else do;
19932 +          abovetext = "< "||strip(CHARACTER_VALUE);
19933 +          branch = 1;
19934 +          origchar = character_value;
19935 +          output;
19936 +        end;
19938 +        if first.parent AND last.parent then do;
19939 +          if missing(character_value) then do;
19940 +            numeric_value = round(numeric_value, &sp_precision);
19941 +            branch = branch + 1;
19942 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19943 +            output;
19944 +          end;
19945 +          else do;
19946 +            branch = branch + 1;
19947 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19948 +            output;
19949 +          end;
19950 +        end;
19951 +      end;
19952 +      else if last.parent then do;
19953 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
19954 +          if missing(character_value) then do;
19955 +            numeric_value = round(numeric_value, &sp_precision);
19956 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
19957 +          end;
19958 +          else do;
19959 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
19960 +          end;
19961 +          branch = branch + 1;
19962 +          output;
19964 +          if missing(character_value) then do;
19965 +            numeric_value = round(numeric_value, &sp_precision);
19966 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19967 +          end;
19968 +          else do;
19969 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19970 +          end;
19971 +          branch = branch + 1;
19972 +          output;
19973 +        end;
19974 +        else do;
19975 +          if missing(character_value) then do;
19976 +            numeric_value = round(numeric_value, &sp_precision);
19977 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19978 +          end;
19979 +          else do;
19980 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19981 +          end;
19982 +          branch = branch + 1;
19983 +          output;
19984 +        end;
19985 +      end;
19986 +      else do;
19987 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
19988 +          if missing(character_value) then do;
19989 +            numeric_value = round(numeric_value,&sp_precision);
19990 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
19991 +            origval = numeric_value;
19992 +          end;
19993 +          else do;
19994 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
19995 +            origchar = character_value;
19996 +          end;
19997 +          branch = branch + 1;
19998 +          output;
20000 +        end;
20001 +        else do;
20002 +          if missing(character_value) then do;
20003 +            numeric_value = round(numeric_value, &sp_precision);
20004 +            abovetext = ">= "||strip(NUMERIC_VALUE);
20005 +            origval = numeric_value;
20006 +          end;
20007 +          else do;
20008 +            abovetext = ">= "||strip(CHARACTER_VALUE);
20009 +            origval = character_value;
20010 +          end;
20011 +          branch = branch + 1;
20012 +          output;
20013 +        end;
20014 +      end;
20015 +    end;
20016 +    else do;
20017 +       if first.numeric_value then do;
20018 +         flag = 0;
20019 +         abovetext = strip(CHARACTER_VALUE);
20020 +         branch = numeric_value;
20021 +         if first.numeric_value AND last.numeric_value then do;
20022 +           output;
20023 +         end;
20024 +       end;
20025 +       else if last.numeric_value then do;
20026 +         if flag=0 then do;
20027 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
20028 +           length = length(strip(tempstring));
20029 +           if length < 32 then do;
20030 +             abovetext = strip(tempstring);
20031 +           end;
20032 +           else do;
20033 +             abovetext = strip(abovetext)||", ...";
20034 +             flag = 1;
20035 +           end;
20036 +         end;
20037 +         branch = numeric_value;
20038 +         output;
20039 +       end;
20040 +       else do;
20041 +         if flag=0 then do;
20042 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
20043 +           length = length(strip(tempstring));
20044 +           if length < 32 then do;
20045 +             abovetext = strip(tempstring);
20046 +           end;
20047 +           else do;
20048 +             abovetext = strip(abovetext)||", ...";
20049 +             flag=1;
20050 +           end;
20051 +         end;
20052 +         branch = numeric_value;
20053 +       end;
20054 +    end;
20055 +    keep parent branch abovetext;
20056 +  run;
20058 +  /* Missing value to abovetext */
20059 +  data tempmissing;
20060 +    set &EM_USER_OUTRULES;
20061 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
20062 +    rename node=parent numeric_value=branch character_value=misschar;
20063 +  run;
20066 +  proc sort data=abovetext; by parent branch; run;
20067 +  proc sort data=tempmissing; by parent branch; run;
20068 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
20070 +  data tempoutnodes;
20071 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
20072 +    by parent branch;
20073 +    length traintotal validtotal 8;
20074 +    retain traintotal validtotal;
20076 +    if _a then do;
20077 +      if ^MISSING(abovetext) then do;
20078 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
20079 +      end;
20080 +      else do;
20081 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
20082 +      end;
20083 +    end;
20084 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
20086 +    if node=1 then do;
20087 +      traintotal = N;
20088 +      validtotal=VN;
20089 +    end;
20091 +    drop role rank stat misschar belowtext;
20092 +  run;
20093 +  proc sort data=tempoutnodes; by node; run;
20094 +  proc sort data=belowtext; by node; run;
20096 +  data tempoutnodes;
20097 +    merge tempoutnodes belowtext;
20098 +    by node;
20100 +  run;
20102 +  /* determine if adjusted counts exists; if so, use these vs true counts */
20103 +  %let adjusted = N;
20104 +  %let npriors = 0;
20105 +  data _null_ ;
20106 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
20107 +    if eof then do ;
20108 +      call symput("npriors" , strip(put(_N_,best.))) ;
20109 +    end;
20110 +  run;
20111 +  %if &npriors gt 0 %then %let adjusted=Y;
20114 +  /* create a table with targetUsed and targetLevel columns for each node */
20115 +  data temptarmeta;
20116 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
20117 +    %if &multipleTar eq N %then %do;
20118 +      AND USE in ('D', 'Y')
20119 +    %end;
20120 +    ));
20121 +    length TARGET $32;
20122 +    Target=name;
20123 +    keep target level;
20124 +  run;
20126 +  %if &multipleTar eq Y %then %do;
20127 +    data temptargetused;
20128 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
20129 +      keep node target;
20130 +    run;
20131 +    proc sort data=temptargetused; by target; run;
20132 +    proc sort data=temptarmeta; by target; run;
20133 +    data temptargetused;
20134 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
20135 +      by target;
20136 +      if _a and _b;
20137 +    run;
20138 +  %end;
20139 +  %else %do;
20140 +    data temptargetused;
20141 +      set &EM_USER_OUTSTATS;
20142 +      length target $32 tarlevel $10;
20143 +      target="%EM_TARGET";
20144 +      tarlevel="%EM_TARGET_LEVEL";
20145 +      keep node target tarlevel;
20146 +    run;
20147 +    proc sort data=temptargetused nodupkey; by node; run;
20148 +  %end;
20150 +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
20151 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
20152 +  proc sort data=temptargetused; by node; run;
20155 +  /* create tables for all interval targets as well as all class targets */
20156 +  data tempinterval tempclass;
20157 +    merge tempoutstats temptargetused( rename=(target=targetused));
20158 +    by node;
20159 +    %if "&multipleTar" eq "Y" %then %do;
20160 +      if ((missing(Target)) OR (target=targetused ));
20161 +    %end;
20163 +    if tarlevel="INTERVAL" then output tempinterval;
20164 +    else output tempclass;
20165 +  run;
20167 +  /* initialize intTarget and classTarget flags */
20168 +  %let em_intNobs =0;
20169 +  %let em_classNobs = 0;
20170 +  %let em_intTarget= N;
20171 +  %let em_classTarget= N;
20173 +  proc sql;
20174 +    reset noprint;
20175 +    select count(*) into :em_intNobs from tempinterval;
20176 +  quit;
20177 +  proc sql;
20178 +    reset noprint;
20179 +    select count(*) into :em_classNobs from tempclass;
20180 +  quit;
20182 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
20183 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
20185 +  /* retrieve all information for interval targets */
20186 +  %if &em_intTarget eq Y %then %do;
20188 +    /* determine if leaf variable exists */
20189 +    %let dsid=%sysfunc(open(tempinterval,i));
20190 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
20191 +    %let rc=%sysfunc(close(&dsid));
20193 +    proc transpose data=tempinterval
20194 +      %if &leafexists %then %do;
20195 +        (drop=leaf)
20196 +      %end;
20197 +      %if &validexist %then %do;
20198 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
20199 +      %end;
20200 +      %else %do;
20201 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
20202 +      %end;
20203 +      by node;
20204 +      id statname;
20205 +    run;
20206 +    data tempinterval;
20207 +      set tempinterval;
20208 +      if missing(N) then delete;
20209 +    run;
20210 +  %end;
20212 +  /* retrieve all information for class targets */
20213 +  %if &em_classTarget eq Y %then %do;
20214 +    proc sort data=tempclass; by node category; run;
20215 +    %if &validflag eq N %then %do;
20216 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
20217 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
20218 +    %end;
20219 +    %else %do;
20220 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
20221 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
20222 +    %end;
20223 +      set tempclass;
20225 +      %if &validflag eq N %then %do;
20226 +        %if "&adjusted" eq "N" %then %do;
20227 +          if statname="N" then output tempn;
20228 +        %end;
20229 +        %else %do;
20230 +          if statname="NPRIORS" then output tempn;
20231 +        %end;
20232 +        else if statname="PREDICTION" then output temppredict;
20233 +        else if statname="PROBABILITY" then output tempprob;
20234 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
20235 +        else if statname="ALTERNATIVE LOSS" then output temploss;
20236 +      %end;
20237 +      %else %do;
20238 +        %if "&adjusted" eq "N" %then %do;
20239 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
20240 +        %end;
20241 +        %else %do;
20242 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
20243 +        %end;
20244 +        else if statname="PREDICTION" then output temppredict;
20245 +        else if statname="PROBABILITY" then output tempprob;
20246 +        else if statname="VALID: PROBABILITY" then output tempvprob;
20247 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
20248 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
20249 +      %end;
20250 +    run;
20253 +    /* determine if profit/loss exists in tempprofit */
20254 +    %let em_profitflag=0;
20255 +    %let em_lossflag=0;
20256 +    proc sql;
20257 +      reset noprint;
20258 +      select count(*) into :em_profitflag from tempprofit;
20259 +    quit;
20260 +    proc sql;
20261 +      reset noprint;
20262 +      select count(*) into :em_lossflag from temploss;
20263 +    quit;
20265 +    %if &validFlag eq Y %then %do;
20266 +      proc transpose data=tempn
20267 +        %if "&adjusted" eq "N" %then %do;
20268 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
20269 +        %end;
20270 +        %else %do;
20271 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
20272 +        %end;
20273 +        by node;
20274 +        id statname;
20275 +      run;
20276 +      %if &em_profitflag ne 0 %then %do;
20277 +        proc transpose data=tempprofit out=tempprofit;
20278 +          by node category;
20279 +          id statname ;
20280 +        run;
20281 +      %end;
20282 +      %if &em_lossflag ne 0 %then %do;
20283 +        proc transpose data=temploss out=temploss;
20284 +          by node category;
20285 +          id statname ;
20286 +        run;
20287 +      %end;
20288 +      data tempprob;
20289 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
20290 +        by node
20291 +        %if &multipleTar eq Y %then %do;
20292 +          target
20293 +        %end;
20294 +        category;
20295 +      run;
20296 +    %end;
20298 +    /* store percentcorrect value */
20299 +    data temppredict;
20300 +      merge tempprob temppredict(in=_a);
20301 +      by node category;
20302 +      if _a then do;
20303 +        percentCorrect = statvalue;
20304 +        %if &validFlag eq Y %then %do;
20305 +          vpercentCorrect= vstatvalue;
20306 +        %end;
20307 +      end;
20308 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
20309 +      %if &validFlag eq Y %then %do;
20310 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
20311 +      %end;
20312 +      ;
20313 +      if missing(percentCorrect) then delete;
20314 +      drop target;
20315 +    run;
20317 +    /* build profittext */
20318 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
20319 +      data tempprofittext(keep= node profittext profitloss);
20320 +        length profittext $800 profitloss 8.;
20321 +        retain profittext profitloss;
20323 +        merge tempprob
20324 +        %if &em_profitflag ne 0 %then %do;
20325 +          tempprofit
20326 +        %end;
20327 +        %else %if &em_lossflag ne 0 %then %do;
20328 +          temploss
20329 +        %end;
20330 +        ;
20331 +        by node category;
20333 +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
20334 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
20335 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
20336 +          %let profittype = ALL;
20337 +        %end;
20339 +        /* create the profitloss variable for nodecolor if selected */
20340 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
20342 +        %if "&profittype" eq "ALL" %then %do;
20343 +          if strip(CATEGORY)="&targetEvent" then do;
20344 +            profitloss=statvalue;
20345 +          end;
20346 +          if first.node then do;
20347 +            %if &validFlag eq N %then %do;
20348 +             %if &em_profitflag ne 0 %then %do;
20349 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20350 +             %end;
20351 +             %if &em_lossflag ne 0 %then %do;
20352 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20353 +             %end;
20354 +            %end;
20355 +            %else %do;
20356 +             %if &em_profitflag ne 0 %then %do;
20357 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
20357!+;
20358 +             %end;
20359 +             %if &em_lossflag ne 0 %then %do;
20360 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
20361 +             %end;
20362 +            %end;
20363 +          end;
20364 +          else if last.node then do;
20365 +            %if &validFlag eq N %then %do;
20366 +             %if &em_profitflag ne 0 %then %do;
20367 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20368 +             %end;
20369 +             %if &em_lossflag ne 0 %then %do;
20370 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20371 +             %end;
20372 +             /*if CATEGORY="&targetEvent" then do;
20373 +               profitloss=statvalue;
20374 +             end;*/
20375 +            %end;
20376 +            %else %do;
20377 +             %if &em_profitflag ne 0 %then %do;
20378 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
20378!+14.&EM_PROPERTY_SPLITPRECISION);
20379 +                if CATEGORY="&targetEvent" then do;
20380 +                 profitloss=ALTERNATIVE_PROFIT;
20381 +                end;
20382 +             %end;
20383 +             %if &em_lossflag ne 0 %then %do;
20384 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
20384!+14.&EM_PROPERTY_SPLITPRECISION);
20385 +                if CATEGORY="&targetEvent" then do;
20386 +                  profitloss=ALTERNATIVE_LOSS;
20387 +                end;
20388 +             %end;
20389 +            %end;
20390 +            output;
20391 +          end;
20392 +          else do;
20393 +            %if &validFlag eq N %then %do;
20394 +             %if &em_profitflag ne 0 %then %do;
20395 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20396 +             %end;
20397 +             %if &em_lossflag ne 0 %then %do;
20398 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20399 +             %end;
20400 +            %end;
20401 +            %else %do;
20402 +             %if &em_profitflag ne 0 %then %do;
20403 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
20403!+14.&EM_PROPERTY_SPLITPRECISION);
20404 +             %end;
20405 +             %if &em_lossflag ne 0 %then %do;
20406 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
20406!+14.&EM_PROPERTY_SPLITPRECISION);
20407 +             %end;
20408 +            %end;
20409 +          end;
20410 +        %end;
20411 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
20412 +          if strip(CATEGORY) = "&targetevent" then do;
20413 +            %if &validFlag eq N %then %do;
20414 +             %if &em_profitflag ne 0 %then %do;
20415 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20416 +             %end;
20417 +             %if &em_lossflag ne 0 %then %do;
20418 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20419 +             %end;
20420 +             profitloss=statvalue;
20421 +            %end;
20422 +            %else %do;
20423 +             %if &em_profitflag ne 0 %then %do;
20424 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
20424!+;
20425 +                profitloss=ALTERNATIVE_PROFIT;
20426 +             %end;
20427 +             %if &em_lossflag ne 0 %then %do;
20428 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
20429 +                profitloss=ALTERNATIVE_LOSS;
20430 +             %end;
20431 +            %end;
20432 +            output;
20433 +          end;
20434 +        %end;
20435 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
20436 +          if strip(CATEGORY) = "&targetevent" then do;
20437 +            %if &validFlag eq N %then %do;
20438 +             profitloss=statvalue;
20439 +            %end;
20440 +            %else %do;
20441 +             %if &em_profitflag ne 0 %then %do;
20442 +                profitloss=ALTERNATIVE_PROFIT;
20443 +             %end;
20444 +             %if &em_lossflag ne 0 %then %do;
20445 +                profitloss=ALTERNATIVE_LOSS;
20446 +             %end;
20447 +            %end;
20448 +            output;
20449 +          end;
20450 +        %end;
20451 +      run;
20452 +    %end;
20454 +    data tempprob(keep= node probtext);
20455 +      length probtext $800;
20456 +      retain probtext;
20457 +      set tempprob ;
20458 +      by node;
20460 +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
20461 +      %let probtype = &EM_PROPERTY_TARGET;
20462 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
20463 +        %let probtype = ALL;
20464 +      %end;
20466 +      %if "&probtype" eq "ALL" %then %do;
20467 +        if first.node then do;
20468 +          %if &validFlag eq N %then %do;
20469 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20470 +          %end;
20471 +          %else %do;
20472 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20473 +          %end;
20474 +        end;
20475 +        else if last.node then do;
20476 +          %if &validFlag eq N %then %do;
20477 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20478 +          %end;
20479 +          %else %do;
20480 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20481 +          %end;
20482 +          output;
20483 +        end;
20484 +        else do;
20485 +          %if &validFlag eq N %then %do;
20486 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20487 +          %end;
20488 +          %else %do;
20489 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20490 +          %end;
20491 +        end;
20492 +      %end;
20493 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
20494 +        if strip(CATEGORY) = "&targetevent" then do;
20495 +          %if &validFlag eq N %then %do;
20496 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20497 +          %end;
20498 +          %else %do;
20499 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20500 +          %end;
20501 +          output;
20502 +        end;
20503 +      %end;
20504 +      %else %if "&probtype" eq "NONE" %then %do;
20505 +        if last.node then do;
20506 +          output;
20507 +        end;
20508 +      %end;
20509 +    run;
20510 +  %end;
20512 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
20514 +  %let oldexists=0;
20515 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
20516 +     data old_tree_plot;
20517 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
20518 +        rename nodecolor=oldnodecolor;
20519 +     run;
20521 +     proc sort data=old_tree_plot;
20522 +        by node;
20523 +     run;
20525 +     %let oldexists=1;
20526 +  %end;
20528 +  data &EM_USER_TREE_PLOT;
20529 +    length textall $800;
20530 +    merge tempoutnodes temptargetused
20532 +    %if &em_intTarget eq Y %then %do;
20533 +      tempinterval
20534 +    %end;
20536 +    %if &em_classTarget eq Y %then %do;
20538 +      %if &validFlag eq N %then %do;
20539 +        tempn(rename=(statvalue=N))
20540 +      %end;
20541 +      %else %do;
20542 +        tempn
20543 +      %end;
20545 +      temppredict tempprob
20547 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
20548 +        tempprofittext
20549 +      %end;
20550 +    %end;
20551 +    ;
20552 +    by node;
20554 +    /* build nodetext based on user selection */
20555 +    textall="";
20557 +    %if &em_intTarget eq Y %then %do;
20558 +    if tarlevel="INTERVAL" then do;
20559 +      /* Nodeid */
20560 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
20561 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
20562 +      %end;
20564 +      /* Target identifier if multiple targets are used */
20565 +      %if "&multipleTar" eq "Y" %then %do;
20566 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
20567 +      %end;
20569 +      %if &validFlag eq Y %then %do;
20570 +         /* Column labels displayed in validflag eq Y only */
20571 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
20572 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
20572!+noquote ))";
20573 +         %end;
20575 +         /* Average values */
20576 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
20577 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
20578 +         %end;
20580 +         /* RASE */
20581 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
20582 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
20583 +         %end;
20585 +         /* Count */
20586 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20587 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
20588 +         %end;
20589 +      %end;
20590 +      %else %do;
20591 +         /* Average values */
20592 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
20593 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
20594 +         %end;
20596 +         /* RASE */
20597 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
20598 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
20599 +         %end;
20601 +         /* Count */
20602 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20603 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
20604 +         %end;
20605 +      %end;
20607 +      /* nodecolor */
20608 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
20609 +        nodecolor=PREDICTION;
20610 +      %end;
20611 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
20612 +        nodecolor=RASE;
20613 +      %end;
20614 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
20615 +        nodecolor=1;
20616 +      %end;
20618 +    end;
20619 +    %end;
20620 +    %if &em_classTarget eq Y %then %do;
20621 +    if tarlevel^="INTERVAL" then  do;
20623 +      /* Nodeid */
20624 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
20625 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
20626 +      %end;
20627 +      /* Target identifier if multiple targets are used */
20628 +      %if "&multipleTar" eq "Y" %then %do;
20629 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
20630 +      %end;
20632 +      /* Predicted values */
20633 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
20634 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
20635 +      %end;
20637 +      /* Column labels displayed in validflag eq Y only */
20638 +      %if "&ValidFlag" eq "Y" %then %do;
20639 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
20640 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
20640!+noquote ))";
20641 +        %end;
20642 +      %end;
20644 +      /* Target Values */
20645 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
20646 +        textall=strip(textall)||"0A"x||strip(probtext);
20647 +      %end;
20649 +      /* include profit or loss for all target levels */
20650 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
20651 +        textall=strip(textall)||"0A"x||strip(profittext);
20652 +      %end;
20654 +      %if &validFlag eq N %then %do;
20655 +        /* Percent Correct */
20656 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
20657 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
20658 +        %end;
20660 +         /* Count */
20661 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20662 +          %if "&adjusted" eq "N" %then %do;
20663 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
20664 +          %end;
20665 +          %else %do;
20666 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
20667 +          %end;
20668 +         %end;
20669 +      %end;
20670 +      %else %do;
20671 +        /* Percent Correct */
20672 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
20673 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
20674 +        %end;
20676 +         /* Count */
20677 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20678 +          %if "&adjusted" eq "N" %then %do;
20679 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
20680 +          %end;
20681 +          %else %do;
20682 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
20683 +          %end;
20684 +         %end;
20685 +      %end;
20687 +      /* nodecolor */
20688 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
20689 +       %if &multipleTar ne Y %then %do;
20690 +        nodecolor=&predTarget;
20691 +       %end;
20692 +       %else %do;
20693 +         nodecolor=percentcorrect;
20694 +       %end;
20695 +      %end;
20696 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
20697 +        nodecolor=percentcorrect;
20698 +      %end;
20699 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
20700 +        nodecolor=1;
20701 +      %end;
20702 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
20703 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
20704 +          nodecolor=percentcorrect;
20705 +        %end;
20706 +        %else %do;
20707 +          nodecolor=profitloss;
20708 +        %end;
20709 +      %end;
20711 +    end;
20712 +    %end;
20713 +    %if &em_intTarget eq Y %then %do;
20714 +     drop  PREDICTION  TARGET TARLEVEL
20715 +     %if &ValidFlag eq Y %then %do;
20716 +         VPREDICTION
20717 +     %end;
20718 +     ;
20719 +    %end;
20720 +    %if &em_classTarget eq Y %then %do;
20721 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
20722 +     %if &ValidFlag eq Y %then %do;
20723 +         VSTATVALUE
20724 +     %end;
20725 +     ;
20726 +    %end;
20728 +  run;
20730 +  /* add leaf index information to plotds - based on primary target only*/
20731 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20732 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
20733 +      set &EM_USER_OUTSTATS;
20734 +      if ((statname="PROBABILITY"
20735 +      %if &validexist %then %do;
20736 +       or statname="VALID: PROBABILITY"
20737 +      %end;
20738 +      ) AND (CATEGORY="&TARGETEVENT")
20739 +      %if "&multipleTar" eq "Y" %then %do;
20740 +        AND (Target="%EM_TARGET")
20741 +      %end;
20742 +      );
20743 +    run;
20745 +    %if &validexist %then %do;
20746 +      proc sort data=tempprob; by node; run;
20747 +      %let vpredTarget = V%substr(&predTarget, 2);
20748 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
20749 +         by node;
20750 +         id statname;
20751 +      run;
20752 +    %end;
20753 +  %end;
20754 +  %else %do;
20755 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
20756 +      set &EM_USER_OUTSTATS;
20757 +      if ((statname="PREDICTION"
20758 +      %if &validexist %then %do;
20759 +       or statname="VALID: PREDICTION"
20760 +      %end;
20761 +      )
20762 +      %if "&multipleTar" eq "Y" %then %do;
20763 +        AND (Target="%EM_TARGET")
20764 +      %end;
20765 +      );
20766 +    run;
20767 +    %if &validexist %then %do;
20768 +      proc sort data=tempprob; by node; run;
20769 +      %let vpredTarget = V%substr(&predTarget, 2);
20770 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
20771 +         by node;
20772 +         id statname;
20773 +      run;
20774 +    %end;
20775 +  %end;
20777 +  proc sort data=tempprob; by node; run;
20778 +  data tempoutnodes;
20779 +    merge tempoutnodes tempprob;
20780 +    by node;
20781 +  run;
20783 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
20784 +  data tempnodes;
20785 +    retain traintotal validtotal;
20786 +    set tempnodes(where=(leaf ne . ));
20787 +    tprob=round(&predTarget, .01);
20788 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20789 +      percevent_train=round(tprob*100, .01);
20790 +    %end;
20791 +    %else %do;
20792 +      percevent_train=tprob;
20793 +    %end;
20795 +    perc_train=round((n/traintotal)*100, 0.01);
20796 +    /* leafwidth already has a *10 multiplier */
20797 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
20799 +    %if &validexist %then %do;
20800 +      %let vpredTarget = V%substr(&predTarget,2);
20801 +      vprob=round(&vpredTarget, .01);
20802 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20803 +        percevent_valid=round(vprob*100, .01);
20804 +      %end;
20805 +      %else %do;
20806 +        percevent_valid=vprob;
20807 +      %end;
20808 +      perc_valid=round((vn/validtotal)*100, .01);
20809 +    %end;
20811 +    index=_N_;
20812 +    keep node index tprob perc_train percevent_train
20813 +    %if &validexist %then %do;
20814 +        vprob percevent_valid perc_valid
20815 +    %end;
20816 +    ;
20817 +  run;
20818 +  proc sort data=tempnodes; by node; run;
20819 +  data &EM_USER_TREE_PLOT;
20820 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
20821 +    by node;
20822 +    if missing(node) then delete;
20823 +    %if &oldexists %then %do;
20824 +      if missing(nodecolor) then nodecolor=oldnodecolor;
20825 +      drop oldnodecolor;
20826 +    %end;
20827 +    abovetext = compbl(abovetext);
20829 +    /* add variable labels */
20830 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
20831 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
20832 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
20833 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
20834 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
20835 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
20837 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20838 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
20839 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
20840 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
20841 +          %end;
20842 +          %else %do;
20843 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
20844 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
20845 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
20846 +          %end;
20847 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
20849 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
20850 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
20851 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20852 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
20853 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
20854 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
20855 +          %end;
20856 +          %else %do;
20857 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
20858 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
20859 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
20860 +          %end;
20861 +    ;
20862 +  run;
20864 +  /* delete temporary tables */
20865 +  proc datasets lib=work nolist;
20866 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
20867 +  run;
20869 +%mend em_tree_makePlotDs;
20873 +%macro em_tree_report;
20875 +   /* report properties */
20876 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
20877 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
20878 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
20879 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
20880 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
20881 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
20882 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
20883 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
20884 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
20885 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
20886 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
20887 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
20888 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
20890 +   %let validexist=0;
20891 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
20892 +     %let validexist=1;
20893 +   %end;
20895 +   /* determine if multiple targets will be processed */
20896 +   %let em_tree_multipleTargets=N;
20897 +   %let em_tree_numTarget=1;
20898 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
20899 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
20900 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
20901 +         %let em_tree_multipleTargets=N;
20902 +      %end;
20903 +      %else %do;
20904 +        data _null_;
20905 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
20906 +          if eof then
20907 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
20908 +        run;
20910 +        %if &em_tree_numTarget gt 1 %then %do;
20911 +           %let em_tree_multipleTargets=Y;
20912 +        %end;
20913 +     %end;
20914 +   %end;
20916 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
20918 +   /* variable importance */
20919 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
20920 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
20922 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
20923 +     /* and the columns may not be generated                                                                                 */
20924 +     %let em_tree_cvexists=;
20925 +     %let em_tree_surrexists=.;
20926 +     data _null_;
20927 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
20928 +       if eof then do ;
20929 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
20930 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
20931 +       end;
20932 +     run;
20934 +     data &EM_USER_OUTIMPORT;
20935 +         set &EM_USER_OUTIMPORT;
20936 +         /* format columns based on Precison value specified */
20937 +         format importance 15.&EM_PROPERTY_PRECISION
20938 +              %if &validexist %then %do;
20939 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
20940 +              %end;
20941 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
20942 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
20943 +              %end;
20944 +         ;
20945 +     run;
20947 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
20948 +     proc print data=&EM_USER_OUTIMPORT
20949 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
20950 +          (where=((nrules>0) OR (nsurrogates>0)))
20951 +        %end;
20952 +        %else %do;
20953 +           (where=(nrules>0))
20954 +        %end;
20955 +        label noobs
20956 +        ;
20957 +     run;
20958 +     title10;
20960 +   %end;
20962 +   /* Sequence */
20963 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
20964 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
20965 +   data _null_ ;
20966 +      set &EM_USER_outseq (obs=2) end=eof ;
20967 +      if eof then do ;
20968 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
20969 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
20970 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
20971 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
20972 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
20973 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
20974 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
20975 +      end;
20976 +    run;
20978 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
20979 +      data &EM_USER_OUTSEQ;
20980 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
20981 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
20982 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20983 +           _XMISC_=_VMISC_
20984 +        %end;
20985 +        %if "&em_tree_aprof" ne "."  %then %do;
20986 +           _XAPROF_=_VAPROF_
20987 +           _XPROF_ = _VPROF_
20988 +        %end;
20989 +        %if "&em_tree_aloss" ne "."  %then %do;
20990 +           _XALOSS_=_VALOSS_
20991 +        %end;
20992 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
20993 +           _XPASE_ = _VPASE_
20994 +           _XPMISC_ = _VPMISC_
20995 +        %end;
20997 +        ));
20998 +     %end;
20999 +     %else %do;
21000 +        set &EM_USER_OUTSEQ;
21001 +     %end;
21003 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
21004 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21005 +            _MISC_   15.&EM_PROPERTY_PRECISION
21006 +         %end;
21007 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
21008 +            _PASE_  15.&EM_PROPERTY_PRECISION
21009 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
21010 +         %end;
21011 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
21012 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
21013 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21014 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
21015 +            %end;
21016 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
21017 +              _VPASE_  15.&EM_PROPERTY_PRECISION
21018 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
21019 +            %end;
21020 +         %end;
21021 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
21022 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
21023 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21024 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
21025 +            %end;
21026 +         %end;
21027 +         %if "&em_tree_seq" ne "." %then %do;
21028 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
21029 +         %end;
21030 +         %if "&em_tree_vseq" ne "." %then %do;
21031 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
21032 +         %end;
21033 +         %if "&em_tree_aprof" ne "." %then %do;
21034 +           _APROF_ 15.&EM_PROPERTY_PRECISION
21035 +           _PROF_ 15.&EM_PROPERTY_PRECISION
21036 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
21037 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
21038 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
21039 +           %end;
21040 +         %end;
21041 +         %else %if "&em_tree_aloss" ne "." %then %do;
21042 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
21043 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
21044 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
21045 +           %end;
21046 +         %end;
21047 +      ;
21048 +    run;
21049 +   %end;
21051 +   /* Observation Based Importance */
21052 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
21054 +      /* need to check for 0 obs */
21055 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
21056 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
21057 +      %let rc=%sysfunc(close(&dsid));
21059 +      %if &onobs %then %do;
21060 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
21061 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
21063 +         data &EM_USER_OUTOBSIMP;
21064 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
21065 +           if _a;
21066 +           by _INPUT1_;
21067 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
21068 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21069 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
21070 +                   %end;
21071 +                   ;
21072 +         run;
21073 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
21074 +      %end;
21075 +   %end;
21077 +  %end;
21079 +  /* create dataset to support tree diagram and icicle plot */
21080 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
21081 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
21083 +  /* display tree diagram */
21084 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
21085 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
21087 +  /* display icicle diagram */
21088 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
21089 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
21091 +  /* Leaf Statistics Plot */
21092 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
21094 +  /* print leaf information to output window */
21095 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
21097 +     proc sort data=&EM_USER_TREE_PLOT out=t;
21098 +       by descending N;
21099 +     run;
21101 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
21102 +     %local vn;
21103 +     data _null_;
21104 +       set t (obs=2) end=eof;
21105 +       if eof then do;
21106 +         call symput("vn", strip(put(vn, best.)));
21107 +       end;
21108 +     run;
21110 +     data t;
21111 +       set t;
21112 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
21113 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
21114 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
21115 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
21116 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
21117 +       %end;
21118 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
21119 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
21120 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
21121 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
21122 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
21123 +          %end;
21124 +       %end;
21125 +       ;
21126 +     run;
21128 +     /* determine if rase is found in t */
21129 +    %let dsid=%sysfunc(open(t,i));
21130 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
21131 +    %let rc=%sysfunc(close(&dsid));
21133 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
21134 +     proc print data=t noobs label;
21135 +       where tprob ne .;
21136 +       var node depth N tprob
21137 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
21138 +         %if "&vn" ne "." %then %do;
21139 +           VN
21140 +         %end;
21141 +         vprob
21142 +       %end;
21143 +       %if &raseexists %then %do;
21144 +            RASE
21145 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
21146 +              VRASE
21147 +            %end;
21148 +       %end;
21149 +       ;
21150 +     run;
21151 +     title10;
21152 +  %end;
21154 +  /* create plots that are done during training of node */
21155 +  /* display iterative plot, including reference line */
21156 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
21157 +   /* %if &nleaves eq  %then %do; */
21158 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
21159 +      data _null_;
21160 +        set &EM_USER_OUTTOPOLOGY end=eof;
21161 +        if eof then do;
21162 +          call symput('nleaves', LEAF);
21163 +        end;
21164 +      run;
21165 +   /* %end; */
21167 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
21168 +    /*%EM_REPORT(view=1, Y=_ASE_); */
21169 +  %end;
21171 +  /* display leaf statistics */
21172 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
21174 +  /* stats by node if multiple targets = Y */
21175 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
21176 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
21177 +    data &EM_USER_OUTSTATS;
21178 +      set &EM_USER_OUTSTATS;
21180 +     * if STATNAME="TARGET" then delete;
21181 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
21182 +      drop leaf;
21183 +    run;
21184 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
21186 +  %end;
21187 +  %else %do;
21188 +    /* add outstats and outdescribe to spk but not results */
21189 +    %EM_REPORT(viewtype=, key=OUTSTATS);
21190 +  %end;
21192 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE9_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 33 observations read from the data set EMWS3.TREE9_OUTIMPORT.
NOTE: The data set EMWS3.TREE9_OUTIMPORT has 33 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 5 observations read from the data set EMWS3.TREE9_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE9_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 11 observations read from the data set EMWS3.TREE9_OUTSEQ.
NOTE: The data set EMWS3.TREE9_OUTSEQ has 11 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE9_CATEGORY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE9_CATEGORY_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='TEACHER');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 6 observations read from the data set EMWS3.TREE9_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 6 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 0 observations read from the data set EMWS3.TREE9_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 6 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 6 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is empty.
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 6 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 0 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 6 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 6 observations read from the data set EMWS3.TREE9_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 6 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 6 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 6 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99   
NOTE: There were 6 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 12 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 226 observations read from the data set EMWS3.TREE9_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 6 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 12 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 12 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 6 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 6 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set EMWS3.TREE9_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 54 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 12 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 6 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 55 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 55 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 6 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 6 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 6 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 56 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 0 observations read from the data set EMWS3.TREE9_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE9_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 351 observations read from the data set EMWS3.TREE9_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 351 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 351 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 338 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 13 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 351 observations read from the data set EMWS3.TREE9_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 351 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 351 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 13 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 351 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 351 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 351 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 351 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 26 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 13 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 156 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 156 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 26 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 13 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 156 observations read from the data set WORK.TEMPPROB.
NOTE: There were 156 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 156 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 156 observations read from the data set WORK.TEMPPROB.
NOTE: There were 13 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 13 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 156 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 56 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196   
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 13 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 13 observations read from the data set WORK.TEMPN.
NOTE: There were 13 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 13 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS3.TREE9_TREE_PLOT has 13 observations and 60 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 351 observations read from the data set EMWS3.TREE9_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 26 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 26 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 26 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 26 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 13 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 13 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 13 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 13 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 56 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 13 observations and 56 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 7 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set EMWS3.TREE9_TREE_PLOT.
NOTE: There were 7 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS3.TREE9_TREE_PLOT has 13 observations and 67 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set EMWS3.TREE9_TREE_PLOT.
NOTE: The data set WORK.T has 13 observations and 67 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 13 observations and 67 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141   
NOTE: There were 13 observations read from the data set EMWS3.TREE9_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

21193  
21194  *------------------------------------------------------------*;
21195  * End REPORT: Tree9;
21196  *------------------------------------------------------------*;

21197  /* Reset EM Options */
21198  options formchar="|----|+|---+=|-/\<>*";
21199  options nocenter ls=256 ps=10000;
21200  goptions reset=all device=GIF NODISPLAY;

21201  proc sort data=WORK.EM_USER_REPORT;
21202  by ID VIEW;
21203  run;

NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21204  proc sort data=EMWS3.TextCluster9_CMeta_TRAIN out=WORK.SUBSETINMETA;
21205  by NAME;
21206  run;

NOTE: There were 47 observations read from the data set EMWS3.TEXTCLUSTER9_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 47 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21207  proc sort data=EMWS3.Tree9_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
21208  by NAME;
21209  run;

NOTE: There were 47 observations read from the data set EMWS3.TREE9_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 47 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21210  data WORK.ASSESS_META;
21211  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
21212  by NAME;
21213  run;

NOTE: There were 47 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 47 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 47 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21214  data EM_temp_assessMeta;
21215  set EMWS3.Tree9_CMeta_TRAIN;
21216  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
21217  run;

NOTE: There were 52 observations read from the data set EMWS3.TREE9_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 52 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21218  data EM_temp_assessdata;
21219  set EMWS3.Tree9_TRAIN(keep=
21220  F_Category
21221  I_Category
21222  P_CategoryADVOCATE
21223  P_CategoryBUSINESS_DEVELOPMENT
21224  P_CategoryCONSULTANT
21225  P_CategoryDESIGNER
21226  P_CategoryDIGITAL_MEDIA
21227  P_CategoryFITNESS
21228  P_CategoryHEALTHCARE
21229  P_CategoryHR
21230  P_CategoryINFORMATION_TECHNOLOGY
21231  P_CategoryOTHER
21232  P_CategorySALES
21233  P_CategoryTEACHER
21234  Q_CategoryADVOCATE
21235  Q_CategoryBUSINESS_DEVELOPMENT
21236  Q_CategoryCONSULTANT
21237  Q_CategoryDESIGNER
21238  Q_CategoryDIGITAL_MEDIA
21239  Q_CategoryFITNESS
21240  Q_CategoryHEALTHCARE
21241  Q_CategoryHR
21242  Q_CategoryINFORMATION_TECHNOLOGY
21243  Q_CategoryOTHER
21244  Q_CategorySALES
21245  Q_CategoryTEACHER
21246  R_CategoryADVOCATE
21247  R_CategoryBUSINESS_DEVELOPMENT
21248  R_CategoryCONSULTANT
21249  R_CategoryDESIGNER
21250  R_CategoryDIGITAL_MEDIA
21251  R_CategoryFITNESS
21252  R_CategoryHEALTHCARE
21253  R_CategoryHR
21254  R_CategoryINFORMATION_TECHNOLOGY
21255  R_CategoryOTHER
21256  R_CategorySALES
21257  R_CategoryTEACHER
21258  U_Category
21259  V_CategoryADVOCATE
21260  V_CategoryBUSINESS_DEVELOPMENT
21261  V_CategoryCONSULTANT
21262  V_CategoryDESIGNER
21263  V_CategoryDIGITAL_MEDIA
21264  V_CategoryFITNESS
21265  V_CategoryHEALTHCARE
21266  V_CategoryHR
21267  V_CategoryINFORMATION_TECHNOLOGY
21268  V_CategoryOTHER
21269  V_CategorySALES
21270  V_CategoryTEACHER
21271  _WARN_
21272  Category
21273  );
21274  run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS3.TREE9_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER9_TRAIN.
NOTE: There were 674 observations read from the data set EMWS3.TREE9_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 674 observations and 53 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      
















25556   data EM_temp_assessMeta;
25557   set EMWS3.Tree9_CMeta_TRAIN;
25558   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
25559   run;

NOTE: There were 52 observations read from the data set EMWS3.TREE9_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 52 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

25560   data EM_temp_assessdata;
25561   set EMWS3.Tree9_VALIDATE(keep=
25562   F_Category
25563   I_Category
25564   P_CategoryADVOCATE
25565   P_CategoryBUSINESS_DEVELOPMENT
25566   P_CategoryCONSULTANT
25567   P_CategoryDESIGNER
25568   P_CategoryDIGITAL_MEDIA
25569   P_CategoryFITNESS
25570   P_CategoryHEALTHCARE
25571   P_CategoryHR
25572   P_CategoryINFORMATION_TECHNOLOGY
25573   P_CategoryOTHER
25574   P_CategorySALES
25575   P_CategoryTEACHER
25576   Q_CategoryADVOCATE
25577   Q_CategoryBUSINESS_DEVELOPMENT
25578   Q_CategoryCONSULTANT
25579   Q_CategoryDESIGNER
25580   Q_CategoryDIGITAL_MEDIA
25581   Q_CategoryFITNESS
25582   Q_CategoryHEALTHCARE
25583   Q_CategoryHR
25584   Q_CategoryINFORMATION_TECHNOLOGY
25585   Q_CategoryOTHER
25586   Q_CategorySALES
25587   Q_CategoryTEACHER
25588   R_CategoryADVOCATE
25589   R_CategoryBUSINESS_DEVELOPMENT
25590   R_CategoryCONSULTANT
25591   R_CategoryDESIGNER
25592   R_CategoryDIGITAL_MEDIA
25593   R_CategoryFITNESS
25594   R_CategoryHEALTHCARE
25595   R_CategoryHR
25596   R_CategoryINFORMATION_TECHNOLOGY
25597   R_CategoryOTHER
25598   R_CategorySALES
25599   R_CategoryTEACHER
25600   U_Category
25601   V_CategoryADVOCATE
25602   V_CategoryBUSINESS_DEVELOPMENT
25603   V_CategoryCONSULTANT
25604   V_CategoryDESIGNER
25605   V_CategoryDIGITAL_MEDIA
25606   V_CategoryFITNESS
25607   V_CategoryHEALTHCARE
25608   V_CategoryHR
25609   V_CategoryINFORMATION_TECHNOLOGY
25610   V_CategoryOTHER
25611   V_CategorySALES
25612   V_CategoryTEACHER
25613   _WARN_
25614   Category
25615   );
25616   run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS3.TREE9_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      
NOTE: There were 405 observations read from the data set EMWS3.TEXTCLUSTER9_VALIDATE.
NOTE: There were 405 observations read from the data set EMWS3.TREE9_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 405 observations and 53 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      
















29907   %let _cn = %sysfunc(getoption(CENTER));
29908   options nocenter;
29909   proc print data=EMWS3.Tree9_EMREPORTFIT noobs label;
29910   var STAT LABEL TRAIN
29911   VALIDATE
29912   TEST
29913   ;
29914   by TARGET TARGETLABEL;
29915   title9 ' ';
29916   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
29917   run;

NOTE: There were 8 observations read from the data set EMWS3.TREE9_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

29918   title10;
29919   options &_cn;

29920   proc sort data=EMWS3.Tree9_EMCLASSIFICATION nothreads;
29921   by DATAROLE TARGET TARGETLABEL;
29922   run;

NOTE: There were 96 observations read from the data set EMWS3.TREE9_EMCLASSIFICATION.
NOTE: The data set EMWS3.TREE9_EMCLASSIFICATION has 96 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

29923   %let _cn = %sysfunc(getoption(CENTER));
29924   options nocenter;
29925   proc print data=EMWS3.Tree9_EMCLASSIFICATION noobs label;
29926   var from into pct_row pct_col count percent
29927   ;
29928   by DATAROLE TARGET TARGETLABEL;
29929   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
29930   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
29931   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
29932   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
29933   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
29934   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
29935   where _TYPE_='PREDICTION';
29936   title9 ' ';
29937   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
29938   run;

NOTE: There were 96 observations read from the data set EMWS3.TREE9_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

29939   title9;
29940   title10;
29941   options &_cn;

29942   %let _cn = %sysfunc(getoption(CENTER));
29943   options nocenter;
29944   data EMWS3.Tree9_EMEVENTREPORT;
29945   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
29946   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
29946 ! FALSEEVENT
29947   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
29948      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
29949   FALSEEVENT=0;
29950   FALSENEVENT=0;
29951   TRUEEVENT=0;
29952   TRUENEVENT=0;
29953   set EMWS3.Tree9_EMEVENTREPORT;
29954   run;

NOTE: There were 2 observations read from the data set EMWS3.TREE9_EMEVENTREPORT.
NOTE: The data set EMWS3.TREE9_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

29955   proc print data=EMWS3.Tree9_EMEVENTREPORT noobs label;
29956   title9 ' ';
29957   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
29958   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
29959   run;

NOTE: There were 2 observations read from the data set EMWS3.TREE9_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

29960   title10;
29961   options &_cn;

29962   proc datasets library=EMWS3 nolist;
29963   modify Tree9_EMRANK;
29964   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
29965   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
29966   run;

NOTE: MODIFY was successful for EMWS3.TREE9_EMRANK.DATA.
29967   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.10 seconds
      cpu time            0.03 seconds
      

29968   %let _cn = %sysfunc(getoption(CENTER));
29969   options nocenter;
29970   proc print data=EMWS3.Tree9_EMRANK label noobs;
29971   var
29972   decile gain lift liftc resp respc N _meanP_;
29973   by
29974   notsorted DATAROLE
29975   notsorted TARGET
29976   notsorted TARGETLABEL
29977   ;
29978   title9 ' ';
29979   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
29980   run;

NOTE: There were 40 observations read from the data set EMWS3.TREE9_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

29981   title10;
29982   options &_cn;

29983   proc datasets library=EMWS3 nolist;
29984   modify Tree9_EMSCOREDIST;
29985   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
29986   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
29987   run;

NOTE: MODIFY was successful for EMWS3.TREE9_EMSCOREDIST.DATA.
29988   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.10 seconds
      cpu time            0.01 seconds
      

