*------------------------------------------------------------*
* Report Log
Date:                November 23, 2023
Time:                22:13:40
*------------------------------------------------------------*
20172  data EMWS3.Tree4_EMOUTFIT;
20173  set EMWS3.Tree4_EMOUTFIT;
20174  length TargetLabel $200;
20175  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
20176  if upcase(TARGET) eq "CATEGORY" then TargetLabel = 'Category';
20177  run;

NOTE: There were 1 observations read from the data set EMWS3.TREE4_EMOUTFIT.
NOTE: The data set EMWS3.TREE4_EMOUTFIT has 1 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20178  proc sort data=EMWS3.Tree4_EMREPORTFIT nothreads;
20179  by TARGET;
20180  run;

NOTE: There were 8 observations read from the data set EMWS3.TREE4_EMREPORTFIT.
NOTE: The data set EMWS3.TREE4_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

20181  %let _EMwarndup = 0;
20182  %let _EMtargetdup =;
20183  %let _EMASEtargetdup =;
20184  data _null_;
20185  set EMWS3.Tree4_EMOUTFIT;
20186  if .<_ASE_<0.000001 then do;
20187  call symput('_EMwarndup', '1');
20188  call symput('_EMtargetdup', target);
20189  call symput('_EMASEtargetdup', put(_ASE_, best.));
20190  end;
20191  run;

NOTE: There were 1 observations read from the data set EMWS3.TREE4_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20192  %let EMEXCEPTIONSTRING=;
20193  *------------------------------------------------------------*;
20194  * REPORT: Tree4;
20195  *------------------------------------------------------------*;
20196  %let EM_ACTION = REPORT;
20197  %let syscc = 0;
20198  %macro main;
20199  
20200    %if %upcase(&EM_ACTION) = CREATE %then %do;
20201      filename temp catalog 'sashelp.emmodl.tree_create.source';
20202      %include temp;
20203      filename temp;
20204  
20205      %em_tree_create;
20206    %end;
20207  
20208     %else
20209     %if %upcase(&EM_ACTION) = TRAIN %then %do;
20210  
20211         filename temp catalog 'sashelp.emmodl.tree_train.source';
20212         %include temp;
20213         filename temp;
20214         %em_tree_train;
20215     %end;
20216  
20217    %else
20218    %if %upcase(&EM_ACTION) = SCORE %then %do;
20219      filename temp catalog 'sashelp.emmodl.tree_score.source';
20220      %include temp;
20221      filename temp;
20222  
20223      %em_tree_score;
20224  
20225    %end;
20226  
20227    %else
20228    %if %upcase(&EM_ACTION) = REPORT %then %do;
20229  
20230         filename temp catalog 'sashelp.emmodl.tree_report.source';
20231         %include temp;
20232         filename temp;
20233  
20234         %em_tree_report;
20235     %end;
20236  
20237    %else
20238    %if %upcase(&EM_ACTION) = OPENINT %then %do;
20239  
20240         filename temp catalog 'sashelp.emmodl.tree_actions.source';
20241         %include temp;
20242         filename temp;
20243         %EM_TREE_OPENTREEVIEWER;
20244  
20245     %end;
20246  
20247    %else
20248    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
20249  
20250         filename temp catalog 'sashelp.emmodl.tree_actions.source';
20251         %include temp;
20252         filename temp;
20253         %EM_TREE_CLOSETREEVIEWER;
20254  
20255     %end;
20256  
20257  
20258     %doendm:
20259  %mend main;
20260  
20261  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
20263 +%macro em_tree_makePlotDs( multipleTar= );
20265 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
20266 +  %EM_GETNAME(key=OUTNODES, type=DATA);
20267 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
20268 +  %EM_GETNAME(key=OUTRULES, type=DATA);
20270 +  /* determine if validation statistics will be displayed */
20271 +  %let validflag=N;
20272 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
20273 +    /* determine if validation data exists */
20274 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
20275 +      %let validflag=Y;
20276 +    %end;
20277 +  %end;
20279 +   /* retrieve name of decmeta even in presence of multiple targets */
20280 +   %let decmeta = ;
20281 +   %if &EM_DEC_DECMETA eq %then %do;
20282 +     data _Target;
20283 +       set &em_data_variableset;
20284 +       where ROLE='TARGET' and USE in('D', 'Y');
20285 +       keep NAME;
20286 +     run;
20287 +     proc sort data=_Target;
20288 +       by NAME;
20289 +     run;
20290 +     proc sort data=EM_TARGETDECINFO;
20291 +       by TARGET;
20292 +     run;
20293 +     data _Target;
20294 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
20295 +       by NAME;
20296 +       if _a then do;
20297 +         call symput('decmeta', trim(DECMETA));
20298 +       end;
20299 +     run;
20300 +     proc delete data=_Target;run;
20301 +   %end;
20302 +   %else %let decmeta = &EM_DEC_DECMETA;
20305 +  /* retrieve targetEvent from decmeta */
20306 +  %let targetEvent=;
20307 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20308 +    %if %sysfunc(exist(&DECMETA)) %then %do;
20309 +      data _null_;
20310 +       set &DECMETA(where=(_TYPE_="TARGET"));
20311 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
20312 +      run;
20313 +    %end;
20314 +  %end;
20316 +  /* retrieve predicted var for targetEvent from decmeta */
20317 +  %let predTarget=;
20318 +  %let predLvl=;
20319 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20320 +    %if %sysfunc(exist(&DECMETA)) %then %do;
20321 +      data _null_;
20322 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
20323 +       call symput('predTarget', strip(VARIABLE));
20324 +       call symput('predLvl', strip(LEVEL));
20325 +      run;
20326 +    %end;
20327 +  %end;
20328 +  %else %do;
20329 +    %if %sysfunc(exist(&DECMETA)) %then %do;
20330 +      data _null_;
20331 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
20332 +       call symput('predTarget', strip(VARIABLE));
20333 +      run;
20334 +    %end;
20335 +  %end;
20337 +  /* create BelowText value */
20338 +  data belowtext;
20339 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
20340 +    keep node belowtext;
20341 +  run;
20343 +  /* replace belowtext with variable label if it exists */
20344 +  data belowtext2;
20345 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
20346 +    keep node belowtextlbl;
20347 +  run;
20349 +  proc sort data=belowtext; by node; run;
20350 +  proc sort data=belowtext2; by node; run;
20352 +  data belowtext;
20353 +    merge belowtext belowtext2(in=_a);
20354 +    by node;
20355 +    if _a then belowtext=belowtextlbl;
20356 +    keep node belowtext;
20357 +  run;
20359 +  /* create AboveText value */
20360 +  data abovetext;
20361 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
20362 +  run;
20363 +  proc sort data=abovetext; by node numeric_value; run;
20365 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
20366 +  data abovetext;
20367 +    set abovetext(rename=(node=parent));
20368 +    by parent numeric_value;
20369 +    retain abovetext tempstring flag branch origval origchar ;
20370 +    length abovetext $256;
20371 +    length tempstring origchar $64;
20373 +    if STAT in ("INTERVAL", "ORDINAL") then do;
20374 +      if first.parent then do;
20375 +        if missing(character_value) then do;
20376 +          numeric_value = round(numeric_value, &sp_precision);
20377 +          abovetext = "< "||strip(NUMERIC_VALUE);
20378 +          branch = 1;
20379 +          origval = numeric_value;
20380 +          output;
20381 +        end;
20382 +        else do;
20383 +          abovetext = "< "||strip(CHARACTER_VALUE);
20384 +          branch = 1;
20385 +          origchar = character_value;
20386 +          output;
20387 +        end;
20389 +        if first.parent AND last.parent then do;
20390 +          if missing(character_value) then do;
20391 +            numeric_value = round(numeric_value, &sp_precision);
20392 +            branch = branch + 1;
20393 +            abovetext = ">= "||strip(NUMERIC_VALUE);
20394 +            output;
20395 +          end;
20396 +          else do;
20397 +            branch = branch + 1;
20398 +            abovetext = ">= "||strip(CHARACTER_VALUE);
20399 +            output;
20400 +          end;
20401 +        end;
20402 +      end;
20403 +      else if last.parent then do;
20404 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
20405 +          if missing(character_value) then do;
20406 +            numeric_value = round(numeric_value, &sp_precision);
20407 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
20408 +          end;
20409 +          else do;
20410 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
20411 +          end;
20412 +          branch = branch + 1;
20413 +          output;
20415 +          if missing(character_value) then do;
20416 +            numeric_value = round(numeric_value, &sp_precision);
20417 +            abovetext = ">= "||strip(NUMERIC_VALUE);
20418 +          end;
20419 +          else do;
20420 +            abovetext = ">= "||strip(CHARACTER_VALUE);
20421 +          end;
20422 +          branch = branch + 1;
20423 +          output;
20424 +        end;
20425 +        else do;
20426 +          if missing(character_value) then do;
20427 +            numeric_value = round(numeric_value, &sp_precision);
20428 +            abovetext = ">= "||strip(NUMERIC_VALUE);
20429 +          end;
20430 +          else do;
20431 +            abovetext = ">= "||strip(CHARACTER_VALUE);
20432 +          end;
20433 +          branch = branch + 1;
20434 +          output;
20435 +        end;
20436 +      end;
20437 +      else do;
20438 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
20439 +          if missing(character_value) then do;
20440 +            numeric_value = round(numeric_value,&sp_precision);
20441 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
20442 +            origval = numeric_value;
20443 +          end;
20444 +          else do;
20445 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
20446 +            origchar = character_value;
20447 +          end;
20448 +          branch = branch + 1;
20449 +          output;
20451 +        end;
20452 +        else do;
20453 +          if missing(character_value) then do;
20454 +            numeric_value = round(numeric_value, &sp_precision);
20455 +            abovetext = ">= "||strip(NUMERIC_VALUE);
20456 +            origval = numeric_value;
20457 +          end;
20458 +          else do;
20459 +            abovetext = ">= "||strip(CHARACTER_VALUE);
20460 +            origval = character_value;
20461 +          end;
20462 +          branch = branch + 1;
20463 +          output;
20464 +        end;
20465 +      end;
20466 +    end;
20467 +    else do;
20468 +       if first.numeric_value then do;
20469 +         flag = 0;
20470 +         abovetext = strip(CHARACTER_VALUE);
20471 +         branch = numeric_value;
20472 +         if first.numeric_value AND last.numeric_value then do;
20473 +           output;
20474 +         end;
20475 +       end;
20476 +       else if last.numeric_value then do;
20477 +         if flag=0 then do;
20478 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
20479 +           length = length(strip(tempstring));
20480 +           if length < 32 then do;
20481 +             abovetext = strip(tempstring);
20482 +           end;
20483 +           else do;
20484 +             abovetext = strip(abovetext)||", ...";
20485 +             flag = 1;
20486 +           end;
20487 +         end;
20488 +         branch = numeric_value;
20489 +         output;
20490 +       end;
20491 +       else do;
20492 +         if flag=0 then do;
20493 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
20494 +           length = length(strip(tempstring));
20495 +           if length < 32 then do;
20496 +             abovetext = strip(tempstring);
20497 +           end;
20498 +           else do;
20499 +             abovetext = strip(abovetext)||", ...";
20500 +             flag=1;
20501 +           end;
20502 +         end;
20503 +         branch = numeric_value;
20504 +       end;
20505 +    end;
20506 +    keep parent branch abovetext;
20507 +  run;
20509 +  /* Missing value to abovetext */
20510 +  data tempmissing;
20511 +    set &EM_USER_OUTRULES;
20512 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
20513 +    rename node=parent numeric_value=branch character_value=misschar;
20514 +  run;
20517 +  proc sort data=abovetext; by parent branch; run;
20518 +  proc sort data=tempmissing; by parent branch; run;
20519 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
20521 +  data tempoutnodes;
20522 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
20523 +    by parent branch;
20524 +    length traintotal validtotal 8;
20525 +    retain traintotal validtotal;
20527 +    if _a then do;
20528 +      if ^MISSING(abovetext) then do;
20529 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
20530 +      end;
20531 +      else do;
20532 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
20533 +      end;
20534 +    end;
20535 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
20537 +    if node=1 then do;
20538 +      traintotal = N;
20539 +      validtotal=VN;
20540 +    end;
20542 +    drop role rank stat misschar belowtext;
20543 +  run;
20544 +  proc sort data=tempoutnodes; by node; run;
20545 +  proc sort data=belowtext; by node; run;
20547 +  data tempoutnodes;
20548 +    merge tempoutnodes belowtext;
20549 +    by node;
20551 +  run;
20553 +  /* determine if adjusted counts exists; if so, use these vs true counts */
20554 +  %let adjusted = N;
20555 +  %let npriors = 0;
20556 +  data _null_ ;
20557 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
20558 +    if eof then do ;
20559 +      call symput("npriors" , strip(put(_N_,best.))) ;
20560 +    end;
20561 +  run;
20562 +  %if &npriors gt 0 %then %let adjusted=Y;
20565 +  /* create a table with targetUsed and targetLevel columns for each node */
20566 +  data temptarmeta;
20567 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
20568 +    %if &multipleTar eq N %then %do;
20569 +      AND USE in ('D', 'Y')
20570 +    %end;
20571 +    ));
20572 +    length TARGET $32;
20573 +    Target=name;
20574 +    keep target level;
20575 +  run;
20577 +  %if &multipleTar eq Y %then %do;
20578 +    data temptargetused;
20579 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
20580 +      keep node target;
20581 +    run;
20582 +    proc sort data=temptargetused; by target; run;
20583 +    proc sort data=temptarmeta; by target; run;
20584 +    data temptargetused;
20585 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
20586 +      by target;
20587 +      if _a and _b;
20588 +    run;
20589 +  %end;
20590 +  %else %do;
20591 +    data temptargetused;
20592 +      set &EM_USER_OUTSTATS;
20593 +      length target $32 tarlevel $10;
20594 +      target="%EM_TARGET";
20595 +      tarlevel="%EM_TARGET_LEVEL";
20596 +      keep node target tarlevel;
20597 +    run;
20598 +    proc sort data=temptargetused nodupkey; by node; run;
20599 +  %end;
20601 +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
20602 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
20603 +  proc sort data=temptargetused; by node; run;
20606 +  /* create tables for all interval targets as well as all class targets */
20607 +  data tempinterval tempclass;
20608 +    merge tempoutstats temptargetused( rename=(target=targetused));
20609 +    by node;
20610 +    %if "&multipleTar" eq "Y" %then %do;
20611 +      if ((missing(Target)) OR (target=targetused ));
20612 +    %end;
20614 +    if tarlevel="INTERVAL" then output tempinterval;
20615 +    else output tempclass;
20616 +  run;
20618 +  /* initialize intTarget and classTarget flags */
20619 +  %let em_intNobs =0;
20620 +  %let em_classNobs = 0;
20621 +  %let em_intTarget= N;
20622 +  %let em_classTarget= N;
20624 +  proc sql;
20625 +    reset noprint;
20626 +    select count(*) into :em_intNobs from tempinterval;
20627 +  quit;
20628 +  proc sql;
20629 +    reset noprint;
20630 +    select count(*) into :em_classNobs from tempclass;
20631 +  quit;
20633 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
20634 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
20636 +  /* retrieve all information for interval targets */
20637 +  %if &em_intTarget eq Y %then %do;
20639 +    /* determine if leaf variable exists */
20640 +    %let dsid=%sysfunc(open(tempinterval,i));
20641 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
20642 +    %let rc=%sysfunc(close(&dsid));
20644 +    proc transpose data=tempinterval
20645 +      %if &leafexists %then %do;
20646 +        (drop=leaf)
20647 +      %end;
20648 +      %if &validexist %then %do;
20649 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
20650 +      %end;
20651 +      %else %do;
20652 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
20653 +      %end;
20654 +      by node;
20655 +      id statname;
20656 +    run;
20657 +    data tempinterval;
20658 +      set tempinterval;
20659 +      if missing(N) then delete;
20660 +    run;
20661 +  %end;
20663 +  /* retrieve all information for class targets */
20664 +  %if &em_classTarget eq Y %then %do;
20665 +    proc sort data=tempclass; by node category; run;
20666 +    %if &validflag eq N %then %do;
20667 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
20668 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
20669 +    %end;
20670 +    %else %do;
20671 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
20672 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
20673 +    %end;
20674 +      set tempclass;
20676 +      %if &validflag eq N %then %do;
20677 +        %if "&adjusted" eq "N" %then %do;
20678 +          if statname="N" then output tempn;
20679 +        %end;
20680 +        %else %do;
20681 +          if statname="NPRIORS" then output tempn;
20682 +        %end;
20683 +        else if statname="PREDICTION" then output temppredict;
20684 +        else if statname="PROBABILITY" then output tempprob;
20685 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
20686 +        else if statname="ALTERNATIVE LOSS" then output temploss;
20687 +      %end;
20688 +      %else %do;
20689 +        %if "&adjusted" eq "N" %then %do;
20690 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
20691 +        %end;
20692 +        %else %do;
20693 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
20694 +        %end;
20695 +        else if statname="PREDICTION" then output temppredict;
20696 +        else if statname="PROBABILITY" then output tempprob;
20697 +        else if statname="VALID: PROBABILITY" then output tempvprob;
20698 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
20699 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
20700 +      %end;
20701 +    run;
20704 +    /* determine if profit/loss exists in tempprofit */
20705 +    %let em_profitflag=0;
20706 +    %let em_lossflag=0;
20707 +    proc sql;
20708 +      reset noprint;
20709 +      select count(*) into :em_profitflag from tempprofit;
20710 +    quit;
20711 +    proc sql;
20712 +      reset noprint;
20713 +      select count(*) into :em_lossflag from temploss;
20714 +    quit;
20716 +    %if &validFlag eq Y %then %do;
20717 +      proc transpose data=tempn
20718 +        %if "&adjusted" eq "N" %then %do;
20719 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
20720 +        %end;
20721 +        %else %do;
20722 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
20723 +        %end;
20724 +        by node;
20725 +        id statname;
20726 +      run;
20727 +      %if &em_profitflag ne 0 %then %do;
20728 +        proc transpose data=tempprofit out=tempprofit;
20729 +          by node category;
20730 +          id statname ;
20731 +        run;
20732 +      %end;
20733 +      %if &em_lossflag ne 0 %then %do;
20734 +        proc transpose data=temploss out=temploss;
20735 +          by node category;
20736 +          id statname ;
20737 +        run;
20738 +      %end;
20739 +      data tempprob;
20740 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
20741 +        by node
20742 +        %if &multipleTar eq Y %then %do;
20743 +          target
20744 +        %end;
20745 +        category;
20746 +      run;
20747 +    %end;
20749 +    /* store percentcorrect value */
20750 +    data temppredict;
20751 +      merge tempprob temppredict(in=_a);
20752 +      by node category;
20753 +      if _a then do;
20754 +        percentCorrect = statvalue;
20755 +        %if &validFlag eq Y %then %do;
20756 +          vpercentCorrect= vstatvalue;
20757 +        %end;
20758 +      end;
20759 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
20760 +      %if &validFlag eq Y %then %do;
20761 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
20762 +      %end;
20763 +      ;
20764 +      if missing(percentCorrect) then delete;
20765 +      drop target;
20766 +    run;
20768 +    /* build profittext */
20769 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
20770 +      data tempprofittext(keep= node profittext profitloss);
20771 +        length profittext $800 profitloss 8.;
20772 +        retain profittext profitloss;
20774 +        merge tempprob
20775 +        %if &em_profitflag ne 0 %then %do;
20776 +          tempprofit
20777 +        %end;
20778 +        %else %if &em_lossflag ne 0 %then %do;
20779 +          temploss
20780 +        %end;
20781 +        ;
20782 +        by node category;
20784 +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
20785 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
20786 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
20787 +          %let profittype = ALL;
20788 +        %end;
20790 +        /* create the profitloss variable for nodecolor if selected */
20791 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
20793 +        %if "&profittype" eq "ALL" %then %do;
20794 +          if strip(CATEGORY)="&targetEvent" then do;
20795 +            profitloss=statvalue;
20796 +          end;
20797 +          if first.node then do;
20798 +            %if &validFlag eq N %then %do;
20799 +             %if &em_profitflag ne 0 %then %do;
20800 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20801 +             %end;
20802 +             %if &em_lossflag ne 0 %then %do;
20803 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20804 +             %end;
20805 +            %end;
20806 +            %else %do;
20807 +             %if &em_profitflag ne 0 %then %do;
20808 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
20808!+;
20809 +             %end;
20810 +             %if &em_lossflag ne 0 %then %do;
20811 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
20812 +             %end;
20813 +            %end;
20814 +          end;
20815 +          else if last.node then do;
20816 +            %if &validFlag eq N %then %do;
20817 +             %if &em_profitflag ne 0 %then %do;
20818 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20819 +             %end;
20820 +             %if &em_lossflag ne 0 %then %do;
20821 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20822 +             %end;
20823 +             /*if CATEGORY="&targetEvent" then do;
20824 +               profitloss=statvalue;
20825 +             end;*/
20826 +            %end;
20827 +            %else %do;
20828 +             %if &em_profitflag ne 0 %then %do;
20829 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
20829!+14.&EM_PROPERTY_SPLITPRECISION);
20830 +                if CATEGORY="&targetEvent" then do;
20831 +                 profitloss=ALTERNATIVE_PROFIT;
20832 +                end;
20833 +             %end;
20834 +             %if &em_lossflag ne 0 %then %do;
20835 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
20835!+14.&EM_PROPERTY_SPLITPRECISION);
20836 +                if CATEGORY="&targetEvent" then do;
20837 +                  profitloss=ALTERNATIVE_LOSS;
20838 +                end;
20839 +             %end;
20840 +            %end;
20841 +            output;
20842 +          end;
20843 +          else do;
20844 +            %if &validFlag eq N %then %do;
20845 +             %if &em_profitflag ne 0 %then %do;
20846 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20847 +             %end;
20848 +             %if &em_lossflag ne 0 %then %do;
20849 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20850 +             %end;
20851 +            %end;
20852 +            %else %do;
20853 +             %if &em_profitflag ne 0 %then %do;
20854 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
20854!+14.&EM_PROPERTY_SPLITPRECISION);
20855 +             %end;
20856 +             %if &em_lossflag ne 0 %then %do;
20857 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
20857!+14.&EM_PROPERTY_SPLITPRECISION);
20858 +             %end;
20859 +            %end;
20860 +          end;
20861 +        %end;
20862 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
20863 +          if strip(CATEGORY) = "&targetevent" then do;
20864 +            %if &validFlag eq N %then %do;
20865 +             %if &em_profitflag ne 0 %then %do;
20866 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20867 +             %end;
20868 +             %if &em_lossflag ne 0 %then %do;
20869 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20870 +             %end;
20871 +             profitloss=statvalue;
20872 +            %end;
20873 +            %else %do;
20874 +             %if &em_profitflag ne 0 %then %do;
20875 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
20875!+;
20876 +                profitloss=ALTERNATIVE_PROFIT;
20877 +             %end;
20878 +             %if &em_lossflag ne 0 %then %do;
20879 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
20880 +                profitloss=ALTERNATIVE_LOSS;
20881 +             %end;
20882 +            %end;
20883 +            output;
20884 +          end;
20885 +        %end;
20886 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
20887 +          if strip(CATEGORY) = "&targetevent" then do;
20888 +            %if &validFlag eq N %then %do;
20889 +             profitloss=statvalue;
20890 +            %end;
20891 +            %else %do;
20892 +             %if &em_profitflag ne 0 %then %do;
20893 +                profitloss=ALTERNATIVE_PROFIT;
20894 +             %end;
20895 +             %if &em_lossflag ne 0 %then %do;
20896 +                profitloss=ALTERNATIVE_LOSS;
20897 +             %end;
20898 +            %end;
20899 +            output;
20900 +          end;
20901 +        %end;
20902 +      run;
20903 +    %end;
20905 +    data tempprob(keep= node probtext);
20906 +      length probtext $800;
20907 +      retain probtext;
20908 +      set tempprob ;
20909 +      by node;
20911 +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
20912 +      %let probtype = &EM_PROPERTY_TARGET;
20913 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
20914 +        %let probtype = ALL;
20915 +      %end;
20917 +      %if "&probtype" eq "ALL" %then %do;
20918 +        if first.node then do;
20919 +          %if &validFlag eq N %then %do;
20920 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20921 +          %end;
20922 +          %else %do;
20923 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20924 +          %end;
20925 +        end;
20926 +        else if last.node then do;
20927 +          %if &validFlag eq N %then %do;
20928 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20929 +          %end;
20930 +          %else %do;
20931 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20932 +          %end;
20933 +          output;
20934 +        end;
20935 +        else do;
20936 +          %if &validFlag eq N %then %do;
20937 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20938 +          %end;
20939 +          %else %do;
20940 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20941 +          %end;
20942 +        end;
20943 +      %end;
20944 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
20945 +        if strip(CATEGORY) = "&targetevent" then do;
20946 +          %if &validFlag eq N %then %do;
20947 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20948 +          %end;
20949 +          %else %do;
20950 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20951 +          %end;
20952 +          output;
20953 +        end;
20954 +      %end;
20955 +      %else %if "&probtype" eq "NONE" %then %do;
20956 +        if last.node then do;
20957 +          output;
20958 +        end;
20959 +      %end;
20960 +    run;
20961 +  %end;
20963 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
20965 +  %let oldexists=0;
20966 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
20967 +     data old_tree_plot;
20968 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
20969 +        rename nodecolor=oldnodecolor;
20970 +     run;
20972 +     proc sort data=old_tree_plot;
20973 +        by node;
20974 +     run;
20976 +     %let oldexists=1;
20977 +  %end;
20979 +  data &EM_USER_TREE_PLOT;
20980 +    length textall $800;
20981 +    merge tempoutnodes temptargetused
20983 +    %if &em_intTarget eq Y %then %do;
20984 +      tempinterval
20985 +    %end;
20987 +    %if &em_classTarget eq Y %then %do;
20989 +      %if &validFlag eq N %then %do;
20990 +        tempn(rename=(statvalue=N))
20991 +      %end;
20992 +      %else %do;
20993 +        tempn
20994 +      %end;
20996 +      temppredict tempprob
20998 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
20999 +        tempprofittext
21000 +      %end;
21001 +    %end;
21002 +    ;
21003 +    by node;
21005 +    /* build nodetext based on user selection */
21006 +    textall="";
21008 +    %if &em_intTarget eq Y %then %do;
21009 +    if tarlevel="INTERVAL" then do;
21010 +      /* Nodeid */
21011 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
21012 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
21013 +      %end;
21015 +      /* Target identifier if multiple targets are used */
21016 +      %if "&multipleTar" eq "Y" %then %do;
21017 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
21018 +      %end;
21020 +      %if &validFlag eq Y %then %do;
21021 +         /* Column labels displayed in validflag eq Y only */
21022 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
21023 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
21023!+noquote ))";
21024 +         %end;
21026 +         /* Average values */
21027 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
21028 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
21029 +         %end;
21031 +         /* RASE */
21032 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
21033 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
21034 +         %end;
21036 +         /* Count */
21037 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
21038 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
21039 +         %end;
21040 +      %end;
21041 +      %else %do;
21042 +         /* Average values */
21043 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
21044 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
21045 +         %end;
21047 +         /* RASE */
21048 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
21049 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
21050 +         %end;
21052 +         /* Count */
21053 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
21054 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
21055 +         %end;
21056 +      %end;
21058 +      /* nodecolor */
21059 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
21060 +        nodecolor=PREDICTION;
21061 +      %end;
21062 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
21063 +        nodecolor=RASE;
21064 +      %end;
21065 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
21066 +        nodecolor=1;
21067 +      %end;
21069 +    end;
21070 +    %end;
21071 +    %if &em_classTarget eq Y %then %do;
21072 +    if tarlevel^="INTERVAL" then  do;
21074 +      /* Nodeid */
21075 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
21076 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
21077 +      %end;
21078 +      /* Target identifier if multiple targets are used */
21079 +      %if "&multipleTar" eq "Y" %then %do;
21080 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
21081 +      %end;
21083 +      /* Predicted values */
21084 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
21085 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
21086 +      %end;
21088 +      /* Column labels displayed in validflag eq Y only */
21089 +      %if "&ValidFlag" eq "Y" %then %do;
21090 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
21091 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
21091!+noquote ))";
21092 +        %end;
21093 +      %end;
21095 +      /* Target Values */
21096 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
21097 +        textall=strip(textall)||"0A"x||strip(probtext);
21098 +      %end;
21100 +      /* include profit or loss for all target levels */
21101 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
21102 +        textall=strip(textall)||"0A"x||strip(profittext);
21103 +      %end;
21105 +      %if &validFlag eq N %then %do;
21106 +        /* Percent Correct */
21107 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
21108 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
21109 +        %end;
21111 +         /* Count */
21112 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
21113 +          %if "&adjusted" eq "N" %then %do;
21114 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
21115 +          %end;
21116 +          %else %do;
21117 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
21118 +          %end;
21119 +         %end;
21120 +      %end;
21121 +      %else %do;
21122 +        /* Percent Correct */
21123 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
21124 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
21125 +        %end;
21127 +         /* Count */
21128 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
21129 +          %if "&adjusted" eq "N" %then %do;
21130 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
21131 +          %end;
21132 +          %else %do;
21133 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
21134 +          %end;
21135 +         %end;
21136 +      %end;
21138 +      /* nodecolor */
21139 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
21140 +       %if &multipleTar ne Y %then %do;
21141 +        nodecolor=&predTarget;
21142 +       %end;
21143 +       %else %do;
21144 +         nodecolor=percentcorrect;
21145 +       %end;
21146 +      %end;
21147 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
21148 +        nodecolor=percentcorrect;
21149 +      %end;
21150 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
21151 +        nodecolor=1;
21152 +      %end;
21153 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
21154 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
21155 +          nodecolor=percentcorrect;
21156 +        %end;
21157 +        %else %do;
21158 +          nodecolor=profitloss;
21159 +        %end;
21160 +      %end;
21162 +    end;
21163 +    %end;
21164 +    %if &em_intTarget eq Y %then %do;
21165 +     drop  PREDICTION  TARGET TARLEVEL
21166 +     %if &ValidFlag eq Y %then %do;
21167 +         VPREDICTION
21168 +     %end;
21169 +     ;
21170 +    %end;
21171 +    %if &em_classTarget eq Y %then %do;
21172 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
21173 +     %if &ValidFlag eq Y %then %do;
21174 +         VSTATVALUE
21175 +     %end;
21176 +     ;
21177 +    %end;
21179 +  run;
21181 +  /* add leaf index information to plotds - based on primary target only*/
21182 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21183 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
21184 +      set &EM_USER_OUTSTATS;
21185 +      if ((statname="PROBABILITY"
21186 +      %if &validexist %then %do;
21187 +       or statname="VALID: PROBABILITY"
21188 +      %end;
21189 +      ) AND (CATEGORY="&TARGETEVENT")
21190 +      %if "&multipleTar" eq "Y" %then %do;
21191 +        AND (Target="%EM_TARGET")
21192 +      %end;
21193 +      );
21194 +    run;
21196 +    %if &validexist %then %do;
21197 +      proc sort data=tempprob; by node; run;
21198 +      %let vpredTarget = V%substr(&predTarget, 2);
21199 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
21200 +         by node;
21201 +         id statname;
21202 +      run;
21203 +    %end;
21204 +  %end;
21205 +  %else %do;
21206 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
21207 +      set &EM_USER_OUTSTATS;
21208 +      if ((statname="PREDICTION"
21209 +      %if &validexist %then %do;
21210 +       or statname="VALID: PREDICTION"
21211 +      %end;
21212 +      )
21213 +      %if "&multipleTar" eq "Y" %then %do;
21214 +        AND (Target="%EM_TARGET")
21215 +      %end;
21216 +      );
21217 +    run;
21218 +    %if &validexist %then %do;
21219 +      proc sort data=tempprob; by node; run;
21220 +      %let vpredTarget = V%substr(&predTarget, 2);
21221 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
21222 +         by node;
21223 +         id statname;
21224 +      run;
21225 +    %end;
21226 +  %end;
21228 +  proc sort data=tempprob; by node; run;
21229 +  data tempoutnodes;
21230 +    merge tempoutnodes tempprob;
21231 +    by node;
21232 +  run;
21234 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
21235 +  data tempnodes;
21236 +    retain traintotal validtotal;
21237 +    set tempnodes(where=(leaf ne . ));
21238 +    tprob=round(&predTarget, .01);
21239 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21240 +      percevent_train=round(tprob*100, .01);
21241 +    %end;
21242 +    %else %do;
21243 +      percevent_train=tprob;
21244 +    %end;
21246 +    perc_train=round((n/traintotal)*100, 0.01);
21247 +    /* leafwidth already has a *10 multiplier */
21248 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
21250 +    %if &validexist %then %do;
21251 +      %let vpredTarget = V%substr(&predTarget,2);
21252 +      vprob=round(&vpredTarget, .01);
21253 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21254 +        percevent_valid=round(vprob*100, .01);
21255 +      %end;
21256 +      %else %do;
21257 +        percevent_valid=vprob;
21258 +      %end;
21259 +      perc_valid=round((vn/validtotal)*100, .01);
21260 +    %end;
21262 +    index=_N_;
21263 +    keep node index tprob perc_train percevent_train
21264 +    %if &validexist %then %do;
21265 +        vprob percevent_valid perc_valid
21266 +    %end;
21267 +    ;
21268 +  run;
21269 +  proc sort data=tempnodes; by node; run;
21270 +  data &EM_USER_TREE_PLOT;
21271 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
21272 +    by node;
21273 +    if missing(node) then delete;
21274 +    %if &oldexists %then %do;
21275 +      if missing(nodecolor) then nodecolor=oldnodecolor;
21276 +      drop oldnodecolor;
21277 +    %end;
21278 +    abovetext = compbl(abovetext);
21280 +    /* add variable labels */
21281 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
21282 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
21283 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
21284 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
21285 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
21286 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
21288 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21289 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
21290 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
21291 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
21292 +          %end;
21293 +          %else %do;
21294 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
21295 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
21296 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
21297 +          %end;
21298 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
21300 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
21301 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
21302 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21303 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
21304 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
21305 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
21306 +          %end;
21307 +          %else %do;
21308 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
21309 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
21310 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
21311 +          %end;
21312 +    ;
21313 +  run;
21315 +  /* delete temporary tables */
21316 +  proc datasets lib=work nolist;
21317 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
21318 +  run;
21320 +%mend em_tree_makePlotDs;
21324 +%macro em_tree_report;
21326 +   /* report properties */
21327 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
21328 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
21329 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
21330 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
21331 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
21332 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
21333 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
21334 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
21335 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
21336 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
21337 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
21338 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
21339 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
21341 +   %let validexist=0;
21342 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
21343 +     %let validexist=1;
21344 +   %end;
21346 +   /* determine if multiple targets will be processed */
21347 +   %let em_tree_multipleTargets=N;
21348 +   %let em_tree_numTarget=1;
21349 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
21350 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
21351 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
21352 +         %let em_tree_multipleTargets=N;
21353 +      %end;
21354 +      %else %do;
21355 +        data _null_;
21356 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
21357 +          if eof then
21358 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
21359 +        run;
21361 +        %if &em_tree_numTarget gt 1 %then %do;
21362 +           %let em_tree_multipleTargets=Y;
21363 +        %end;
21364 +     %end;
21365 +   %end;
21367 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
21369 +   /* variable importance */
21370 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
21371 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
21373 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
21374 +     /* and the columns may not be generated                                                                                 */
21375 +     %let em_tree_cvexists=;
21376 +     %let em_tree_surrexists=.;
21377 +     data _null_;
21378 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
21379 +       if eof then do ;
21380 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
21381 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
21382 +       end;
21383 +     run;
21385 +     data &EM_USER_OUTIMPORT;
21386 +         set &EM_USER_OUTIMPORT;
21387 +         /* format columns based on Precison value specified */
21388 +         format importance 15.&EM_PROPERTY_PRECISION
21389 +              %if &validexist %then %do;
21390 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
21391 +              %end;
21392 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
21393 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
21394 +              %end;
21395 +         ;
21396 +     run;
21398 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
21399 +     proc print data=&EM_USER_OUTIMPORT
21400 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
21401 +          (where=((nrules>0) OR (nsurrogates>0)))
21402 +        %end;
21403 +        %else %do;
21404 +           (where=(nrules>0))
21405 +        %end;
21406 +        label noobs
21407 +        ;
21408 +     run;
21409 +     title10;
21411 +   %end;
21413 +   /* Sequence */
21414 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
21415 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
21416 +   data _null_ ;
21417 +      set &EM_USER_outseq (obs=2) end=eof ;
21418 +      if eof then do ;
21419 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
21420 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
21421 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
21422 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
21423 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
21424 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
21425 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
21426 +      end;
21427 +    run;
21429 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
21430 +      data &EM_USER_OUTSEQ;
21431 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
21432 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
21433 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21434 +           _XMISC_=_VMISC_
21435 +        %end;
21436 +        %if "&em_tree_aprof" ne "."  %then %do;
21437 +           _XAPROF_=_VAPROF_
21438 +           _XPROF_ = _VPROF_
21439 +        %end;
21440 +        %if "&em_tree_aloss" ne "."  %then %do;
21441 +           _XALOSS_=_VALOSS_
21442 +        %end;
21443 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
21444 +           _XPASE_ = _VPASE_
21445 +           _XPMISC_ = _VPMISC_
21446 +        %end;
21448 +        ));
21449 +     %end;
21450 +     %else %do;
21451 +        set &EM_USER_OUTSEQ;
21452 +     %end;
21454 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
21455 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21456 +            _MISC_   15.&EM_PROPERTY_PRECISION
21457 +         %end;
21458 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
21459 +            _PASE_  15.&EM_PROPERTY_PRECISION
21460 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
21461 +         %end;
21462 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
21463 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
21464 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21465 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
21466 +            %end;
21467 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
21468 +              _VPASE_  15.&EM_PROPERTY_PRECISION
21469 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
21470 +            %end;
21471 +         %end;
21472 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
21473 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
21474 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21475 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
21476 +            %end;
21477 +         %end;
21478 +         %if "&em_tree_seq" ne "." %then %do;
21479 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
21480 +         %end;
21481 +         %if "&em_tree_vseq" ne "." %then %do;
21482 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
21483 +         %end;
21484 +         %if "&em_tree_aprof" ne "." %then %do;
21485 +           _APROF_ 15.&EM_PROPERTY_PRECISION
21486 +           _PROF_ 15.&EM_PROPERTY_PRECISION
21487 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
21488 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
21489 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
21490 +           %end;
21491 +         %end;
21492 +         %else %if "&em_tree_aloss" ne "." %then %do;
21493 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
21494 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
21495 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
21496 +           %end;
21497 +         %end;
21498 +      ;
21499 +    run;
21500 +   %end;
21502 +   /* Observation Based Importance */
21503 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
21505 +      /* need to check for 0 obs */
21506 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
21507 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
21508 +      %let rc=%sysfunc(close(&dsid));
21510 +      %if &onobs %then %do;
21511 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
21512 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
21514 +         data &EM_USER_OUTOBSIMP;
21515 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
21516 +           if _a;
21517 +           by _INPUT1_;
21518 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
21519 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21520 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
21521 +                   %end;
21522 +                   ;
21523 +         run;
21524 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
21525 +      %end;
21526 +   %end;
21528 +  %end;
21530 +  /* create dataset to support tree diagram and icicle plot */
21531 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
21532 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
21534 +  /* display tree diagram */
21535 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
21536 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
21538 +  /* display icicle diagram */
21539 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
21540 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
21542 +  /* Leaf Statistics Plot */
21543 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
21545 +  /* print leaf information to output window */
21546 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
21548 +     proc sort data=&EM_USER_TREE_PLOT out=t;
21549 +       by descending N;
21550 +     run;
21552 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
21553 +     %local vn;
21554 +     data _null_;
21555 +       set t (obs=2) end=eof;
21556 +       if eof then do;
21557 +         call symput("vn", strip(put(vn, best.)));
21558 +       end;
21559 +     run;
21561 +     data t;
21562 +       set t;
21563 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
21564 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
21565 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
21566 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
21567 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
21568 +       %end;
21569 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
21570 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
21571 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
21572 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
21573 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
21574 +          %end;
21575 +       %end;
21576 +       ;
21577 +     run;
21579 +     /* determine if rase is found in t */
21580 +    %let dsid=%sysfunc(open(t,i));
21581 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
21582 +    %let rc=%sysfunc(close(&dsid));
21584 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
21585 +     proc print data=t noobs label;
21586 +       where tprob ne .;
21587 +       var node depth N tprob
21588 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
21589 +         %if "&vn" ne "." %then %do;
21590 +           VN
21591 +         %end;
21592 +         vprob
21593 +       %end;
21594 +       %if &raseexists %then %do;
21595 +            RASE
21596 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
21597 +              VRASE
21598 +            %end;
21599 +       %end;
21600 +       ;
21601 +     run;
21602 +     title10;
21603 +  %end;
21605 +  /* create plots that are done during training of node */
21606 +  /* display iterative plot, including reference line */
21607 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
21608 +   /* %if &nleaves eq  %then %do; */
21609 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
21610 +      data _null_;
21611 +        set &EM_USER_OUTTOPOLOGY end=eof;
21612 +        if eof then do;
21613 +          call symput('nleaves', LEAF);
21614 +        end;
21615 +      run;
21616 +   /* %end; */
21618 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
21619 +    /*%EM_REPORT(view=1, Y=_ASE_); */
21620 +  %end;
21622 +  /* display leaf statistics */
21623 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
21625 +  /* stats by node if multiple targets = Y */
21626 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
21627 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
21628 +    data &EM_USER_OUTSTATS;
21629 +      set &EM_USER_OUTSTATS;
21631 +     * if STATNAME="TARGET" then delete;
21632 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
21633 +      drop leaf;
21634 +    run;
21635 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
21637 +  %end;
21638 +  %else %do;
21639 +    /* add outstats and outdescribe to spk but not results */
21640 +    %EM_REPORT(viewtype=, key=OUTSTATS);
21641 +  %end;
21643 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE4_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 69 observations read from the data set EMWS3.TREE4_OUTIMPORT.
NOTE: The data set EMWS3.TREE4_OUTIMPORT has 69 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 6 observations read from the data set EMWS3.TREE4_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE4_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set EMWS3.TREE4_OUTSEQ.
NOTE: The data set EMWS3.TREE4_OUTSEQ has 13 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE4_CATEGORY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE4_CATEGORY_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='TEACHER');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set EMWS3.TREE4_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 0 observations read from the data set EMWS3.TREE4_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is empty.
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 0 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 7 observations read from the data set EMWS3.TREE4_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99   
NOTE: There were 7 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 14 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 212 observations read from the data set EMWS3.TREE4_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 14 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 14 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set EMWS3.TREE4_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 54 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 14 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 55 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      


NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 55 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 56 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 0 observations read from the data set EMWS3.TREE4_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE4_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 405 observations read from the data set EMWS3.TREE4_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 405 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 405 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 390 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 15 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 405 observations read from the data set EMWS3.TREE4_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 405 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 405 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 15 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 405 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 405 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 405 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 405 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 15 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 180 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 180 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 30 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 15 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 180 observations read from the data set WORK.TEMPPROB.
NOTE: There were 180 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 180 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 180 observations read from the data set WORK.TEMPPROB.
NOTE: There were 15 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 15 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 180 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 56 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196   
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 15 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 15 observations read from the data set WORK.TEMPN.
NOTE: There were 15 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS3.TREE4_TREE_PLOT has 15 observations and 60 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 405 observations read from the data set EMWS3.TREE4_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 56 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 15 observations and 56 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 8 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set EMWS3.TREE4_TREE_PLOT.
NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS3.TREE4_TREE_PLOT has 15 observations and 67 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: There were 15 observations read from the data set EMWS3.TREE4_TREE_PLOT.
NOTE: The data set WORK.T has 15 observations and 67 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 15 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 15 observations and 67 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 8 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141   
NOTE: There were 15 observations read from the data set EMWS3.TREE4_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

21644  
21645  *------------------------------------------------------------*;
21646  * End REPORT: Tree4;
21647  *------------------------------------------------------------*;

21648  /* Reset EM Options */
21649  options formchar="|----|+|---+=|-/\<>*";
21650  options nocenter ls=256 ps=10000;
21651  goptions reset=all device=GIF NODISPLAY;

21652  proc sort data=WORK.EM_USER_REPORT;
21653  by ID VIEW;
21654  run;

NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21655  proc sort data=EMWS3.TextCluster7_CMeta_TRAIN out=WORK.SUBSETINMETA;
21656  by NAME;
21657  run;

NOTE: There were 80 observations read from the data set EMWS3.TEXTCLUSTER7_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 80 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21658  proc sort data=EMWS3.Tree4_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
21659  by NAME;
21660  run;

NOTE: There were 80 observations read from the data set EMWS3.TREE4_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 80 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21661  data WORK.ASSESS_META;
21662  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
21663  by NAME;
21664  run;

NOTE: There were 80 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 80 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 80 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

21665  data EM_temp_assessMeta;
21666  set EMWS3.Tree4_CMeta_TRAIN;
21667  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
21668  run;

NOTE: There were 52 observations read from the data set EMWS3.TREE4_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 52 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

21669  data EM_temp_assessdata;
21670  set EMWS3.Tree4_TRAIN(keep=
21671  F_Category
21672  I_Category
21673  P_CategoryADVOCATE
21674  P_CategoryBUSINESS_DEVELOPMENT
21675  P_CategoryCONSULTANT
21676  P_CategoryDESIGNER
21677  P_CategoryDIGITAL_MEDIA
21678  P_CategoryFITNESS
21679  P_CategoryHEALTHCARE
21680  P_CategoryHR
21681  P_CategoryINFORMATION_TECHNOLOGY
21682  P_CategoryOTHER
21683  P_CategorySALES
21684  P_CategoryTEACHER
21685  Q_CategoryADVOCATE
21686  Q_CategoryBUSINESS_DEVELOPMENT
21687  Q_CategoryCONSULTANT
21688  Q_CategoryDESIGNER
21689  Q_CategoryDIGITAL_MEDIA
21690  Q_CategoryFITNESS
21691  Q_CategoryHEALTHCARE
21692  Q_CategoryHR
21693  Q_CategoryINFORMATION_TECHNOLOGY
21694  Q_CategoryOTHER
21695  Q_CategorySALES
21696  Q_CategoryTEACHER
21697  R_CategoryADVOCATE
21698  R_CategoryBUSINESS_DEVELOPMENT
21699  R_CategoryCONSULTANT
21700  R_CategoryDESIGNER
21701  R_CategoryDIGITAL_MEDIA
21702  R_CategoryFITNESS
21703  R_CategoryHEALTHCARE
21704  R_CategoryHR
21705  R_CategoryINFORMATION_TECHNOLOGY
21706  R_CategoryOTHER
21707  R_CategorySALES
21708  R_CategoryTEACHER
21709  U_Category
21710  V_CategoryADVOCATE
21711  V_CategoryBUSINESS_DEVELOPMENT
21712  V_CategoryCONSULTANT
21713  V_CategoryDESIGNER
21714  V_CategoryDIGITAL_MEDIA
21715  V_CategoryFITNESS
21716  V_CategoryHEALTHCARE
21717  V_CategoryHR
21718  V_CategoryINFORMATION_TECHNOLOGY
21719  V_CategoryOTHER
21720  V_CategorySALES
21721  V_CategoryTEACHER
21722  _WARN_
21723  Category
21724  );
21725  run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS3.TREE4_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      
NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER7_TRAIN.
NOTE: There were 674 observations read from the data set EMWS3.TREE4_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 674 observations and 53 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
      
















26007   data EM_temp_assessMeta;
26008   set EMWS3.Tree4_CMeta_TRAIN;
26009   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
26010   run;

NOTE: There were 52 observations read from the data set EMWS3.TREE4_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 52 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

26011   data EM_temp_assessdata;
26012   set EMWS3.Tree4_VALIDATE(keep=
26013   F_Category
26014   I_Category
26015   P_CategoryADVOCATE
26016   P_CategoryBUSINESS_DEVELOPMENT
26017   P_CategoryCONSULTANT
26018   P_CategoryDESIGNER
26019   P_CategoryDIGITAL_MEDIA
26020   P_CategoryFITNESS
26021   P_CategoryHEALTHCARE
26022   P_CategoryHR
26023   P_CategoryINFORMATION_TECHNOLOGY
26024   P_CategoryOTHER
26025   P_CategorySALES
26026   P_CategoryTEACHER
26027   Q_CategoryADVOCATE
26028   Q_CategoryBUSINESS_DEVELOPMENT
26029   Q_CategoryCONSULTANT
26030   Q_CategoryDESIGNER
26031   Q_CategoryDIGITAL_MEDIA
26032   Q_CategoryFITNESS
26033   Q_CategoryHEALTHCARE
26034   Q_CategoryHR
26035   Q_CategoryINFORMATION_TECHNOLOGY
26036   Q_CategoryOTHER
26037   Q_CategorySALES
26038   Q_CategoryTEACHER
26039   R_CategoryADVOCATE
26040   R_CategoryBUSINESS_DEVELOPMENT
26041   R_CategoryCONSULTANT
26042   R_CategoryDESIGNER
26043   R_CategoryDIGITAL_MEDIA
26044   R_CategoryFITNESS
26045   R_CategoryHEALTHCARE
26046   R_CategoryHR
26047   R_CategoryINFORMATION_TECHNOLOGY
26048   R_CategoryOTHER
26049   R_CategorySALES
26050   R_CategoryTEACHER
26051   U_Category
26052   V_CategoryADVOCATE
26053   V_CategoryBUSINESS_DEVELOPMENT
26054   V_CategoryCONSULTANT
26055   V_CategoryDESIGNER
26056   V_CategoryDIGITAL_MEDIA
26057   V_CategoryFITNESS
26058   V_CategoryHEALTHCARE
26059   V_CategoryHR
26060   V_CategoryINFORMATION_TECHNOLOGY
26061   V_CategoryOTHER
26062   V_CategorySALES
26063   V_CategoryTEACHER
26064   _WARN_
26065   Category
26066   );
26067   run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS3.TREE4_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      
NOTE: There were 405 observations read from the data set EMWS3.TEXTCLUSTER7_VALIDATE.
NOTE: There were 405 observations read from the data set EMWS3.TREE4_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 405 observations and 53 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      
















30358   %let _cn = %sysfunc(getoption(CENTER));
30359   options nocenter;
30360   proc print data=EMWS3.Tree4_EMREPORTFIT noobs label;
30361   var STAT LABEL TRAIN
30362   VALIDATE
30363   TEST
30364   ;
30365   by TARGET TARGETLABEL;
30366   title9 ' ';
30367   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
30368   run;

NOTE: There were 8 observations read from the data set EMWS3.TREE4_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

30369   title10;
30370   options &_cn;

30371   proc sort data=EMWS3.Tree4_EMCLASSIFICATION nothreads;
30372   by DATAROLE TARGET TARGETLABEL;
30373   run;

NOTE: There were 139 observations read from the data set EMWS3.TREE4_EMCLASSIFICATION.
NOTE: The data set EMWS3.TREE4_EMCLASSIFICATION has 139 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

30374   %let _cn = %sysfunc(getoption(CENTER));
30375   options nocenter;
30376   proc print data=EMWS3.Tree4_EMCLASSIFICATION noobs label;
30377   var from into pct_row pct_col count percent
30378   ;
30379   by DATAROLE TARGET TARGETLABEL;
30380   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
30381   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
30382   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
30383   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
30384   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
30385   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
30386   where _TYPE_='PREDICTION';
30387   title9 ' ';
30388   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
30389   run;

NOTE: There were 139 observations read from the data set EMWS3.TREE4_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

30390   title9;
30391   title10;
30392   options &_cn;

30393   %let _cn = %sysfunc(getoption(CENTER));
30394   options nocenter;
30395   data EMWS3.Tree4_EMEVENTREPORT;
30396   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
30397   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
30397 ! FALSEEVENT
30398   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
30399      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
30400   FALSEEVENT=0;
30401   FALSENEVENT=0;
30402   TRUEEVENT=0;
30403   TRUENEVENT=0;
30404   set EMWS3.Tree4_EMEVENTREPORT;
30405   run;

NOTE: There were 2 observations read from the data set EMWS3.TREE4_EMEVENTREPORT.
NOTE: The data set EMWS3.TREE4_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

30406   proc print data=EMWS3.Tree4_EMEVENTREPORT noobs label;
30407   title9 ' ';
30408   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
30409   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
30410   run;

NOTE: There were 2 observations read from the data set EMWS3.TREE4_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

30411   title10;
30412   options &_cn;

30413   proc datasets library=EMWS3 nolist;
30414   modify Tree4_EMRANK;
30415   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
30416   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
30417   run;

NOTE: MODIFY was successful for EMWS3.TREE4_EMRANK.DATA.
30418   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
      

30419   %let _cn = %sysfunc(getoption(CENTER));
30420   options nocenter;
30421   proc print data=EMWS3.Tree4_EMRANK label noobs;
30422   var
30423   decile gain lift liftc resp respc N _meanP_;
30424   by
30425   notsorted DATAROLE
30426   notsorted TARGET
30427   notsorted TARGETLABEL
30428   ;
30429   title9 ' ';
30430   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
30431   run;

NOTE: There were 40 observations read from the data set EMWS3.TREE4_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

30432   title10;
30433   options &_cn;

30434   proc datasets library=EMWS3 nolist;
30435   modify Tree4_EMSCOREDIST;
30436   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
30437   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
30438   run;

NOTE: MODIFY was successful for EMWS3.TREE4_EMSCOREDIST.DATA.
30439   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.06 seconds
      

