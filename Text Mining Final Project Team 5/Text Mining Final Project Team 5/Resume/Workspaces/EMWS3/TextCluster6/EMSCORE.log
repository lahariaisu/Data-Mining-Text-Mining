*------------------------------------------------------------*
* Score Log
Date:                November 23, 2023
Time:                22:12:35
*------------------------------------------------------------*
17875  %let EMEXCEPTIONSTRING=;
17876  *------------------------------------------------------------*;
17877  * SCORE: TextCluster6;
17878  *------------------------------------------------------------*;
17879  %let EM_ACTION = SCORE;
17880  %let syscc = 0;
17881  %macro main();
17882  
17883     %if %upcase(&EM_ACTION) eq CREATE %then %do;
17884        filename temp catalog 'sashelp.emtxtext.cluster_create.source';
17885        %include temp;
17886        %create();
17887     %end;
17888     %if %upcase(&EM_ACTION) eq TRAIN %then %do;
17889        filename temp catalog 'sashelp.emtxtext.cluster_train.source';
17890        %include temp;
17891        %train();
17892     %end;
17893     %if %upcase(&EM_ACTION) eq REPORT %then %do;
17894        filename temp catalog 'sashelp.emtxtext.cluster_report.source';
17895        %include temp;
17896        %report();
17897     %end;
17898     %if %upcase(&EM_ACTION) eq SCORE %then %do;
17899        filename temp catalog 'sashelp.emtxtext.cluster_score.source';
17900        %include temp;
17901        %score();
17902     %end;
17903  %mend main;
17904  
17905  %main();
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.CLUSTER_SCORE.SOURCE.
17906 +%macro tmc_score(import_ds=,configdata=,export_ds=,term_ds=,export_out=,clusters_ds=,svdu=,svds=,
17907 +    import_out=,em_outstat=,prefixstring=,ocluster=,ndescterms=,ftmout=,fterms=,hier=);
17908 +  %if &import_ds ne %then %do;
17909 +
17910 +    %let syscc=0;
17911 +
17912 +    %tmc_doc_score(import=&import_ds,export=&export_ds,emoutstat=&em_outstat,
17913 +                termds=&term_ds,clusters=&clusters_ds,configds=&configdata,
17914 +                _scrout=&import_out, svd_u=&svdu, svd_s=&svds, prefix=&prefixstring,
17915 +                outclusters=&ocluster, descterms=&ndescterms, filterterms=&fterms,
17916 +                filtertmout=&ftmout, hierds=&hier);
17917 +
17918 +  %end;
17919 +
17920 +%mend tmc_score;
17921 +%macro score();
17922 +
17923 +    %global last_parse_node last_filter_node last_prescore_node server_err
17924 +      parsevar EM_SASMSG ;
17925 +    %let syscc=0;
17926 +    %if ^%symexist(tm_debug) %then %let tm_debug=0;
17927 +    /*use saved version of em_info in case macro is not populated*/
17928 +    %em_getname(key=last_tm_nodes, type=data);
17929 +
17930 +    filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
17931 +    %include temp;
17932 +    %tm_get_last_filter(eminfo=&em_user_last_tm_nodes,em_lib=&em_lib,
17933 +                        em_variableset=&em_data_variableset);
17934 +    %if &EMEXCEPTIONSTRING ne %then %goto end_cluster_score;
17935 +    %let lastparsenode=&last_parse_node;
17936 +    %let lastfilternode=&last_filter_node;
17937 +    %let lastprescore=&last_prescore_node;
17938 +    %let filt_node=;
17939 +
17940 +   %em_getname(key=terms, type=data);
17941 +   %em_getname(key=docs, type=data);
17942 +   %em_getname(key=clusters, type=data);
17943 +   %em_getname(key=svd_u, type=data);
17944 +   %em_getname(key=svd_s, type=data);
17945 +   %em_getname(key=emoutstat, type=data);
17946 +   %em_getname(key=tmconfig, type=data);
17947 +
17948 +   %em_getname(key=tmout, type=data);
17949 +   %em_getname(key=validout, type=data);
17950 +   %em_getname(key=testout, type=data);
17951 +   %em_getname(key=scoreout, type=data);
17952 +   %em_getname(key=PRESCORECODE, type=file, extension=sas);
17953 +   %let systmutil=;
17954 +
17955 +    filename temp catalog 'sashelp.emtxtext.tm_data2code.source';
17956 +    %include temp;
17957 +    filename temp catalog 'sashelp.emtext.tmemclus.source';
17958 +    %include temp;
17959 +    filename temp catalog 'sashelp.emtext.tmpred.source';
17960 +    %include temp;
17961 +    filename temp catalog 'sashelp.emtext.tmsort.source';
17962 +    %include temp;
17963 +    filename temp catalog 'sashelp.emtxtext.tmc_doc_score.source';
17964 +    %include temp;
17965 +    filename temp catalog 'sashelp.emtext.tmsvd.source';
17966 +    %include temp;
17967 +    filename temp catalog 'sashelp.emtext.tmfast.source';
17968 +    %include temp;
17969 +
17970 +   %let EM_PUBLISHCODE = PUBLISH;
17971 +   %let EM_SCORECODEFORMAT = OTHER;
17972 +   %let overwrite_pre = ;
17973 +
17974 +   %let lastprescore=%trim(%left(&lastprescore));
17975 +
17976 +   /* Create indexed term table for writing out score code */
17977 +   proc sql noprint;
17978 +       select count(*) into :svdkeep
17979 +       from &em_user_svd_s
17980 +       where keep=1;
17981 +   create table _clusterms as
17982 +      select key, term, role, keep, freq, numdocs, parent, _ispar, weight from &em_user_terms;
17983 +
17984 +   data _filter_tmout;
17985 +      set &EM_LIB..&lastfilternode._tmout;
17986 +   run;
17987 +
17988 +   %tmc_score(import_ds=&em_import_data,export_ds=&em_export_train,
17989 +              import_out=_filter_tmout,
17990 +              export_out=&EM_export_transaction,
17991 +              term_ds=_clusterms,
17992 +              clusters_ds=&em_user_clusters,
17993 +              svdu=&em_user_svd_u,
17994 +              svds=&em_user_svd_s,
17995 +              em_outstat=&em_user_emoutstat,
17996 +              configdata=&em_user_tmconfig,
17997 +              prefixstring=&EM_NODEID,
17998 +              ocluster=&em_user_clusters,
17999 +              ndescterms=&em_property_ndescterms,
18000 +              fterms=&EM_LIB..&lastfilternode._terms,
18001 +              ftmout=&EM_LIB..&lastfilternode._tmout,
18002 +              hier=&em_user_hierds);
18003 +
18004 +   %tmc_score(import_ds=&em_import_validate,export_ds=&em_export_validate,
18005 +              export_out=&EM_USER_validout,
18006 +              import_out=&EM_LIB..&lastfilternode._validout,
18007 +              term_ds=_clusterms,
18008 +              clusters_ds=&em_user_clusters,
18009 +              svdu=&em_user_svd_u,
18010 +              svds=&em_user_svd_s,
18011 +              em_outstat=&em_user_emoutstat,
18012 +              configdata=&em_user_tmconfig,
18013 +              prefixstring=&EM_NODEID);
18014 +   %tmc_score(import_ds=&em_import_test,export_ds=&em_export_test,
18015 +              export_out=&EM_USER_testout,
18016 +              import_out=&EM_LIB..&lastfilternode._testout,
18017 +              term_ds=_clusterms,
18018 +              clusters_ds=&em_user_clusters,
18019 +              svdu=&em_user_svd_u,
18020 +              svds=&em_user_svd_s,
18021 +              em_outstat=&em_user_emoutstat,
18022 +              configdata=&em_user_tmconfig,
18023 +              prefixstring=&EM_NODEID);
18024 +
18025 +   %if &syscc>4 %then %do;
18026 +       %let syscc=0;
18027 +       %goto end_cluster_score;
18028 +   %end;
18029 +
18030 +   * path of the diagram ;
18031 +   %let emwspath = ;
18032 +   data _null_;
18033 +      call symput("emwspath", strip(pathname("&EM_LIB")));
18034 +   run;
18035 +
18036 +   filename pre "&EM_USER_PRESCORECODE";
18037 +   data _null_;
18038 +       file pre;
18039 +       put 'filename temp catalog "sashelp.emtext.tmemclus.source";';
18040 +       put '%include temp;';
18041 +       put 'filename temp catalog "sashelp.emtext.tmpred.source";';
18042 +       put '%include temp;';
18043 +       put 'filename temp catalog "sashelp.emtxtext.tmc_doc_score.source";';
18044 +       put '%include temp;';
18045 +       put 'filename temp catalog "sashelp.emtext.tmsort.source";';
18046 +       put '%include temp;';
18047 +       put 'filename temp catalog "sashelp.emtext.tmsvd.source";';
18048 +       put '%include temp;';
18049 +       put 'filename temp catalog "sashelp.emtext.tmfast.source";';
18050 +       put '%include temp;';
18051 +       put 'filename temp;';
18052 +   run;
18053 +
18054 +
18055 +   /* We need to use last prescore */
18056 +   %if &lastprescore ne %then %do;
18057 +      %let tmprescoreFile = %bquote(&emwspath)&em_dsep&lastprescore&em_dsep.PRESCORECODE.sas;
18058 +      filename tmpre "&tmprescoreFile";
18059 +      %em_copyfile(infref=tmpre, outfref=pre, append=Y);
18060 +      filename tmpre;
18061 +   %end;
18062 +
18063 +   data _codeclusters;
18064 +        set &em_user_clusters (drop=clus_desc);
18065 +   run;
18066 +
18067 +     %if not %symexist(em_term_loc) %then %do;
18068 +       %let em_term_loc = %bquote(%sysfunc(pathname(&EM_LIB)));
18069 +         libname termloc "&em_term_loc";
18070 +
18071 +      %let scored_terms = termloc.&lastfilternode._filtterms;
18072 +       %let scored_clust = termloc.&EM_NODEID._clusters;
18073 +       %let scored_config = termloc.&EM_NODEID._tmconfig;
18074 +       %let scored_svd_u = termloc.&EM_NODEID._svd_u;
18075 +       %let scored_svd_s= termloc.&EM_NODEID._svd_s;
18076 +
18077 +       %if &em_property_algorithm=1.0 %then  %do;
18078 +          %let scored_emoutstat= termloc.&EM_NODEID._emoutstat;
18079 +       %end;
18080 +
18081 +   %end;
18082 +   %else %do; /* Write out data sets to external directory */
18083 +       libname termloc "&em_term_loc";
18084 +        %if %sysfunc(libref(termloc)) ne 0 %then %do;
18085 +           %let  EMEXCEPTIONSTRING = EMTOOL.EMTERMLOC,&em_term_loc;
18086 +           %goto end_cluster_score;
18087 +       %end;
18088 +
18089 +      /* copy datasets to use for prescore code*/
18090 +       data termloc.&EM_LIB._&EM_NODEID._CLUSTERS;
18091 +         set _codeclusters;
18092 +       run;
18093 +
18094 +       data termloc.&EM_LIB._&EM_NODEID._svd_u;
18095 +         set &em_user_svd_u;
18096 +       run;
18097 +
18098 +       data termloc.&EM_LIB._&EM_NODEID._svd_s;
18099 +         set &em_user_svd_s;
18100 +       run;
18101 +
18102 +       data termloc.&EM_LIB._&EM_NODEID._tmconfig;
18103 +         set &em_user_tmconfig;
18104 +       run;
18105 +
18106 +       %let scored_terms = termloc.&EM_LIB._&lastfilternode._filtterms;
18107 +       %let scored_clust = termloc.&EM_LIB._&EM_NODEID._CLUSTERS;
18108 +       %let scored_config = termloc.&EM_LIB._&EM_NODEID._tmconfig;
18109 +       %let scored_svd_u = termloc.&EM_LIB._&EM_NODEID._svd_u;
18110 +       %let scored_svd_s= termloc.&EM_LIB._&EM_NODEID._svd_s;
18111 +
18112 +       %if &em_property_algorithm=1.0 %then  %do;
18113 +         data termloc.&EM_LIB._&EM_NODEID._emoutstat;
18114 +         set &em_user_emoutstat;
18115 +         run;
18116 +           %let scored_emoutstat= termloc.&EM_LIB._&EM_NODEID._emoutstat;
18117 +       %end;
18118 +   %end;
18119 +
18120 +
18121 +
18122 +   %let _score_append=;
18123 +
18124 +   * Now save code, if necessary, for search phrase;
18125 +   filename _tmscore "&EM_FILE_EMPUBLISHSCORECODE";
18126 +   %if &em_property_algorithm=1.0 %then %do;
18127 +   data _NULL_;
18128 +     file _tmscore;
18129 +     length string $200;
18130 +     string ='%tmc_doc_score(import='||'&em_score_output'||",export=work._newexport,";
18131 +     put string;
18132 +     string="      termds=&scored_terms, configds=&scored_config,";
18133 +     put string;
18134 +     string= "      clusters=&scored_clust, emoutstat=&scored_emoutstat, ";
18135 +     put string;
18136 +     string = "      _scrout=work.&lastfilternode._out, svd_u=&scored_svd_u, svd_s=&scored_svd_s, prefix=&em_nodeid);";
18137 +     put string;
18138 +     string='data &em_score_output; set work._newexport;';
18139 +     put string;
18140 +    run;
18141 +    %end;
18142 +    %else %do;
18143 +    data _NULL_;
18144 +     file _tmscore;
18145 +     string= '%'||"tmc_doc_score(import="||'&em_score_output'||",export=work._newexport,";
18146 +     put string;
18147 +     put "      termds=&scored_terms,configds=&scored_config,";
18148 +     put "      clusters=&scored_clust, ";
18149 +     put "      _scrout=work.&lastfilternode._out, svd_u=&scored_svd_u, svd_s=&scored_svd_s, prefix=&em_nodeid);";
18150 +     put 'data &em_score_output; set work._newexport;';
18151 +    run;
18152 +    %end;
18153 +   filename _tmscore;
18154 +
18155 +%end_cluster_score:
18156 +    filename temp;
18157 +    %if &tm_debug =0 %then %do;
18158 +    proc sql noprint;
18159 +        drop table _clusterms;
18160 +        drop table _filter_tmout;
18161 +        drop table _codeclusters;
18162 +    quit;
18163 +    %end;
18164 +
18165 +%mend score;
18166 +
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_GET_LAST_FILTER.SOURCE.
18167 +/* ****************************************************************
18168 + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
18169 + *
18170 + * Name:             tm_get_last_filter.sas
18171 + * Product:          SAS Text Miner
18172 + * Language:         Sas
18173 + * Script:
18174 + *
18175 + * Usage:
18176 + *
18177 + * Purpose:  macro to get the last filter node and the last parse node in the
18178 + *   diagram that corresponds to the current parse variable.  If there is no filter
18179 + *   node, the filter node is set to the last parse node.
18180 + *
18181 + *
18182 + *
18183 + * History:
18184 + * 14Aug09 Initial Coding
18185 + *
18186 + * Notes:
18187 + *    Returns an error in the following cases:
18188 + *      1. There is no preceding parse node.
18189 + *      2. There is no parse node with the current parse variable.
18190 + *
18191 + * Last Modified By:
18192 + * Last Modified On: Wed Sep 23 15:35:04 2009
18193 + *
18194 + * End
18195 + * ************************************************************** */
18196 +%macro tm_get_last_filter(eminfo=,em_lib=, em_variableset=);
18197 +   %let last_parse_node=;
18198 +   %let last_filter_node=;
18199 +   %let last_prescore_node=;
18200 +   %let server_err=;
18201 +   %let EMEXCEPTIONSTRING=;
18202 +   %let syscc=0;
18203 +
18204 +    /* verify that setinit for SAS Text Miner is currently active */
18205 +    %if %sysfunc(sysprod(PRODNUM107)) ne 1 %then %do;
18206 +       %let EMEXCEPTIONSTRING = EMTOOL.NOTMLICENSE;
18207 +        %goto end_macro;
18208 +        %end;
18209 +
18210 +
18211 +    * find last filter or text parse node if no filter node. ;
18212 +   %if %sysfunc(exist(&eminfo)) %then %do;
18213 +      proc sql noprint;
18214 +      select data into :last_parse_node from &eminfo where key="LastTextParsing";
18215 +         select data into :last_filter_node from &eminfo where key="LastTextFilter";
18216 +         select data into :last_prescore_node from &eminfo where kupcase(key)="PRESCORECODE";
18217 +      quit;
18218 +
18219 +   %end;
18220 +
18221 +   %if &last_parse_node= %then %do;
18222 +      %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGNODE;
18223 +      %goto end_macro;
18224 +      %end;
18225 +
18226 +   %else %if &last_filter_node= %then %let last_filter_node = %ktrim(&last_parse_node);
18227 +   %else %let last_filter_node = %ktrim(&last_filter_node);
18228 +   %let last_parse_node = %ktrim(&last_parse_node);
18229 +
18230 +   * Check to make sure parse variable is present and still exists;
18231 +   %let parsevar = ;
18232 +   proc sql noprint;
18233 +    select parsevar into :parsevar
18234 +    from &em_lib..&last_filter_node._tmconfig;
18235 +    quit;
18236 +
18237 +    *check for dropped parsevar on input dataset;
18238 +       %let parsevarOK= ;
18239 +       %let parsevarN=%kupcase(%ktrim(&parsevar));
18240 +       data _null_;
18241 +         set &em_variableset(where=(kupcase(NAME)="&parsevarN" and USE in('Y' 'D')));
18242 +         if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
18243 +         run;
18244 +       %if(&parsevarOK eq ) %then %do;
18245 +          %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGVAR;
18246 +          %goto end_macro;
18247 +          %end;
18248 +%end_macro:
18249 +
18250 +%mend tm_get_last_filter;
NOTE: %INCLUDE (level 1) ending.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TEXTCLUSTER6_VARIABLESET.
      WHERE (KUPCASE(NAME)='RESUME_STR') and USE in ('D', 'Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_DATA2CODE.SOURCE.
18251 +/* ****************************************************************
18252 + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
18253 + *
18254 + * Name:             tm_data2code.sas
18255 + * Product:          SAS Text Miner
18256 + * Language:         Sas
18257 + * Script:
18258 + *
18259 + * Usage:  %tm_data2code(data=, outdata=WORK.DATA);
18260 + *
18261 + * Purpose:          To do a data2code (like %em_data2code()) but allow the input data
18262 + *  to be view or data.
18263 + *
18264 + *    PARAMETERS:
18265 + *        DATA        = data set
18266 + *        OUTDATA     = out data set
18267 + *        OUTFILE     = file where to saved the code
18268 + *        APPEND      = append (Y/N)
18269 + * History:
18270 + * 11Jun09 Initial Coding
18271 + *
18272 + * Notes:
18273 + *
18274 + * Last Modified By:
18275 + * Last Modified On: Thu Jul 23 11:00:06 2009
18276 + *
18277 + * End
18278 + * ************************************************************** */
18279 +%macro tm_data2code(data=, outdata=WORK.DATA, outfile=, append=N);
18280 +%if &data eq %then %do;
18281 +   %put ERROR: Data set not defined;
18282 +   %end;
18283 +%else %do;
18284 +   %if (^%sysfunc(exist(&data)) and ^%sysfunc(exist(&data, view))) %then %do;
18285 +       %put ERROR: Data set does not exist;
18286 +       %end;
18287 +   %else %do;
18288 +      %global em_data em_outdata em_codefile em_append;
18289 +      %let em_data=&data;
18290 +      %let em_outdata=&outdata;
18291 +      %let em_codefile=&outfile;
18292 +      %let em_append=&append;
18293 +      proc display c=sashelp.emutil.data2code.scl; run;
18294 +      %end;
18295 +   %end;
18296 +%mend;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMEMCLUS.SOURCE.
18297 +
18298 + /*
18299 +
18300 +  Macro:   tmemclus.sas
18301 +  Purpose: Call proc emclus with given defaults and parameters.
18302 +  Syntax:  %tmemclus(data=, role=, clusters=, seed=,
18303 +                   outstat=, out=, vars=, cov=, iter=, secclus=,
18304 +                   seciter=, min=, method=, eps=, init=, print=,
18305 +                   p=, outliers=, decvar=, initstd=, dist=,
18306 +                   secstd=, nobs=, threads=);
18307 +  Required Parameters:  data=      The input data set.
18308 +                        role=      Train or score
18309 +                        clusters=  The number of primary clusters
18310 +
18311 +  Optional Parameters:  vars=      Variables to be used
18312 +                   cov=       Type of covariance matrix
18313 +                   iter=      Number of EM iterations
18314 +                   secclus    Number of secondary clusters
18315 +                   seciter    Number of k-means iterations
18316 +                   min=       Minimum number of obs in a cluster
18317 +                   method=    Standard or scaled
18318 +                   eps=       Stopping tolerance
18319 +                   init=      Random, Fastclus, or Emclus
18320 +                   print=     All, last, or none
18321 +                   p=
18322 +                   outliers=  Keep, cluster, or ignore
18323 +                   outstat=   Name of OUTSTAT data set
18324 +                   out=       Name of OUT data set
18325 +                   seed=      Name of SEED data set
18326 +                   decvar=    Proportion to decrease variances
18327 +                   initstd=   Initial standard deviation
18328 +                   dist=      Minimum distance between clusters
18329 +                   secstd=    Secondary cluster max std dev.
18330 +                   nobs=      Number of obs read in each iteration
18331 +  History:
18332 +  2001/01/16 - Bill Wheeler - Initial Coding.
18333 +  2001/11/29 - Bill Wheeler - Updated for version 8 or 9
18334 +*/
18335 +%MACRO tmemclus(data=, role=, clusters=, seed=,
18336 + outstat=, out=, vars=, cov=, iter=, secclus=,
18337 + seciter=, min=, method=, eps=, init=, print=,
18338 + p=, outliers=, decvar=, initstd=, dist=, secstd=, nobs=, threads=);
18339 +
18340 + %local saveout saveseed op1 op2 op3 op4;
18341 +
18342 + %LET saveout = &out;
18343 + %LET saveseed = &outstat;
18344 +
18345 + /* defaults */
18346 + %if &role= %then %let role = TRAIN;
18347 + %if &seed ne %then %let seed = seed=&seed;
18348 + %if &vars= %then %let var = ;
18349 + %else %let var = var &vars;
18350 + %if &cov ne %then %let cov = cov = &cov;
18351 + %if &iter ne %then %let iter = iter = &iter;
18352 + %if &init ne %then %let init = init = &init;
18353 + %if &eps ne  %then %let eps = eps = &eps;
18354 + %if &min ne %then %let min = min = &min;
18355 + %if &seciter ne %then %let seciter = seciter = &seciter;
18356 + %if &print ne %then %let print = print = &print;
18357 + %if &p ne %then %let p = p = &p;
18358 + %if &outliers ne %then %let outliers = outliers = &outliers;
18359 + %if &method ne %then %let method = method = &method;
18360 + %if &decvar ne %then %let decvar = decvar = &decvar;
18361 + %if &outstat ne %then %let outstat = outstat = &outstat;
18362 + %if &out ne %then %let out = out = &out;
18363 + %if (&threads >= 0)  %then %let threads = threads = &threads;
18364 + %else %let threads = ;
18365 +
18366 + %LET op1 = ;
18367 + %LET op2 = ;
18368 + %LET op3 = ;
18369 + %LET op4 = ;
18370 + %if ^(&initstd=) %then %let op1 = %str(initstd = &initstd);
18371 + %if ^(&dist=) %then %let op2 = %str(dist = &dist);
18372 + %if ^(&secstd=) %then %let op3 = %str(secstd = &secstd);
18373 + %if ^(&nobs=) %then %let op4 = %str(nobs = &nobs);
18374 +
18375 +
18376 + %IF &SYSVER < 9 %THEN %DO;
18377 +    %LET cov = ;
18378 +    %LET decvar = ;
18379 +    %LET outliers = ;
18380 +    %LET out = ;
18381 + %END;
18382 +
18383 +
18384 + %if %upcase(&role) = TRAIN %then
18385 + %do;
18386 +   proc emclus data = &data
18387 +   clusters = &clusters
18388 +   &seed
18389 +   &outstat
18390 +   &out
18391 +   &init
18392 +   &eps
18393 +   &method
18394 +   &secclus
18395 +   &min
18396 +   &print
18397 +   &outliers
18398 +   &iter
18399 +   &op1 &op2
18400 +   &op3 &op4
18401 +   &decvar
18402 +   &cov
18403 +   &threads
18404 +   ;
18405 +   &var;
18406 + %end;
18407 + %else
18408 +  %do;
18409 +    proc emclus data = &data
18410 +    role = score
18411 +    clusters = &clusters
18412 +    &seed
18413 +    &out
18414 +    &cov
18415 +    ;
18416 +    &var;
18417 +  %end;
18418 +
18419 + %IF &SYSVER < 9 and &saveout ^= %THEN %DO;
18420 +   proc emclus data = &data
18421 +   role = score
18422 +   clusters = &clusters
18423 +   seed = &saveseed
18424 +   &saveout
18425 +   ;
18426 +   &var;
18427 + %END;
18428 +
18429 +
18430 +%MEND tmemclus;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMPRED.SOURCE.
18431 +
18432 +/*
18433 +  Macro: tmpred(inds,outds,clusters,type=,ignore=,freqDS=)
18434 +
18435 +  Description: This macro will take output from
18436 +     emclus and generate predicted
18437 +      predicted clusters.
18438 +
18439 +  Parms: inds - input data set, produced by emclus.
18440 +   outds - data set with clusters created by this macro.
18441 +   clusters - number of clusters that should be on this data set
18442 +   type - valid values: 'max' or 'prob'.  Max will just take the
18443 +      cluster with the highest probability as the predicted cluster.
18444 +      In the case of a tie the first cluster with that value will
18445 +       selected.
18446 +      Prob will attempt to select multiple clusters based on
18447 +      how many clusters were requested.  That is if 3 clusters
18448 +      were requested, any cluster with prob>1/3 will be selected
18449 +      as the predicted cluster. THIS OPTION IS UNTESTED.
18450 +*/
18451 +
18452 +%macro tmpred(inds,outds,clusters,type=, ignore=0, freqDS=, compress=1);
18453 +
18454 +  %local _str newfreqDS _flag;
18455 +
18456 +  * set the optional arguments;
18457 +  %if &type= %then %let type=max;
18458 +  %if &ignore = 1 %then %let
18459 +    _str = if _CLUSTER_ = &clusters then _CLUSTER_ = .;
18460 +  %else %let _str = ;
18461 +  %if %str(&freqDS) ^= %str() %then %do;
18462 +   %let newfreqDS = &freqDS(keep=_c1-_c&clusters);
18463 +   %let _flag = 1;
18464 +  %end;
18465 +  %else %let _flag = 0;
18466 +
18467 +  %if &compress = 1 %then %let compress = compress=Y;
18468 +  %else %let compress = ;
18469 +
18470 +  data &outds(&compress drop=_c1-_c&clusters)
18471 +    %if &_flag = 1 %then %do;
18472 +    &newfreqDS
18473 +    %end;
18474 +    ;
18475 +    set &inds end=eof;
18476 +   * array for holding all probabilities;
18477 +    array _p prob1--prob&clusters;
18478 +    array _c(&clusters);
18479 +    retain _c 0;
18480 +   * get rid of working columns;
18481 +    drop _max_ _i /*prob1--prob&clusters*/ _WARN_;
18482 +    /* keep the largest probability and the cluster */
18483 +    _max_ = 0;
18484 +    do _i = 1 to &clusters;
18485 +      if _p(_i) > _max_ then do;
18486 +        _max_ = _p(_i);
18487 +        _CLUSTER_ = _i;
18488 +      end;
18489 +    end;
18490 +    if (_CLUSTER_ >= 1) and (_CLUSTER_ <= &clusters) then
18491 +      _c(_CLUSTER_) = _c(_CLUSTER_) + 1;
18492 +    else _CLUSTER_ = .;
18493 +    &_str;
18494 +    %if &_flag = 1 %then %do;
18495 +      if eof then do;
18496 +        output &freqDS;
18497 +                output &outDS;
18498 +          end;
18499 +          else output &outDS;
18500 +        %end;
18501 +
18502 +    run;
18503 +%mend tmpred;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMSORT.SOURCE.
18504 + /*
18505 +PROC SORT macro
18506 +
18507 +%tmsort(data=, out=, by=);
18508 +
18509 +data=      - name of input data set (outtree data set from PROC CLUSTER)
18510 +out=       - name of the output data set
18511 +by=        - by statement
18512 +options=   - proc options
18513 +*/
18514 +
18515 +%macro tmsort(data=, out=, by=, options=, threads=THREADS);
18516 +  %if %BQUOTE(&out) ^= %then %let out = out =  &out;
18517 +  %if &SYSVER < 9 %then %let threads = ;
18518 +
18519 +  proc sort data = %STR(&data) &threads &options
18520 +    &out;
18521 +    by &by;
18522 +  run;
18523 +
18524 +%mend tmsort;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TMC_DOC_SCORE.SOURCE.
18525 +/*****************************************************************************
18526 +*
18527 +* tmc_doc_score
18528 +*
18529 +*  import  =  the doc data set of _document_ ids's as input
18530 +*  export = the new doc dataset with the svd dimensions and cluster results as output
18531 +*  termds = the terms table as input
18532 +*  clusters = input dataset of clusters from train
18533 +*  emoutstat = input dataset of seeds from training
18534 +*  _scrout = input OUT data set to be scored, may be trimmed based on conent of termds
18535 +*  svd_u = input singular vectors
18536 +
18537 +
18538 +*  svd_s = input singular values
18539 +*  prefxi = variable prefix string identifier.
18540 +*
18541 +**************************************************************************************/
18542 +
18543 +%macro tmc_doc_score(import=,export=,termds=,export_out=,clusters=,emoutstat=,
18544 +                 _scrout=,svd_u=,svd_s=,configds=,prefix=, outclusters=,hierds=,
18545 +                filterterms=,filtertmout=, descterms=);
18546 +
18547 +   %if ^%symexist(tm_debug) %then %let tm_debug=0;
18548 +
18549 +    proc sql noprint;
18550 +        select cellwgt into: cellwgt
18551 +            from &configds;
18552 +        select clus_alg into: algorithm
18553 +            from &configds;
18554 +        select parseVar into :textvar
18555 +            from &configds;
18556 +        select count(*) into :nclus
18557 +            from &clusters;
18558 +        select count(*) into :svdkeep
18559 +            from &svd_s
18560 +            where keep=1;
18561 +    quit;
18562 +
18563 +    %let svdkeep=%left(&svdkeep);
18564 +    %let nclus=%left(&nclus);
18565 +    %let algorithm=%left(&algorithm);
18566 +    %Let cellwgt=%left(&cellwgt);
18567 +    data _import_ds;
18568 +        set &import;
18569 +    run;
18570 +
18571 +
18572 +    %tmsort(data=&termds(where=(keep='Y')), out=_terms(keep= KEY PARENT),
18573 +            by=KEY);
18574 +    %tmsort(data=&_scrout, out=&_scrout, by=_termnum_);
18575 +
18576 +    data _svdm1;
18577 +        merge _terms (where=(PARENT ne _termnum_) in=_b_ keep=KEY PARENT rename=(KEY=_TERMNUM_))
18578 +              &_scrout (in = _A_ rename=(_COUNT_=COUNT));
18579 +        by _termnum_;
18580 +        if _B_;
18581 +        if (_A_ and _B_ and (PARENT ne .))
18582 +          then _TERMNUM_ = PARENT;
18583 +
18584 +        keep _TERMNUM_ _DOCUMENT_ COUNT;
18585 +        if (_DOCUMENT_=.) or (COUNT=.) then delete;
18586 +    run;
18587 +
18588 +    proc sql ;
18589 +       create table _scrout as select distinct _TERMNUM_, _DOCUMENT_,
18590 +        sum(COUNT) as _COUNT_ from _svdm1
18591 +        group by _TERMNUM_, _DOCUMENT_;
18592 +
18593 +       drop table _svdm1;
18594 +       drop table _terms;
18595 +    quit;
18596 +
18597 +    %tmsort(data=&termds(where=(KEEP='Y' and PARENT=.)),
18598 +         out=_weights (rename=(KEY=INDEX WEIGHT=GWGT) keep=KEY WEIGHT),
18599 +         by=KEY, options=, threads=);
18600 +
18601 +
18602 +    %tmsort(data=_scrout, out=_scrout, by=_DOCUMENT_, options=, threads=);
18603 +      %let svdkeep=%left(&svdkeep);
18604 +      data &svd_u;
18605 +         set &svd_u(keep= index col1-col&svdkeep);
18606 +      run;
18607 +
18608 +      proc sql;
18609 +         create table  _inweights as
18610 +         select a.*
18611 +         from _weights a right join &svd_u b
18612 +         on a.index=b.index
18613 +         ;
18614 +       quit;
18615 +    %if %lowcase(&cellwgt) = bin %then %let cellwgt=BINARY;
18616 +    proc spsvd data=_scrout IN_U=&svd_u
18617 +        local = &cellwgt global = none in_global = _inweights ;
18618 +        row _TERMNUM_;
18619 +        col _DOCUMENT_;
18620 +        entry _COUNT_;
18621 +        output colpro=_COLPRO bigpro normcol prefix="&prefix._SVD";
18622 +    run;
18623 +    proc sort data=_import_ds;
18624 +    by _DOCUMENT_; run;
18625 +
18626 +    proc sort data=_colpro;
18627 +    by INDEX;
18628 +    run;
18629 +
18630 +    data &export;
18631 +        merge _import_ds (in=_C_ ) _colpro (rename=(INDEX=_DOCUMENT_));
18632 +        by _DOCUMENT_;
18633 +        if _C_;
18634 +    run;
18635 +
18636 +    data &export;
18637 +       set  &export;
18638 +       array svd_array &prefix._SVD1 - &prefix._SVD&svdkeep.;
18639 +       do i = 1 to dim(svd_array);
18640 +          if svd_array(i)=. then svd_array(i)=0;
18641 +       end;
18642 +       drop i;
18643 +    run;
18644 +
18645 +
18646 +    %tmsort(data=&export, out=, by=_document_, options=, threads=);
18647 +
18648 +    %if %left(&algorithm)=1.0 %then %do;
18649 +
18650 +        %tmemclus(data=&export,
18651 +            role=SCORE, clusters=&nclus,
18652 +            seed=&emoutstat,
18653 +            outstat=, out=&export,
18654 +            vars=%STR(&prefix._SVD1 - &prefix._SVD&SVDKEEP),
18655 +            cov=, iter=5, secclus=,
18656 +            seciter=, min=, method=, eps=.1, init=, print=,
18657 +            p=, outliers=, decvar=0,
18658 +            initstd=, dist=, secstd=, nobs=);
18659 +        run;
18660 +
18661 +        %tmpred(&export, &export, &nclus, type=, ignore=0,
18662 +                  freqDS=, compress=1);
18663 +
18664 +        data &export;
18665 +           set &export;
18666 +           rename prob1-prob&nClus = &prefix._prob1-&prefix._prob&nclus;
18667 +           rename _cluster_=&prefix._cluster_;
18668 +        run;
18669 +
18670 +        %if &outclusters ne %then %do;
18671 +              %let memloc = _tmmem;
18672 +              proc tmutil data=&_scrout key=&filterterms ;
18673 +                 control init memloc="&memloc" release;
18674 +                 output keeponly out=_outtmutil;
18675 +              run;
18676 +
18677 +              data _docdata;
18678 +                 set &export (rename=(&prefix._cluster_=cluster));
18679 +              run;
18680 +
18681 +              /* Recalculate desc terms */
18682 +              data _terms_;
18683 +               set &filterterms;
18684 +               by key _ispar;
18685 +               if first.key then
18686 +                output;
18687 +               else;
18688 +              run;
18689 +
18690 +              data _terms_;
18691 +               set _terms_;
18692 +               if _ispar='+' then
18693 +                  Term=_ispar || ' ' || term;
18694 +              run;
18695 +
18696 +             %tmsort(data=_outtmutil,
18697 +               out=_tmout_,
18698 +               by=_termnum_,
18699 +                  options=,
18700 +               threads=threads);
18701 +
18702 +
18703 +             data _tmout_;
18704 +               merge _tmout_ (in=_A_)
18705 +                  _terms_ (rename=(key=_termnum_ term=_term_) keep=key term );
18706 +               by _termnum_;
18707 +               if _A_;
18708 +             run;
18709 +
18710 +             data _docs_;
18711 +               set _docdata (rename=(cluster=_cluster_) keep=_document_ cluster);
18712 +               _SEGMNT_=_cluster_;
18713 +             run;
18714 +
18715 +             %tmterm1(DSN_TPARS=_tmout_,
18716 +              DSN_CLUS=_docs_,
18717 +              DSN_DESC=_desc_,
18718 +              N_DESC_TERMS=&descterms,
18719 +              N_CLUS=&nclus,
18720 +              top_freq=%eval(&descterms*2),
18721 +              key=);
18722 +
18723 +             %tmsort(data=_desc_,
18724 +               out=_desc_,
18725 +               by=_cluster_,
18726 +                  options=,
18727 +               threads=threads);
18728 +
18729 +             proc sql noprint;
18730 +               create table &outclusters as
18731 +                 select a.clus_desc, b.* from &outclusters b left join _desc_ a
18732 +                 on a._cluster_=b._cluster_;
18733 +             quit;
18734 +
18735 +       %end;
18736 +
18737 +    %end;
18738 +    %else %do;
18739 +
18740 +        data _clustermean;
18741 +            set &clusters(keep=_cluster_ _mean1-_mean&svdkeep. freq);
18742 +        run;
18743 +
18744 +        proc sql;
18745 +        create table _meandocs as
18746 +            select a.*, b.*
18747 +            from &export(keep=&prefix._SVD1 - &prefix._SVD&SVDKEEP _document_) a , _clustermean b;
18748 +        quit;
18749 +
18750 +
18751 +        proc sort data=_meandocs;
18752 +        by _document_;
18753 +        run;
18754 +
18755 +        %if (&syscc>4) %then %do;
18756 +            %let emexceptionstring=EMTOOL.INSUFFICIENTMEM;
18757 +            %goto end_tmc;
18758 +        %end;
18759 +
18760 +        %tmsort(data=_meandocs,out=,by=_document_);
18761 +
18762 +          data _docdata(drop=_mean1-_mean&svdkeep. j _CLUSTER_ _freq_ rename=(_cluster_=&prefix._cluster_ distance=&prefix._distance));
18763 +            set _meandocs;
18764 +            drop _minDist_ _dist_ j freq;
18765 +            label CLUSTER = 'Cluster ID';
18766 +            array _means(&svdkeep) _mean1-_mean&svdkeep.;
18767 +            array _cols(&svdkeep) &prefix._SVD1-&prefix._SVD&svdkeep.;
18768 +            by _document_;
18769 +            retain CLUSTER _mindist_;
18770 +            _dist_ = 0;
18771 +            /* innner product*/
18772 +            do j = 1 to &svdkeep;
18773 +                _dist_ = _dist_ + (_cols(j)-_means(j))*(_cols(j)-_means(j));
18774 +            end;
18775 +
18776 +            /* initialization*/
18777 +            if first._document_ then do;
18778 +                _minDist_ = _dist_;
18779 +                CLUSTER = _cluster_;
18780 +            end;
18781 +            /*optimization*/
18782 +            if (_dist_ < _minDist_) then do;
18783 +                _minDist_ = _dist_;
18784 +                CLUSTER = _cluster_;
18785 +            end;
18786 +            if last._document_ then do;
18787 +               output;
18788 +            end;
18789 +        run;
18790 +        proc sort data=_docdata;
18791 +           by _document_;
18792 +        proc sort data=&export;
18793 +           by _document_;
18794 +        run;
18795 +
18796 +        data &export;
18797 +           merge &export _docdata;
18798 +           by _document_;
18799 +           rename cluster=&prefix._cluster_;
18800 +        run;
18801 +    %end;
18802 +
18803 +    /* Reorder variables in exported data set */
18804 +    proc sql noprint;
18805 +        create table &export as
18806 +        select &textvar, &prefix._cluster_, *
18807 +        from &export;
18808 +    quit;
18809 +
18810 +
18811 +    %if &outclusters ne %then %do;
18812 +
18813 +        /* update freqencies in cluster table */
18814 +         proc freq data =_docdata ;
18815 +            tables cluster/out=_tempfreqtable;
18816 +         run;
18817 +
18818 +        proc sql noprint;
18819 +            create table &outclusters as
18820 +            select  a.*, b.count as freq, b.percent/100 as percent
18821 +            from &clusters (drop= freq percent _rmsstd_) a, _tempfreqtable b
18822 +           where a._cluster_=b.cluster;
18823 +
18824 +        quit;
18825 +
18826 +        %if %left(&algorithm)=2.0 %then %do;
18827 +
18828 +          proc sql noprint;
18829 +
18830 +             create table &hierds as select a.freq, b.*
18831 +                from &outclusters a right join &hierds b on a._cluster_=b._cluster_;
18832 +          quit;
18833 +
18834 +          /* Find descriptive terms for clusters & parents */
18835 +          filename temp catalog 'sashelp.emtxtext.tmgethierterms.source';
18836 +          %include temp;
18837 +          filename temp;
18838 +
18839 +          %tm_getHierTerms(hierds=&hierds,
18840 +                         docs=_docdata,
18841 +                         tmout=&filtertmout,
18842 +                         terms= &filterterms,
18843 +                         ndescterms=&descterms);
18844 +
18845 +          proc sql noprint;
18846 +             create table &outclusters as
18847 +                select a.clus_desc, b.* from &hierds a, &outclusters b
18848 +                where a._cluster_=b._cluster_;
18849 +
18850 +             update &hierds set freq=0 where clus_desc="" and _cluster_ ne 1;
18851 +          quit;
18852 +
18853 +          /* Add frequencies to ancestors */
18854 +          data _hd;
18855 +             set &hierds;
18856 +             cluster=_cluster_;
18857 +             drop _cluster_ parent;
18858 +          run;
18859 +
18860 +          %let empty=1;
18861 +
18862 +          %do %while (&empty);
18863 +
18864 +            proc sql noprint;
18865 +                update _hd set freq=
18866 +                    (select sum(freq) from &HIERDS
18867 +                    where parent=cluster)
18868 +                    where freq=. and cluster not in
18869 +                    (select parent from &hierds where freq=.);
18870 +                select count(*) into :empty from _hd
18871 +                    where freq=.;
18872 +                update &hierds set freq=(select freq from _hd where _cluster_=cluster);
18873 +            quit;
18874 +
18875 +          %end;
18876 +
18877 +          /* Set graphdesc variable for graph display */
18878 +          data &hierds(drop=plus pos sub);
18879 +            set &hierds;
18880 +            plus='';
18881 +            if substr(CLUS_DESC, 1, 1) = "+" then plus="+ ";
18882 +            if ktrim(clus_desc) ne "" then do;
18883 +              if(substr(CLUS_DESC, 1, 1)) = "'" then do;
18884 +                 pos = findc(CLUS_DESC, "'",2);
18885 +                 sub = substr(CLUS_DESC,1,pos);
18886 +              end;
18887 +              else sub = scan(CLUS_DESC, 1);
18888 +              graphdesc=_CLUSTER_ || ': ' || plus || sub;
18889 +            end;
18890 +            else graphdesc=_CLUSTER_;
18891 +          run;
18892 +        %end;
18893 +
18894 +         /*calculate residual for each doc */
18895 +
18896 +         proc sort data=_docdata (rename=(cluster=_cluster_));
18897 +            by _cluster_;
18898 +         run;
18899 +
18900 +         data _rmscalc;
18901 +            merge _docdata(in=inhere) &outclusters;
18902 +            array _means(&svdkeep) _mean1-_mean&svdkeep.;
18903 +            array _svds(&svdkeep) &prefixstring._SVD1 - &prefixstring._SVD&svdkeep.;
18904 +            by _cluster_;
18905 +            error=0;
18906 +            do i = 1 to &svdkeep;
18907 +               error +( (_svds{i}-_means{i}) * (_svds{i}-_means{i}));
18908 +            end;
18909 +
18910 +            drop i ;
18911 +         run;
18912 +
18913 +          /*calc standardized residual for clusters*/
18914 +         proc summary data=_rmscalc nway;
18915 +            class _cluster_;
18916 +            var error;
18917 +            output out=_meanerr mean=meane sum=sume;
18918 +         run;
18919 +
18920 +         data _rmsse;
18921 +            set _meanerr;
18922 +            /* original code divides by number of svd dims*/
18923 +            if _freq_ gt 1 then do;
18924 +              _rmsstd_=sqrt(sume/((_freq_-1)*(&svdkeep.)));
18925 +            end;
18926 +            else do;
18927 +              _rmsstd_=0;
18928 +            end;
18929 +            keep _cluster_  _rmsstd_;
18930 +         run;
18931 +
18932 +
18933 +         proc sql noprint;
18934 +           create table _clusstat2 as
18935 +           select a.*,b.*
18936 +           from &outclusters a left join _rmsse b
18937 +           on a._cluster_=b._cluster_;
18938 +
18939 +           create table &outclusters as
18940 +           select * from _clusstat2;
18941 +         quit;
18942 +
18943 +
18944 +    %end;
18945 +
18946 +
18947 +%end_tmc:
18948 +    %if &tm_debug =0  %then %do;
18949 +    proc sql noprint;
18950 +        drop table _weights;
18951 +        drop table _colpro;
18952 +        drop table _scrout;
18953 +        drop table _svdm1;
18954 +        drop table _inweights;
18955 +        drop table _clustermean;
18956 +        drop table _clusstat2;
18957 +        drop table _outtmutil;
18958 +        drop table _rmscalc;
18959 +        drop table _rmsse;
18960 +        drop table _meanerr;
18961 +        drop table _meandocs;
18962 +        drop table _import_ds;
18963 +        drop table _hd;
18964 +        drop table _terms_;
18965 +        drop table _docs_;
18966 +        drop table _tmout_;
18967 +        drop table _desc_;
18968 +        drop table _docdata;
18969 +    quit;
18970 +    %end;
18971 +
18972 +%mend tmc_doc_score;
18973 +
18974 +
18975 +
18976 +
18977 +
18978 +
18979 +
18980 +
18981 +
18982 +
18983 +
18984 +
18985 +
18986 +
18987 +
18988 +
18989 +
18990 +
18991 +
18992 +
18993 +
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMSVD.SOURCE.
18995 + /*
18997 +  Macro:     tmsvd.sas
18998 +  Purpose:  Call proc spsvd with given defaults and parameters.
18999 +  Syntax:   %tmsvd(in,k=,global=,local=,row=,col=,entry=,scaleOp=,normOp=,
19000 +            in_global=,in_u=,in_s=,in_v=,u=,s=,v=,wgt=,wordPro=,
19001 +           colPro=, p=, tol=, gwgt=, mink=, maxk=, res=, remote=, compact=,bigpro=0);
19003 +  Required Parameters:  in     The data= data set.
19004 +  Optional Parameters:  k= The number of dimensions to reduce to
19005 +                   global=  The global weight to use, defaults to IDF.
19006 +                   local=  The local weight to use, defaults to BINARY.
19007 +                   row=   Column in the input data set that represents
19008 +                          the matrix row,
19009 +                       defaults to _termnum_.
19010 +            col=   Column in the input data set that represents
19011 +                          the matrix column,
19012 +                         defaults to _document_.
19013 +            entry= Column in the input data set that represents the
19014 +                          value in the
19015 +                         given row,column cell.  Defaults to _count_.
19016 +             scaleOp= Scale options: scalerow scalecol scaleall
19017 +            normOp=  Normalization options: normrow normcol normall
19018 +            in_global= The gwgt= output data set from a prior spsvd run.
19019 +                   in_u=  The u= output from a prior spsvd run.
19020 +                   in_s=  The s= output from a prior spsvd run.
19021 +                   in_v=  The v= output from a prior spsvd run.
19022 +                   u=     matrix U data set
19023 +                   s=     matrix S data set
19024 +                   v=     matrix V data set
19025 +                  wgt=   weighted input matrix data set
19026 +                  wordPro= projections of rows of A onto columns of V
19027 +                  colPro=  projection of columns of A onto columns of U
19028 +                  p=   number of iterations
19029 +                  tol= convergence tolerance
19030 +                   gwgt= global weights data set
19031 +                  mink=
19032 +                  maxk=
19033 +                  res=
19034 +                  remote= name of file
19036 +  History:
19037 +  2001/01/16 - Kevin Daly - Initial coding.
19038 +  2001/01/19 - Kevin Daly - Fixed so that when global=NONE and local=NONE,
19039 +             no gwgt data set
19040 +               is requested.  This was causing an error and the proc
19041 +              would terminate.
19042 +  2001/02/21 - Bill Wheeler - Allowd all options to be specified
19043 +  2001/05/14 - Bill Wheeler - Added version 9 options min_k, max_k, resolution
19044 +  2001/08/14 - Bill Wheeler - Added remote option
19045 +  2001/11/29 - Bill Wheeler - Updated for version 8 or 9
19046 +*/
19048 +%macro tmsvd(in,k=,global=,local=,row=,col=,entry=,scaleOp=,normOp=,
19049 +             in_global=, in_u=, in_s=, in_v=, u=, s=, v=,
19050 +             wgt=, wordPro=, colPro=, p=, tol=, gwgt=, mink=, maxk=, res=,
19051 +             remote=, compact=,bigpro= );
19053 +  %put;
19054 +  /* Defaults */
19055 +  %if &k ^= %then %let k = k = &k;
19056 +  %if &global ^= %then %let global = global = &global;
19057 +  %if %lowcase(&local) = bin %then %let local=BINARY;
19058 +  %if &local ^= %then %let local=local=&local;
19059 +  %if &row= %then %let row=_termnum_;
19060 +  %if &col= %then %let col=_document_;
19061 +  %if &entry= %then %let entry=_count_;
19062 +  %if &scaleOp ^= %then %let scaleOp = scaledoc;
19063 +  %if &normOp ^= %then %let normOp = normdoc;
19064 +  %if &compact ^= %then %let compact = compact;
19065 +  %else %let compact = ;
19067 +  %if &in_global ^= %then %let in_global = in_global=&in_global;
19068 +  %if &in_u ^= %then %let in_u = in_u=&in_u;
19069 +  %if &in_s ^= %then %let in_s = in_s=&in_s;
19070 +  %if &in_v ^= %then %let in_v = in_v=&in_v;
19071 +  %if ((&p ^= ) and (&p ^= .)) %then %let p = p=&p;
19072 +  %else %let p = ;
19073 +  %if ((&tol ^= ) and (&tol ^= .)) %then %let tol = tol=&tol;
19074 +  %else %let tol = ;
19076 +  %IF &SYSVER < 9 %THEN %DO;
19077 +    %IF &k = %THEN %DO;
19078 +      %IF &maxk ^= %THEN %LET k = k = &maxk;
19079 +      %ELSE %LET k = k = 100;
19080 +    %END;
19081 +    %LET mink = ;
19082 +    %LET maxk = ;
19083 +    %LET res = ;
19084 +    %LET remote = ;
19085 +    %LET compact = ;
19086 +  %END;
19089 +  %if &colPro ^= %then %let colPro = COLPRO=&colPro;
19090 +  %if &gwgt ^= %then %let gwgt = GWGT=&gwgt;
19091 +  %if &s ^= %then %let s = S=&s;
19092 +  %if &u ^= %then %let u = U=&u;
19093 +  %if &v ^= %then %let v = V=&v;
19094 +  %if &wordPro ^= %then %let wordPro = WORDPRO=&wordPro;
19095 +  %if &wgt ^= %then %let wgt = WGT=&wgt;
19096 +  %if (&mink ^=  ) and (&mink ^= .) %then %let mink = min_k = &mink;
19097 +  %else %let mink = ;
19098 +  %if &maxk ^= %then %let maxk = max_k = &maxk;
19099 +  %if &res ^= %then %let res = res = &res;
19100 +  proc sort data=&in; by &col;
19101 +  /* Run the proc */
19102 +  proc spsvd data=&in
19103 +      &mink
19104 +      &maxk
19105 +      &res
19106 +      &k &compact
19107 +    &local &global &in_global
19108 +    &in_u &in_s &in_v &p &tol;
19109 +    row &row; col &col; entry &entry;
19110 +      output &colPro &gwgt &normOp &scaleOp &s &u &v
19111 +           &wordPro &wgt &bigpro;
19112 +    &remote;
19113 +  run;
19115 +%mend tmsvd;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMFAST.SOURCE.
19116 + /*
19117 +
19118 +  Macro:   tmfast.sas
19119 +  Purpose: Call proc fastclus with given defaults and parameters.
19120 +  Syntax:  %tmfast(data=, clusters=, outstat=, vars=);
19121 +
19122 +  Required Parameters:  data=      The input data set.
19123 +                        clusters=  The maximum number of clusters
19124 +
19125 +  Optional Parameters:  vars=      Variables to be used
19126 +                        outstat=   The name of the OUTSTAT data set
19127 +                        outseed=   The name of the OUTSEED data set
19128 +
19129 +  Either outstat or outseed mut be given, but not both.
19130 +  History:
19131 +  2001/01/16 - Bill Wheeler - Initial Coding.
19132 +
19133 +*/
19134 +%MACRO tmfast(data=, clusters=, outstat=, outseed=,
19135 +                 id=, out=, vars=);
19136 + /* defaults */
19137 + %if (&id ne ) %then %let id = id &id;
19138 + %if (&out ne ) %then %let out = out = &out;
19139 + %if (&vars ne ) %then %let var = var &vars;
19140 + %else %let var = ;
19141 +
19142 + %if &outseed= %then
19143 + %do;
19144 +   proc fastclus data = &data
19145 +   maxclusters = &clusters noprint
19146 +   outstat = &outstat &out;
19147 +   &var;
19148 +   &id;
19149 + %end;
19150 + %else
19151 + %do;
19152 +   proc fastclus data = &data
19153 +   maxclusters = &clusters noprint
19154 +   outseed = &outseed &out;
19155 +   &var;
19156 +   &id;
19157 + %end;
19158 +%MEND tmfast;
NOTE: %INCLUDE (level 1) ending.
NOTE: Table WORK._CLUSTERMS created, with 16666 rows and 9 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 218546 observations read from the data set EMWS3.TEXTFILTER5_TMOUT.
NOTE: The data set WORK._FILTER_TMOUT has 218546 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 674 observations read from the data set EMWS3.TEXTPARSING_TRAIN.
NOTE: There were 674 observations read from the data set EMWS3.TEXTFILTER5_DOC_IDS.
NOTE: There were 674 observations read from the data set EMWS3.TEXTFILTER5_TRAIN.
NOTE: The data set WORK._IMPORT_DS has 674 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      


NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 16666 observations read from the data set WORK._CLUSTERMS.
      WHERE keep='Y';
NOTE: The data set WORK._TERMS has 16666 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      


NOTE: There were 218546 observations read from the data set WORK._FILTER_TMOUT.
NOTE: The data set WORK._FILTER_TMOUT has 218546 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      


NOTE: There were 13209 observations read from the data set WORK._TERMS.
      WHERE PARENT not = _termnum_;
NOTE: There were 218546 observations read from the data set WORK._FILTER_TMOUT.
NOTE: The data set WORK._SVDM1 has 218546 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

NOTE: Table WORK._SCROUT created, with 205198 rows and 3 columns.

NOTE: Table WORK._SVDM1 has been dropped.
NOTE: Table WORK._TERMS has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.08 seconds
      cpu time            0.06 seconds
      


NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 8502 observations read from the data set WORK._CLUSTERMS.
      WHERE (KEEP='Y') and (PARENT=.);
NOTE: The data set WORK._WEIGHTS has 8502 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 205198 observations read from the data set WORK._SCROUT.
NOTE: The data set WORK._SCROUT has 205198 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      


NOTE: There were 8502 observations read from the data set EMWS3.TEXTCLUSTER6_SVD_U.
NOTE: The data set EMWS3.TEXTCLUSTER6_SVD_U has 8502 observations and 45 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: Table WORK._INWEIGHTS created, with 8502 rows and 2 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 205198 observations read from the data set WORK._SCROUT.
NOTE: There were 8502 observations read from the data set EMWS3.TEXTCLUSTER6_SVD_U.
NOTE: There were 8502 observations read from the data set WORK._INWEIGHTS.
NOTE: The data set WORK._COLPRO has 673 observations and 45 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.08 seconds
      cpu time            0.04 seconds
      


NOTE: There were 674 observations read from the data set WORK._IMPORT_DS.
NOTE: The data set WORK._IMPORT_DS has 674 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
      


NOTE: There were 673 observations read from the data set WORK._COLPRO.
NOTE: The data set WORK._COLPRO has 673 observations and 45 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 674 observations read from the data set WORK._IMPORT_DS.
NOTE: There were 673 observations read from the data set WORK._COLPRO.
NOTE: The data set EMWS3.TEXTCLUSTER6_TRAIN has 674 observations and 49 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER6_TRAIN.
NOTE: The data set EMWS3.TEXTCLUSTER6_TRAIN has 674 observations and 49 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER6_TRAIN.
NOTE: The data set EMWS3.TEXTCLUSTER6_TRAIN has 674 observations and 49 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      


NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER6_TRAIN.
NOTE: There were 9 observations read from the data set EMWS3.TEXTCLUSTER6_EMOUTSTAT.
NOTE: The data set EMWS3.TEXTCLUSTER6_TRAIN has 674 observations and 54 variables.
NOTE: PROCEDURE EMCLUS used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER6_TRAIN.
NOTE: The data set EMWS3.TEXTCLUSTER6_TRAIN has 674 observations and 54 variables.
NOTE: Compressing data set EMWS3.TEXTCLUSTER6_TRAIN decreased size by 68.42 percent. 
      Compressed is 18 pages; un-compressed would require 57 pages.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      


NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER6_TRAIN.
NOTE: The data set EMWS3.TEXTCLUSTER6_TRAIN has 674 observations and 54 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 218546 observations read from the data set WORK._FILTER_TMOUT.
NOTE: There were 16666 observations read from the data set EMWS3.TEXTFILTER5_TERMS_DATA.
      WHERE KEEP='Y';
NOTE: There were 73331 observations read from the data set EMWS3.TEXTFILTER5_TERM_STRINGS.
NOTE: The data set WORK._OUTTMUTIL has 205198 observations and 3 variables.
NOTE: PROCEDURE TMUTIL used (Total process time):
      real time           0.18 seconds
      cpu time            0.04 seconds
      


NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER6_TRAIN.
NOTE: The data set WORK._DOCDATA has 674 observations and 54 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 16666 observations read from the data set EMWS3.TEXTFILTER5_TERMS_DATA.
      WHERE KEEP='Y';
NOTE: There were 73331 observations read from the data set EMWS3.TEXTFILTER5_TERM_STRINGS.
NOTE: There were 16666 observations read from the data set EMWS3.TEXTFILTER5_TERMS.
NOTE: The data set WORK._TERMS_ has 13209 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
      


NOTE: There were 13209 observations read from the data set WORK._TERMS_.
NOTE: The data set WORK._TERMS_ has 13209 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 205198 observations read from the data set WORK._OUTTMUTIL.
NOTE: The data set WORK._TMOUT_ has 205198 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      


NOTE: There were 205198 observations read from the data set WORK._TMOUT_.
NOTE: There were 13209 observations read from the data set WORK._TERMS_.
NOTE: The data set WORK._TMOUT_ has 205198 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
      


NOTE: There were 674 observations read from the data set WORK._DOCDATA.
NOTE: The data set WORK._DOCS_ has 674 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: SQL view WORK._CMB has been defined.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 205198 observations read from the data set WORK._TMOUT_.
NOTE: There were 674 observations read from the data set WORK._DOCS_.
NOTE: There were 205198 observations read from the data set WORK._CMB.
NOTE: The data set WORK._TFREQ has 21749 observations and 5 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.09 seconds
      cpu time            0.03 seconds
      


NOTE: There were 205198 observations read from the data set WORK._TMOUT_.
NOTE: There were 674 observations read from the data set WORK._DOCS_.
NOTE: There were 205198 observations read from the data set WORK._CMB.
NOTE: The data set WORK._SUM has 5 observations and 4 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      


NOTE: There were 5 observations read from the data set WORK._SUM.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Table WORK._SUM has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 21749 observations read from the data set WORK._TFREQ.
NOTE: The data set WORK._TFREQ has 21749 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 21749 observations read from the data set WORK._TFREQ.
NOTE: The data set WORK._UNQT has 120 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 120 observations read from the data set WORK._UNQT.
NOTE: 60 observations with duplicate key values were deleted.
NOTE: The data set WORK._UNQT has 60 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: Table WORK._CLCDF created, with 240 rows and 3 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: Table WORK._UNQT has been dropped.
NOTE: Table WORK._TFREQ has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 240 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDF has 60 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 60 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDF has 60 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 60 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDFTR has 240 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Table WORK._CLCDF has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 240 observations read from the data set WORK._CLCDFTR.
NOTE: The data set WORK._CLCDFTR has 240 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 240 observations read from the data set WORK._CLCDFTR.
NOTE: The data set WORK._DESC_ has 4 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Table WORK._CLCDFTR has been dropped.
NOTE: View WORK._CMB has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 4 observations read from the data set WORK._DESC_.
NOTE: The data set WORK._DESC_ has 4 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: Variable clus_desc already exists on file EMWS3.TEXTCLUSTER6_CLUSTERS.
NOTE: Table EMWS3.TEXTCLUSTER6_CLUSTERS created, with 4 rows and 49 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: Variable Resume_str already exists on file EMWS3.TEXTCLUSTER6_TRAIN.
WARNING: Variable TextCluster6_cluster_ already exists on file EMWS3.TEXTCLUSTER6_TRAIN.
NOTE: Table EMWS3.TEXTCLUSTER6_TRAIN created, with 674 rows and 54 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 674 observations read from the data set WORK._DOCDATA.
NOTE: The data set WORK._TEMPFREQTABLE has 4 observations and 3 variables.
NOTE: The PROCEDURE FREQ printed page 2.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
NOTE: Table EMWS3.TEXTCLUSTER6_CLUSTERS created, with 4 rows and 48 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 674 observations read from the data set WORK._DOCDATA.
NOTE: The data set WORK._DOCDATA has 674 observations and 54 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      


NOTE: There were 674 observations read from the data set WORK._DOCDATA.
NOTE: There were 4 observations read from the data set EMWS3.TEXTCLUSTER6_CLUSTERS.
NOTE: The data set WORK._RMSCALC has 674 observations and 102 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: There were 674 observations read from the data set WORK._RMSCALC.
NOTE: The data set WORK._MEANERR has 4 observations and 5 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 4 observations read from the data set WORK._MEANERR.
NOTE: The data set WORK._RMSSE has 4 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

WARNING: Variable _cluster_ already exists on file WORK._CLUSSTAT2.
NOTE: Table WORK._CLUSSTAT2 created, with 4 rows and 49 columns.

NOTE: Table EMWS3.TEXTCLUSTER6_CLUSTERS created, with 4 rows and 49 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 405 observations read from the data set EMWS3.TEXTFILTER5_VALIDATE.
NOTE: The data set WORK._IMPORT_DS has 405 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 16666 observations read from the data set WORK._CLUSTERMS.
      WHERE keep='Y';
NOTE: The data set WORK._TERMS has 16666 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 121692 observations read from the data set EMWS3.TEXTFILTER5_VALIDOUT.
NOTE: The data set EMWS3.TEXTFILTER5_VALIDOUT has 121692 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13209 observations read from the data set WORK._TERMS.
      WHERE PARENT not = _termnum_;
NOTE: There were 121692 observations read from the data set EMWS3.TEXTFILTER5_VALIDOUT.
NOTE: The data set WORK._SVDM1 has 121692 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

NOTE: Table WORK._SCROUT created, with 121692 rows and 3 columns.

NOTE: Table WORK._SVDM1 has been dropped.
NOTE: Table WORK._TERMS has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      


NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 8502 observations read from the data set WORK._CLUSTERMS.
      WHERE (KEEP='Y') and (PARENT=.);
NOTE: The data set WORK._WEIGHTS has 8502 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 121692 observations read from the data set WORK._SCROUT.
NOTE: The data set WORK._SCROUT has 121692 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      


NOTE: There were 8502 observations read from the data set EMWS3.TEXTCLUSTER6_SVD_U.
NOTE: The data set EMWS3.TEXTCLUSTER6_SVD_U has 8502 observations and 45 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Table WORK._INWEIGHTS created, with 8502 rows and 2 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 121692 observations read from the data set WORK._SCROUT.
NOTE: There were 8502 observations read from the data set EMWS3.TEXTCLUSTER6_SVD_U.
NOTE: There were 8502 observations read from the data set WORK._INWEIGHTS.
NOTE: The data set WORK._COLPRO has 405 observations and 45 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
      


NOTE: There were 405 observations read from the data set WORK._IMPORT_DS.
NOTE: The data set WORK._IMPORT_DS has 405 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 405 observations read from the data set WORK._COLPRO.
NOTE: The data set WORK._COLPRO has 405 observations and 45 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 405 observations read from the data set WORK._IMPORT_DS.
NOTE: There were 405 observations read from the data set WORK._COLPRO.
NOTE: The data set EMWS3.TEXTCLUSTER6_VALIDATE has 405 observations and 49 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 405 observations read from the data set EMWS3.TEXTCLUSTER6_VALIDATE.
NOTE: The data set EMWS3.TEXTCLUSTER6_VALIDATE has 405 observations and 49 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 405 observations read from the data set EMWS3.TEXTCLUSTER6_VALIDATE.
NOTE: The data set EMWS3.TEXTCLUSTER6_VALIDATE has 405 observations and 49 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 405 observations read from the data set EMWS3.TEXTCLUSTER6_VALIDATE.
NOTE: There were 9 observations read from the data set EMWS3.TEXTCLUSTER6_EMOUTSTAT.
NOTE: The data set EMWS3.TEXTCLUSTER6_VALIDATE has 405 observations and 54 variables.
NOTE: PROCEDURE EMCLUS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 405 observations read from the data set EMWS3.TEXTCLUSTER6_VALIDATE.
NOTE: The data set EMWS3.TEXTCLUSTER6_VALIDATE has 405 observations and 54 variables.
NOTE: Compressing data set EMWS3.TEXTCLUSTER6_VALIDATE decreased size by 64.71 percent. 
      Compressed is 12 pages; un-compressed would require 34 pages.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: There were 405 observations read from the data set EMWS3.TEXTCLUSTER6_VALIDATE.
NOTE: The data set EMWS3.TEXTCLUSTER6_VALIDATE has 405 observations and 54 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: Variable Resume_str already exists on file EMWS3.TEXTCLUSTER6_VALIDATE.
WARNING: Variable TextCluster6_cluster_ already exists on file EMWS3.TEXTCLUSTER6_VALIDATE.
NOTE: Table EMWS3.TEXTCLUSTER6_VALIDATE created, with 405 rows and 54 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 274 observations read from the data set EMWS3.TEXTFILTER5_TEST.
NOTE: The data set WORK._IMPORT_DS has 274 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 16666 observations read from the data set WORK._CLUSTERMS.
      WHERE keep='Y';
NOTE: The data set WORK._TERMS has 16666 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 80503 observations read from the data set EMWS3.TEXTFILTER5_TESTOUT.
NOTE: The data set EMWS3.TEXTFILTER5_TESTOUT has 80503 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 13209 observations read from the data set WORK._TERMS.
      WHERE PARENT not = _termnum_;
NOTE: There were 80503 observations read from the data set EMWS3.TEXTFILTER5_TESTOUT.
NOTE: The data set WORK._SVDM1 has 80503 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

NOTE: Table WORK._SCROUT created, with 80503 rows and 3 columns.

NOTE: Table WORK._SVDM1 has been dropped.
NOTE: Table WORK._TERMS has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 8502 observations read from the data set WORK._CLUSTERMS.
      WHERE (KEEP='Y') and (PARENT=.);
NOTE: The data set WORK._WEIGHTS has 8502 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 80503 observations read from the data set WORK._SCROUT.
NOTE: The data set WORK._SCROUT has 80503 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: There were 8502 observations read from the data set EMWS3.TEXTCLUSTER6_SVD_U.
NOTE: The data set EMWS3.TEXTCLUSTER6_SVD_U has 8502 observations and 45 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: Table WORK._INWEIGHTS created, with 8502 rows and 2 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 80503 observations read from the data set WORK._SCROUT.
NOTE: There were 8502 observations read from the data set EMWS3.TEXTCLUSTER6_SVD_U.
NOTE: There were 8502 observations read from the data set WORK._INWEIGHTS.
NOTE: The data set WORK._COLPRO has 274 observations and 45 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      


NOTE: There were 274 observations read from the data set WORK._IMPORT_DS.
NOTE: The data set WORK._IMPORT_DS has 274 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 274 observations read from the data set WORK._COLPRO.
NOTE: The data set WORK._COLPRO has 274 observations and 45 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 274 observations read from the data set WORK._IMPORT_DS.
NOTE: There were 274 observations read from the data set WORK._COLPRO.
NOTE: The data set EMWS3.TEXTCLUSTER6_TEST has 274 observations and 49 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 274 observations read from the data set EMWS3.TEXTCLUSTER6_TEST.
NOTE: The data set EMWS3.TEXTCLUSTER6_TEST has 274 observations and 49 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 274 observations read from the data set EMWS3.TEXTCLUSTER6_TEST.
NOTE: The data set EMWS3.TEXTCLUSTER6_TEST has 274 observations and 49 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 274 observations read from the data set EMWS3.TEXTCLUSTER6_TEST.
NOTE: There were 9 observations read from the data set EMWS3.TEXTCLUSTER6_EMOUTSTAT.
NOTE: The data set EMWS3.TEXTCLUSTER6_TEST has 274 observations and 54 variables.
NOTE: PROCEDURE EMCLUS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 274 observations read from the data set EMWS3.TEXTCLUSTER6_TEST.
NOTE: The data set EMWS3.TEXTCLUSTER6_TEST has 274 observations and 54 variables.
NOTE: Compressing data set EMWS3.TEXTCLUSTER6_TEST decreased size by 65.22 percent. 
      Compressed is 8 pages; un-compressed would require 23 pages.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: There were 274 observations read from the data set EMWS3.TEXTCLUSTER6_TEST.
NOTE: The data set EMWS3.TEXTCLUSTER6_TEST has 274 observations and 54 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: Variable Resume_str already exists on file EMWS3.TEXTCLUSTER6_TEST.
WARNING: Variable TextCluster6_cluster_ already exists on file EMWS3.TEXTCLUSTER6_TEST.
NOTE: Table EMWS3.TEXTCLUSTER6_TEST created, with 274 rows and 54 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The file PRE is:
      Filename=C:\Users\lahar\OneDrive\Desktop\Data Mining\Resume\Workspaces\EMWS3\TextCluster6\PRESCORECODE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=23Nov2023:22:12:38,
      Create Time=23Nov2023:22:12:38

NOTE: 13 records were written to the file PRE.
      The minimum record length was 14.
      The maximum record length was 62.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: The file PRE is:
      Filename=C:\Users\lahar\OneDrive\Desktop\Data Mining\Resume\Workspaces\EMWS3\TextCluster6\PRESCORECODE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=452,
      Last Modified=23Nov2023:22:12:38,
      Create Time=23Nov2023:22:12:38

NOTE: 23 records were written to the file PRE.
      The minimum record length was 1.
      The maximum record length was 86.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Fileref TMPRE has been deassigned.

NOTE: There were 4 observations read from the data set EMWS3.TEXTCLUSTER6_CLUSTERS.
NOTE: The data set WORK._CODECLUSTERS has 4 observations and 48 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Libref TERMLOC refers to the same physical library as EMWS3.
NOTE: Libref TERMLOC was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: C:\Users\lahar\OneDrive\Desktop\Data Mining\Resume\Workspaces\EMWS3

NOTE: The file _TMSCORE is:
      Filename=C:\Users\lahar\OneDrive\Desktop\Data Mining\Resume\Workspaces\EMWS3\TextCluster6\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=23Nov2023:22:12:38,
      Create Time=23Nov2023:22:12:38

NOTE: 5 records were written to the file _TMSCORE.
      The minimum record length was 43.
      The maximum record length was 119.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Fileref _TMSCORE has been deassigned.
NOTE: Fileref TEMP has been deassigned.
19159  *------------------------------------------------------------*;
19160  * End SCORE: TextCluster6;
19161  *------------------------------------------------------------*;

19163  *------------------------------------------------------------*;
19164  * TextCluster6: Computing metadata for TRAIN data;
19165  *------------------------------------------------------------*;

19751  proc sort data = EMWS3.TextFilter5_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
19752  by TARGET KEY;
19753  run;

NOTE: There were 5 observations read from the data set EMWS3.TEXTFILTER5_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 5 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19754  proc sort data = EMWS3.TextCluster6_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
19755  by TARGET KEY;
19756  run;

NOTE: There were 4 observations read from the data set EMWS3.TEXTCLUSTER6_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19757  data EMWS3.TextCluster6_EMINFO;
19758  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
19759  by TARGET KEY;
19760  run;

NOTE: There were 5 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 4 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS3.TEXTCLUSTER6_EMINFO has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19761  proc datasets lib=work nolist;
19762  delete TEMP_INFO SORTEDEMINFO;
19763  run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
19764  quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

