*------------------------------------------------------------*
* Report Log
Date:                November 23, 2023
Time:                22:14:05
*------------------------------------------------------------*
20198  data EMWS3.Tree3_EMOUTFIT;
20199  set EMWS3.Tree3_EMOUTFIT;
20200  length TargetLabel $200;
20201  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
20202  if upcase(TARGET) eq "CATEGORY" then TargetLabel = 'Category';
20203  run;

NOTE: There were 1 observations read from the data set EMWS3.TREE3_EMOUTFIT.
NOTE: The data set EMWS3.TREE3_EMOUTFIT has 1 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20204  proc sort data=EMWS3.Tree3_EMREPORTFIT nothreads;
20205  by TARGET;
20206  run;

NOTE: There were 8 observations read from the data set EMWS3.TREE3_EMREPORTFIT.
NOTE: The data set EMWS3.TREE3_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

20207  %let _EMwarndup = 0;
20208  %let _EMtargetdup =;
20209  %let _EMASEtargetdup =;
20210  data _null_;
20211  set EMWS3.Tree3_EMOUTFIT;
20212  if .<_ASE_<0.000001 then do;
20213  call symput('_EMwarndup', '1');
20214  call symput('_EMtargetdup', target);
20215  call symput('_EMASEtargetdup', put(_ASE_, best.));
20216  end;
20217  run;

NOTE: There were 1 observations read from the data set EMWS3.TREE3_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20218  %let EMEXCEPTIONSTRING=;
20219  *------------------------------------------------------------*;
20220  * REPORT: Tree3;
20221  *------------------------------------------------------------*;
20222  %let EM_ACTION = REPORT;
20223  %let syscc = 0;
20224  %macro main;
20225  
20226    %if %upcase(&EM_ACTION) = CREATE %then %do;
20227      filename temp catalog 'sashelp.emmodl.tree_create.source';
20228      %include temp;
20229      filename temp;
20230  
20231      %em_tree_create;
20232    %end;
20233  
20234     %else
20235     %if %upcase(&EM_ACTION) = TRAIN %then %do;
20236  
20237         filename temp catalog 'sashelp.emmodl.tree_train.source';
20238         %include temp;
20239         filename temp;
20240         %em_tree_train;
20241     %end;
20242  
20243    %else
20244    %if %upcase(&EM_ACTION) = SCORE %then %do;
20245      filename temp catalog 'sashelp.emmodl.tree_score.source';
20246      %include temp;
20247      filename temp;
20248  
20249      %em_tree_score;
20250  
20251    %end;
20252  
20253    %else
20254    %if %upcase(&EM_ACTION) = REPORT %then %do;
20255  
20256         filename temp catalog 'sashelp.emmodl.tree_report.source';
20257         %include temp;
20258         filename temp;
20259  
20260         %em_tree_report;
20261     %end;
20262  
20263    %else
20264    %if %upcase(&EM_ACTION) = OPENINT %then %do;
20265  
20266         filename temp catalog 'sashelp.emmodl.tree_actions.source';
20267         %include temp;
20268         filename temp;
20269         %EM_TREE_OPENTREEVIEWER;
20270  
20271     %end;
20272  
20273    %else
20274    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
20275  
20276         filename temp catalog 'sashelp.emmodl.tree_actions.source';
20277         %include temp;
20278         filename temp;
20279         %EM_TREE_CLOSETREEVIEWER;
20280  
20281     %end;
20282  
20283  
20284     %doendm:
20285  %mend main;
20286  
20287  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
20289 +%macro em_tree_makePlotDs( multipleTar= );
20291 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
20292 +  %EM_GETNAME(key=OUTNODES, type=DATA);
20293 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
20294 +  %EM_GETNAME(key=OUTRULES, type=DATA);
20296 +  /* determine if validation statistics will be displayed */
20297 +  %let validflag=N;
20298 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
20299 +    /* determine if validation data exists */
20300 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
20301 +      %let validflag=Y;
20302 +    %end;
20303 +  %end;
20305 +   /* retrieve name of decmeta even in presence of multiple targets */
20306 +   %let decmeta = ;
20307 +   %if &EM_DEC_DECMETA eq %then %do;
20308 +     data _Target;
20309 +       set &em_data_variableset;
20310 +       where ROLE='TARGET' and USE in('D', 'Y');
20311 +       keep NAME;
20312 +     run;
20313 +     proc sort data=_Target;
20314 +       by NAME;
20315 +     run;
20316 +     proc sort data=EM_TARGETDECINFO;
20317 +       by TARGET;
20318 +     run;
20319 +     data _Target;
20320 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
20321 +       by NAME;
20322 +       if _a then do;
20323 +         call symput('decmeta', trim(DECMETA));
20324 +       end;
20325 +     run;
20326 +     proc delete data=_Target;run;
20327 +   %end;
20328 +   %else %let decmeta = &EM_DEC_DECMETA;
20331 +  /* retrieve targetEvent from decmeta */
20332 +  %let targetEvent=;
20333 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20334 +    %if %sysfunc(exist(&DECMETA)) %then %do;
20335 +      data _null_;
20336 +       set &DECMETA(where=(_TYPE_="TARGET"));
20337 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
20338 +      run;
20339 +    %end;
20340 +  %end;
20342 +  /* retrieve predicted var for targetEvent from decmeta */
20343 +  %let predTarget=;
20344 +  %let predLvl=;
20345 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20346 +    %if %sysfunc(exist(&DECMETA)) %then %do;
20347 +      data _null_;
20348 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
20349 +       call symput('predTarget', strip(VARIABLE));
20350 +       call symput('predLvl', strip(LEVEL));
20351 +      run;
20352 +    %end;
20353 +  %end;
20354 +  %else %do;
20355 +    %if %sysfunc(exist(&DECMETA)) %then %do;
20356 +      data _null_;
20357 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
20358 +       call symput('predTarget', strip(VARIABLE));
20359 +      run;
20360 +    %end;
20361 +  %end;
20363 +  /* create BelowText value */
20364 +  data belowtext;
20365 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
20366 +    keep node belowtext;
20367 +  run;
20369 +  /* replace belowtext with variable label if it exists */
20370 +  data belowtext2;
20371 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
20372 +    keep node belowtextlbl;
20373 +  run;
20375 +  proc sort data=belowtext; by node; run;
20376 +  proc sort data=belowtext2; by node; run;
20378 +  data belowtext;
20379 +    merge belowtext belowtext2(in=_a);
20380 +    by node;
20381 +    if _a then belowtext=belowtextlbl;
20382 +    keep node belowtext;
20383 +  run;
20385 +  /* create AboveText value */
20386 +  data abovetext;
20387 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
20388 +  run;
20389 +  proc sort data=abovetext; by node numeric_value; run;
20391 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
20392 +  data abovetext;
20393 +    set abovetext(rename=(node=parent));
20394 +    by parent numeric_value;
20395 +    retain abovetext tempstring flag branch origval origchar ;
20396 +    length abovetext $256;
20397 +    length tempstring origchar $64;
20399 +    if STAT in ("INTERVAL", "ORDINAL") then do;
20400 +      if first.parent then do;
20401 +        if missing(character_value) then do;
20402 +          numeric_value = round(numeric_value, &sp_precision);
20403 +          abovetext = "< "||strip(NUMERIC_VALUE);
20404 +          branch = 1;
20405 +          origval = numeric_value;
20406 +          output;
20407 +        end;
20408 +        else do;
20409 +          abovetext = "< "||strip(CHARACTER_VALUE);
20410 +          branch = 1;
20411 +          origchar = character_value;
20412 +          output;
20413 +        end;
20415 +        if first.parent AND last.parent then do;
20416 +          if missing(character_value) then do;
20417 +            numeric_value = round(numeric_value, &sp_precision);
20418 +            branch = branch + 1;
20419 +            abovetext = ">= "||strip(NUMERIC_VALUE);
20420 +            output;
20421 +          end;
20422 +          else do;
20423 +            branch = branch + 1;
20424 +            abovetext = ">= "||strip(CHARACTER_VALUE);
20425 +            output;
20426 +          end;
20427 +        end;
20428 +      end;
20429 +      else if last.parent then do;
20430 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
20431 +          if missing(character_value) then do;
20432 +            numeric_value = round(numeric_value, &sp_precision);
20433 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
20434 +          end;
20435 +          else do;
20436 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
20437 +          end;
20438 +          branch = branch + 1;
20439 +          output;
20441 +          if missing(character_value) then do;
20442 +            numeric_value = round(numeric_value, &sp_precision);
20443 +            abovetext = ">= "||strip(NUMERIC_VALUE);
20444 +          end;
20445 +          else do;
20446 +            abovetext = ">= "||strip(CHARACTER_VALUE);
20447 +          end;
20448 +          branch = branch + 1;
20449 +          output;
20450 +        end;
20451 +        else do;
20452 +          if missing(character_value) then do;
20453 +            numeric_value = round(numeric_value, &sp_precision);
20454 +            abovetext = ">= "||strip(NUMERIC_VALUE);
20455 +          end;
20456 +          else do;
20457 +            abovetext = ">= "||strip(CHARACTER_VALUE);
20458 +          end;
20459 +          branch = branch + 1;
20460 +          output;
20461 +        end;
20462 +      end;
20463 +      else do;
20464 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
20465 +          if missing(character_value) then do;
20466 +            numeric_value = round(numeric_value,&sp_precision);
20467 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
20468 +            origval = numeric_value;
20469 +          end;
20470 +          else do;
20471 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
20472 +            origchar = character_value;
20473 +          end;
20474 +          branch = branch + 1;
20475 +          output;
20477 +        end;
20478 +        else do;
20479 +          if missing(character_value) then do;
20480 +            numeric_value = round(numeric_value, &sp_precision);
20481 +            abovetext = ">= "||strip(NUMERIC_VALUE);
20482 +            origval = numeric_value;
20483 +          end;
20484 +          else do;
20485 +            abovetext = ">= "||strip(CHARACTER_VALUE);
20486 +            origval = character_value;
20487 +          end;
20488 +          branch = branch + 1;
20489 +          output;
20490 +        end;
20491 +      end;
20492 +    end;
20493 +    else do;
20494 +       if first.numeric_value then do;
20495 +         flag = 0;
20496 +         abovetext = strip(CHARACTER_VALUE);
20497 +         branch = numeric_value;
20498 +         if first.numeric_value AND last.numeric_value then do;
20499 +           output;
20500 +         end;
20501 +       end;
20502 +       else if last.numeric_value then do;
20503 +         if flag=0 then do;
20504 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
20505 +           length = length(strip(tempstring));
20506 +           if length < 32 then do;
20507 +             abovetext = strip(tempstring);
20508 +           end;
20509 +           else do;
20510 +             abovetext = strip(abovetext)||", ...";
20511 +             flag = 1;
20512 +           end;
20513 +         end;
20514 +         branch = numeric_value;
20515 +         output;
20516 +       end;
20517 +       else do;
20518 +         if flag=0 then do;
20519 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
20520 +           length = length(strip(tempstring));
20521 +           if length < 32 then do;
20522 +             abovetext = strip(tempstring);
20523 +           end;
20524 +           else do;
20525 +             abovetext = strip(abovetext)||", ...";
20526 +             flag=1;
20527 +           end;
20528 +         end;
20529 +         branch = numeric_value;
20530 +       end;
20531 +    end;
20532 +    keep parent branch abovetext;
20533 +  run;
20535 +  /* Missing value to abovetext */
20536 +  data tempmissing;
20537 +    set &EM_USER_OUTRULES;
20538 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
20539 +    rename node=parent numeric_value=branch character_value=misschar;
20540 +  run;
20543 +  proc sort data=abovetext; by parent branch; run;
20544 +  proc sort data=tempmissing; by parent branch; run;
20545 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
20547 +  data tempoutnodes;
20548 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
20549 +    by parent branch;
20550 +    length traintotal validtotal 8;
20551 +    retain traintotal validtotal;
20553 +    if _a then do;
20554 +      if ^MISSING(abovetext) then do;
20555 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
20556 +      end;
20557 +      else do;
20558 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
20559 +      end;
20560 +    end;
20561 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
20563 +    if node=1 then do;
20564 +      traintotal = N;
20565 +      validtotal=VN;
20566 +    end;
20568 +    drop role rank stat misschar belowtext;
20569 +  run;
20570 +  proc sort data=tempoutnodes; by node; run;
20571 +  proc sort data=belowtext; by node; run;
20573 +  data tempoutnodes;
20574 +    merge tempoutnodes belowtext;
20575 +    by node;
20577 +  run;
20579 +  /* determine if adjusted counts exists; if so, use these vs true counts */
20580 +  %let adjusted = N;
20581 +  %let npriors = 0;
20582 +  data _null_ ;
20583 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
20584 +    if eof then do ;
20585 +      call symput("npriors" , strip(put(_N_,best.))) ;
20586 +    end;
20587 +  run;
20588 +  %if &npriors gt 0 %then %let adjusted=Y;
20591 +  /* create a table with targetUsed and targetLevel columns for each node */
20592 +  data temptarmeta;
20593 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
20594 +    %if &multipleTar eq N %then %do;
20595 +      AND USE in ('D', 'Y')
20596 +    %end;
20597 +    ));
20598 +    length TARGET $32;
20599 +    Target=name;
20600 +    keep target level;
20601 +  run;
20603 +  %if &multipleTar eq Y %then %do;
20604 +    data temptargetused;
20605 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
20606 +      keep node target;
20607 +    run;
20608 +    proc sort data=temptargetused; by target; run;
20609 +    proc sort data=temptarmeta; by target; run;
20610 +    data temptargetused;
20611 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
20612 +      by target;
20613 +      if _a and _b;
20614 +    run;
20615 +  %end;
20616 +  %else %do;
20617 +    data temptargetused;
20618 +      set &EM_USER_OUTSTATS;
20619 +      length target $32 tarlevel $10;
20620 +      target="%EM_TARGET";
20621 +      tarlevel="%EM_TARGET_LEVEL";
20622 +      keep node target tarlevel;
20623 +    run;
20624 +    proc sort data=temptargetused nodupkey; by node; run;
20625 +  %end;
20627 +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
20628 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
20629 +  proc sort data=temptargetused; by node; run;
20632 +  /* create tables for all interval targets as well as all class targets */
20633 +  data tempinterval tempclass;
20634 +    merge tempoutstats temptargetused( rename=(target=targetused));
20635 +    by node;
20636 +    %if "&multipleTar" eq "Y" %then %do;
20637 +      if ((missing(Target)) OR (target=targetused ));
20638 +    %end;
20640 +    if tarlevel="INTERVAL" then output tempinterval;
20641 +    else output tempclass;
20642 +  run;
20644 +  /* initialize intTarget and classTarget flags */
20645 +  %let em_intNobs =0;
20646 +  %let em_classNobs = 0;
20647 +  %let em_intTarget= N;
20648 +  %let em_classTarget= N;
20650 +  proc sql;
20651 +    reset noprint;
20652 +    select count(*) into :em_intNobs from tempinterval;
20653 +  quit;
20654 +  proc sql;
20655 +    reset noprint;
20656 +    select count(*) into :em_classNobs from tempclass;
20657 +  quit;
20659 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
20660 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
20662 +  /* retrieve all information for interval targets */
20663 +  %if &em_intTarget eq Y %then %do;
20665 +    /* determine if leaf variable exists */
20666 +    %let dsid=%sysfunc(open(tempinterval,i));
20667 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
20668 +    %let rc=%sysfunc(close(&dsid));
20670 +    proc transpose data=tempinterval
20671 +      %if &leafexists %then %do;
20672 +        (drop=leaf)
20673 +      %end;
20674 +      %if &validexist %then %do;
20675 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
20676 +      %end;
20677 +      %else %do;
20678 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
20679 +      %end;
20680 +      by node;
20681 +      id statname;
20682 +    run;
20683 +    data tempinterval;
20684 +      set tempinterval;
20685 +      if missing(N) then delete;
20686 +    run;
20687 +  %end;
20689 +  /* retrieve all information for class targets */
20690 +  %if &em_classTarget eq Y %then %do;
20691 +    proc sort data=tempclass; by node category; run;
20692 +    %if &validflag eq N %then %do;
20693 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
20694 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
20695 +    %end;
20696 +    %else %do;
20697 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
20698 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
20699 +    %end;
20700 +      set tempclass;
20702 +      %if &validflag eq N %then %do;
20703 +        %if "&adjusted" eq "N" %then %do;
20704 +          if statname="N" then output tempn;
20705 +        %end;
20706 +        %else %do;
20707 +          if statname="NPRIORS" then output tempn;
20708 +        %end;
20709 +        else if statname="PREDICTION" then output temppredict;
20710 +        else if statname="PROBABILITY" then output tempprob;
20711 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
20712 +        else if statname="ALTERNATIVE LOSS" then output temploss;
20713 +      %end;
20714 +      %else %do;
20715 +        %if "&adjusted" eq "N" %then %do;
20716 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
20717 +        %end;
20718 +        %else %do;
20719 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
20720 +        %end;
20721 +        else if statname="PREDICTION" then output temppredict;
20722 +        else if statname="PROBABILITY" then output tempprob;
20723 +        else if statname="VALID: PROBABILITY" then output tempvprob;
20724 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
20725 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
20726 +      %end;
20727 +    run;
20730 +    /* determine if profit/loss exists in tempprofit */
20731 +    %let em_profitflag=0;
20732 +    %let em_lossflag=0;
20733 +    proc sql;
20734 +      reset noprint;
20735 +      select count(*) into :em_profitflag from tempprofit;
20736 +    quit;
20737 +    proc sql;
20738 +      reset noprint;
20739 +      select count(*) into :em_lossflag from temploss;
20740 +    quit;
20742 +    %if &validFlag eq Y %then %do;
20743 +      proc transpose data=tempn
20744 +        %if "&adjusted" eq "N" %then %do;
20745 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
20746 +        %end;
20747 +        %else %do;
20748 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
20749 +        %end;
20750 +        by node;
20751 +        id statname;
20752 +      run;
20753 +      %if &em_profitflag ne 0 %then %do;
20754 +        proc transpose data=tempprofit out=tempprofit;
20755 +          by node category;
20756 +          id statname ;
20757 +        run;
20758 +      %end;
20759 +      %if &em_lossflag ne 0 %then %do;
20760 +        proc transpose data=temploss out=temploss;
20761 +          by node category;
20762 +          id statname ;
20763 +        run;
20764 +      %end;
20765 +      data tempprob;
20766 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
20767 +        by node
20768 +        %if &multipleTar eq Y %then %do;
20769 +          target
20770 +        %end;
20771 +        category;
20772 +      run;
20773 +    %end;
20775 +    /* store percentcorrect value */
20776 +    data temppredict;
20777 +      merge tempprob temppredict(in=_a);
20778 +      by node category;
20779 +      if _a then do;
20780 +        percentCorrect = statvalue;
20781 +        %if &validFlag eq Y %then %do;
20782 +          vpercentCorrect= vstatvalue;
20783 +        %end;
20784 +      end;
20785 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
20786 +      %if &validFlag eq Y %then %do;
20787 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
20788 +      %end;
20789 +      ;
20790 +      if missing(percentCorrect) then delete;
20791 +      drop target;
20792 +    run;
20794 +    /* build profittext */
20795 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
20796 +      data tempprofittext(keep= node profittext profitloss);
20797 +        length profittext $800 profitloss 8.;
20798 +        retain profittext profitloss;
20800 +        merge tempprob
20801 +        %if &em_profitflag ne 0 %then %do;
20802 +          tempprofit
20803 +        %end;
20804 +        %else %if &em_lossflag ne 0 %then %do;
20805 +          temploss
20806 +        %end;
20807 +        ;
20808 +        by node category;
20810 +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
20811 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
20812 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
20813 +          %let profittype = ALL;
20814 +        %end;
20816 +        /* create the profitloss variable for nodecolor if selected */
20817 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
20819 +        %if "&profittype" eq "ALL" %then %do;
20820 +          if strip(CATEGORY)="&targetEvent" then do;
20821 +            profitloss=statvalue;
20822 +          end;
20823 +          if first.node then do;
20824 +            %if &validFlag eq N %then %do;
20825 +             %if &em_profitflag ne 0 %then %do;
20826 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20827 +             %end;
20828 +             %if &em_lossflag ne 0 %then %do;
20829 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20830 +             %end;
20831 +            %end;
20832 +            %else %do;
20833 +             %if &em_profitflag ne 0 %then %do;
20834 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
20834!+;
20835 +             %end;
20836 +             %if &em_lossflag ne 0 %then %do;
20837 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
20838 +             %end;
20839 +            %end;
20840 +          end;
20841 +          else if last.node then do;
20842 +            %if &validFlag eq N %then %do;
20843 +             %if &em_profitflag ne 0 %then %do;
20844 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20845 +             %end;
20846 +             %if &em_lossflag ne 0 %then %do;
20847 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20848 +             %end;
20849 +             /*if CATEGORY="&targetEvent" then do;
20850 +               profitloss=statvalue;
20851 +             end;*/
20852 +            %end;
20853 +            %else %do;
20854 +             %if &em_profitflag ne 0 %then %do;
20855 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
20855!+14.&EM_PROPERTY_SPLITPRECISION);
20856 +                if CATEGORY="&targetEvent" then do;
20857 +                 profitloss=ALTERNATIVE_PROFIT;
20858 +                end;
20859 +             %end;
20860 +             %if &em_lossflag ne 0 %then %do;
20861 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
20861!+14.&EM_PROPERTY_SPLITPRECISION);
20862 +                if CATEGORY="&targetEvent" then do;
20863 +                  profitloss=ALTERNATIVE_LOSS;
20864 +                end;
20865 +             %end;
20866 +            %end;
20867 +            output;
20868 +          end;
20869 +          else do;
20870 +            %if &validFlag eq N %then %do;
20871 +             %if &em_profitflag ne 0 %then %do;
20872 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20873 +             %end;
20874 +             %if &em_lossflag ne 0 %then %do;
20875 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20876 +             %end;
20877 +            %end;
20878 +            %else %do;
20879 +             %if &em_profitflag ne 0 %then %do;
20880 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
20880!+14.&EM_PROPERTY_SPLITPRECISION);
20881 +             %end;
20882 +             %if &em_lossflag ne 0 %then %do;
20883 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
20883!+14.&EM_PROPERTY_SPLITPRECISION);
20884 +             %end;
20885 +            %end;
20886 +          end;
20887 +        %end;
20888 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
20889 +          if strip(CATEGORY) = "&targetevent" then do;
20890 +            %if &validFlag eq N %then %do;
20891 +             %if &em_profitflag ne 0 %then %do;
20892 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20893 +             %end;
20894 +             %if &em_lossflag ne 0 %then %do;
20895 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20896 +             %end;
20897 +             profitloss=statvalue;
20898 +            %end;
20899 +            %else %do;
20900 +             %if &em_profitflag ne 0 %then %do;
20901 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
20901!+;
20902 +                profitloss=ALTERNATIVE_PROFIT;
20903 +             %end;
20904 +             %if &em_lossflag ne 0 %then %do;
20905 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
20906 +                profitloss=ALTERNATIVE_LOSS;
20907 +             %end;
20908 +            %end;
20909 +            output;
20910 +          end;
20911 +        %end;
20912 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
20913 +          if strip(CATEGORY) = "&targetevent" then do;
20914 +            %if &validFlag eq N %then %do;
20915 +             profitloss=statvalue;
20916 +            %end;
20917 +            %else %do;
20918 +             %if &em_profitflag ne 0 %then %do;
20919 +                profitloss=ALTERNATIVE_PROFIT;
20920 +             %end;
20921 +             %if &em_lossflag ne 0 %then %do;
20922 +                profitloss=ALTERNATIVE_LOSS;
20923 +             %end;
20924 +            %end;
20925 +            output;
20926 +          end;
20927 +        %end;
20928 +      run;
20929 +    %end;
20931 +    data tempprob(keep= node probtext);
20932 +      length probtext $800;
20933 +      retain probtext;
20934 +      set tempprob ;
20935 +      by node;
20937 +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
20938 +      %let probtype = &EM_PROPERTY_TARGET;
20939 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
20940 +        %let probtype = ALL;
20941 +      %end;
20943 +      %if "&probtype" eq "ALL" %then %do;
20944 +        if first.node then do;
20945 +          %if &validFlag eq N %then %do;
20946 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20947 +          %end;
20948 +          %else %do;
20949 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20950 +          %end;
20951 +        end;
20952 +        else if last.node then do;
20953 +          %if &validFlag eq N %then %do;
20954 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20955 +          %end;
20956 +          %else %do;
20957 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20958 +          %end;
20959 +          output;
20960 +        end;
20961 +        else do;
20962 +          %if &validFlag eq N %then %do;
20963 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20964 +          %end;
20965 +          %else %do;
20966 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20967 +          %end;
20968 +        end;
20969 +      %end;
20970 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
20971 +        if strip(CATEGORY) = "&targetevent" then do;
20972 +          %if &validFlag eq N %then %do;
20973 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20974 +          %end;
20975 +          %else %do;
20976 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20977 +          %end;
20978 +          output;
20979 +        end;
20980 +      %end;
20981 +      %else %if "&probtype" eq "NONE" %then %do;
20982 +        if last.node then do;
20983 +          output;
20984 +        end;
20985 +      %end;
20986 +    run;
20987 +  %end;
20989 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
20991 +  %let oldexists=0;
20992 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
20993 +     data old_tree_plot;
20994 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
20995 +        rename nodecolor=oldnodecolor;
20996 +     run;
20998 +     proc sort data=old_tree_plot;
20999 +        by node;
21000 +     run;
21002 +     %let oldexists=1;
21003 +  %end;
21005 +  data &EM_USER_TREE_PLOT;
21006 +    length textall $800;
21007 +    merge tempoutnodes temptargetused
21009 +    %if &em_intTarget eq Y %then %do;
21010 +      tempinterval
21011 +    %end;
21013 +    %if &em_classTarget eq Y %then %do;
21015 +      %if &validFlag eq N %then %do;
21016 +        tempn(rename=(statvalue=N))
21017 +      %end;
21018 +      %else %do;
21019 +        tempn
21020 +      %end;
21022 +      temppredict tempprob
21024 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
21025 +        tempprofittext
21026 +      %end;
21027 +    %end;
21028 +    ;
21029 +    by node;
21031 +    /* build nodetext based on user selection */
21032 +    textall="";
21034 +    %if &em_intTarget eq Y %then %do;
21035 +    if tarlevel="INTERVAL" then do;
21036 +      /* Nodeid */
21037 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
21038 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
21039 +      %end;
21041 +      /* Target identifier if multiple targets are used */
21042 +      %if "&multipleTar" eq "Y" %then %do;
21043 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
21044 +      %end;
21046 +      %if &validFlag eq Y %then %do;
21047 +         /* Column labels displayed in validflag eq Y only */
21048 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
21049 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
21049!+noquote ))";
21050 +         %end;
21052 +         /* Average values */
21053 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
21054 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
21055 +         %end;
21057 +         /* RASE */
21058 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
21059 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
21060 +         %end;
21062 +         /* Count */
21063 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
21064 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
21065 +         %end;
21066 +      %end;
21067 +      %else %do;
21068 +         /* Average values */
21069 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
21070 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
21071 +         %end;
21073 +         /* RASE */
21074 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
21075 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
21076 +         %end;
21078 +         /* Count */
21079 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
21080 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
21081 +         %end;
21082 +      %end;
21084 +      /* nodecolor */
21085 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
21086 +        nodecolor=PREDICTION;
21087 +      %end;
21088 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
21089 +        nodecolor=RASE;
21090 +      %end;
21091 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
21092 +        nodecolor=1;
21093 +      %end;
21095 +    end;
21096 +    %end;
21097 +    %if &em_classTarget eq Y %then %do;
21098 +    if tarlevel^="INTERVAL" then  do;
21100 +      /* Nodeid */
21101 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
21102 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
21103 +      %end;
21104 +      /* Target identifier if multiple targets are used */
21105 +      %if "&multipleTar" eq "Y" %then %do;
21106 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
21107 +      %end;
21109 +      /* Predicted values */
21110 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
21111 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
21112 +      %end;
21114 +      /* Column labels displayed in validflag eq Y only */
21115 +      %if "&ValidFlag" eq "Y" %then %do;
21116 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
21117 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
21117!+noquote ))";
21118 +        %end;
21119 +      %end;
21121 +      /* Target Values */
21122 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
21123 +        textall=strip(textall)||"0A"x||strip(probtext);
21124 +      %end;
21126 +      /* include profit or loss for all target levels */
21127 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
21128 +        textall=strip(textall)||"0A"x||strip(profittext);
21129 +      %end;
21131 +      %if &validFlag eq N %then %do;
21132 +        /* Percent Correct */
21133 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
21134 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
21135 +        %end;
21137 +         /* Count */
21138 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
21139 +          %if "&adjusted" eq "N" %then %do;
21140 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
21141 +          %end;
21142 +          %else %do;
21143 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
21144 +          %end;
21145 +         %end;
21146 +      %end;
21147 +      %else %do;
21148 +        /* Percent Correct */
21149 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
21150 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
21151 +        %end;
21153 +         /* Count */
21154 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
21155 +          %if "&adjusted" eq "N" %then %do;
21156 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
21157 +          %end;
21158 +          %else %do;
21159 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
21160 +          %end;
21161 +         %end;
21162 +      %end;
21164 +      /* nodecolor */
21165 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
21166 +       %if &multipleTar ne Y %then %do;
21167 +        nodecolor=&predTarget;
21168 +       %end;
21169 +       %else %do;
21170 +         nodecolor=percentcorrect;
21171 +       %end;
21172 +      %end;
21173 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
21174 +        nodecolor=percentcorrect;
21175 +      %end;
21176 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
21177 +        nodecolor=1;
21178 +      %end;
21179 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
21180 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
21181 +          nodecolor=percentcorrect;
21182 +        %end;
21183 +        %else %do;
21184 +          nodecolor=profitloss;
21185 +        %end;
21186 +      %end;
21188 +    end;
21189 +    %end;
21190 +    %if &em_intTarget eq Y %then %do;
21191 +     drop  PREDICTION  TARGET TARLEVEL
21192 +     %if &ValidFlag eq Y %then %do;
21193 +         VPREDICTION
21194 +     %end;
21195 +     ;
21196 +    %end;
21197 +    %if &em_classTarget eq Y %then %do;
21198 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
21199 +     %if &ValidFlag eq Y %then %do;
21200 +         VSTATVALUE
21201 +     %end;
21202 +     ;
21203 +    %end;
21205 +  run;
21207 +  /* add leaf index information to plotds - based on primary target only*/
21208 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21209 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
21210 +      set &EM_USER_OUTSTATS;
21211 +      if ((statname="PROBABILITY"
21212 +      %if &validexist %then %do;
21213 +       or statname="VALID: PROBABILITY"
21214 +      %end;
21215 +      ) AND (CATEGORY="&TARGETEVENT")
21216 +      %if "&multipleTar" eq "Y" %then %do;
21217 +        AND (Target="%EM_TARGET")
21218 +      %end;
21219 +      );
21220 +    run;
21222 +    %if &validexist %then %do;
21223 +      proc sort data=tempprob; by node; run;
21224 +      %let vpredTarget = V%substr(&predTarget, 2);
21225 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
21226 +         by node;
21227 +         id statname;
21228 +      run;
21229 +    %end;
21230 +  %end;
21231 +  %else %do;
21232 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
21233 +      set &EM_USER_OUTSTATS;
21234 +      if ((statname="PREDICTION"
21235 +      %if &validexist %then %do;
21236 +       or statname="VALID: PREDICTION"
21237 +      %end;
21238 +      )
21239 +      %if "&multipleTar" eq "Y" %then %do;
21240 +        AND (Target="%EM_TARGET")
21241 +      %end;
21242 +      );
21243 +    run;
21244 +    %if &validexist %then %do;
21245 +      proc sort data=tempprob; by node; run;
21246 +      %let vpredTarget = V%substr(&predTarget, 2);
21247 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
21248 +         by node;
21249 +         id statname;
21250 +      run;
21251 +    %end;
21252 +  %end;
21254 +  proc sort data=tempprob; by node; run;
21255 +  data tempoutnodes;
21256 +    merge tempoutnodes tempprob;
21257 +    by node;
21258 +  run;
21260 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
21261 +  data tempnodes;
21262 +    retain traintotal validtotal;
21263 +    set tempnodes(where=(leaf ne . ));
21264 +    tprob=round(&predTarget, .01);
21265 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21266 +      percevent_train=round(tprob*100, .01);
21267 +    %end;
21268 +    %else %do;
21269 +      percevent_train=tprob;
21270 +    %end;
21272 +    perc_train=round((n/traintotal)*100, 0.01);
21273 +    /* leafwidth already has a *10 multiplier */
21274 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
21276 +    %if &validexist %then %do;
21277 +      %let vpredTarget = V%substr(&predTarget,2);
21278 +      vprob=round(&vpredTarget, .01);
21279 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21280 +        percevent_valid=round(vprob*100, .01);
21281 +      %end;
21282 +      %else %do;
21283 +        percevent_valid=vprob;
21284 +      %end;
21285 +      perc_valid=round((vn/validtotal)*100, .01);
21286 +    %end;
21288 +    index=_N_;
21289 +    keep node index tprob perc_train percevent_train
21290 +    %if &validexist %then %do;
21291 +        vprob percevent_valid perc_valid
21292 +    %end;
21293 +    ;
21294 +  run;
21295 +  proc sort data=tempnodes; by node; run;
21296 +  data &EM_USER_TREE_PLOT;
21297 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
21298 +    by node;
21299 +    if missing(node) then delete;
21300 +    %if &oldexists %then %do;
21301 +      if missing(nodecolor) then nodecolor=oldnodecolor;
21302 +      drop oldnodecolor;
21303 +    %end;
21304 +    abovetext = compbl(abovetext);
21306 +    /* add variable labels */
21307 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
21308 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
21309 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
21310 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
21311 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
21312 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
21314 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21315 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
21316 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
21317 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
21318 +          %end;
21319 +          %else %do;
21320 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
21321 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
21322 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
21323 +          %end;
21324 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
21326 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
21327 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
21328 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21329 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
21330 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
21331 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
21332 +          %end;
21333 +          %else %do;
21334 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
21335 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
21336 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
21337 +          %end;
21338 +    ;
21339 +  run;
21341 +  /* delete temporary tables */
21342 +  proc datasets lib=work nolist;
21343 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
21344 +  run;
21346 +%mend em_tree_makePlotDs;
21350 +%macro em_tree_report;
21352 +   /* report properties */
21353 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
21354 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
21355 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
21356 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
21357 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
21358 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
21359 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
21360 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
21361 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
21362 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
21363 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
21364 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
21365 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
21367 +   %let validexist=0;
21368 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
21369 +     %let validexist=1;
21370 +   %end;
21372 +   /* determine if multiple targets will be processed */
21373 +   %let em_tree_multipleTargets=N;
21374 +   %let em_tree_numTarget=1;
21375 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
21376 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
21377 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
21378 +         %let em_tree_multipleTargets=N;
21379 +      %end;
21380 +      %else %do;
21381 +        data _null_;
21382 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
21383 +          if eof then
21384 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
21385 +        run;
21387 +        %if &em_tree_numTarget gt 1 %then %do;
21388 +           %let em_tree_multipleTargets=Y;
21389 +        %end;
21390 +     %end;
21391 +   %end;
21393 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
21395 +   /* variable importance */
21396 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
21397 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
21399 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
21400 +     /* and the columns may not be generated                                                                                 */
21401 +     %let em_tree_cvexists=;
21402 +     %let em_tree_surrexists=.;
21403 +     data _null_;
21404 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
21405 +       if eof then do ;
21406 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
21407 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
21408 +       end;
21409 +     run;
21411 +     data &EM_USER_OUTIMPORT;
21412 +         set &EM_USER_OUTIMPORT;
21413 +         /* format columns based on Precison value specified */
21414 +         format importance 15.&EM_PROPERTY_PRECISION
21415 +              %if &validexist %then %do;
21416 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
21417 +              %end;
21418 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
21419 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
21420 +              %end;
21421 +         ;
21422 +     run;
21424 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
21425 +     proc print data=&EM_USER_OUTIMPORT
21426 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
21427 +          (where=((nrules>0) OR (nsurrogates>0)))
21428 +        %end;
21429 +        %else %do;
21430 +           (where=(nrules>0))
21431 +        %end;
21432 +        label noobs
21433 +        ;
21434 +     run;
21435 +     title10;
21437 +   %end;
21439 +   /* Sequence */
21440 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
21441 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
21442 +   data _null_ ;
21443 +      set &EM_USER_outseq (obs=2) end=eof ;
21444 +      if eof then do ;
21445 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
21446 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
21447 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
21448 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
21449 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
21450 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
21451 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
21452 +      end;
21453 +    run;
21455 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
21456 +      data &EM_USER_OUTSEQ;
21457 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
21458 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
21459 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21460 +           _XMISC_=_VMISC_
21461 +        %end;
21462 +        %if "&em_tree_aprof" ne "."  %then %do;
21463 +           _XAPROF_=_VAPROF_
21464 +           _XPROF_ = _VPROF_
21465 +        %end;
21466 +        %if "&em_tree_aloss" ne "."  %then %do;
21467 +           _XALOSS_=_VALOSS_
21468 +        %end;
21469 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
21470 +           _XPASE_ = _VPASE_
21471 +           _XPMISC_ = _VPMISC_
21472 +        %end;
21474 +        ));
21475 +     %end;
21476 +     %else %do;
21477 +        set &EM_USER_OUTSEQ;
21478 +     %end;
21480 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
21481 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21482 +            _MISC_   15.&EM_PROPERTY_PRECISION
21483 +         %end;
21484 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
21485 +            _PASE_  15.&EM_PROPERTY_PRECISION
21486 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
21487 +         %end;
21488 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
21489 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
21490 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21491 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
21492 +            %end;
21493 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
21494 +              _VPASE_  15.&EM_PROPERTY_PRECISION
21495 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
21496 +            %end;
21497 +         %end;
21498 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
21499 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
21500 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21501 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
21502 +            %end;
21503 +         %end;
21504 +         %if "&em_tree_seq" ne "." %then %do;
21505 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
21506 +         %end;
21507 +         %if "&em_tree_vseq" ne "." %then %do;
21508 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
21509 +         %end;
21510 +         %if "&em_tree_aprof" ne "." %then %do;
21511 +           _APROF_ 15.&EM_PROPERTY_PRECISION
21512 +           _PROF_ 15.&EM_PROPERTY_PRECISION
21513 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
21514 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
21515 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
21516 +           %end;
21517 +         %end;
21518 +         %else %if "&em_tree_aloss" ne "." %then %do;
21519 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
21520 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
21521 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
21522 +           %end;
21523 +         %end;
21524 +      ;
21525 +    run;
21526 +   %end;
21528 +   /* Observation Based Importance */
21529 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
21531 +      /* need to check for 0 obs */
21532 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
21533 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
21534 +      %let rc=%sysfunc(close(&dsid));
21536 +      %if &onobs %then %do;
21537 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
21538 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
21540 +         data &EM_USER_OUTOBSIMP;
21541 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
21542 +           if _a;
21543 +           by _INPUT1_;
21544 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
21545 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21546 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
21547 +                   %end;
21548 +                   ;
21549 +         run;
21550 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
21551 +      %end;
21552 +   %end;
21554 +  %end;
21556 +  /* create dataset to support tree diagram and icicle plot */
21557 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
21558 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
21560 +  /* display tree diagram */
21561 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
21562 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
21564 +  /* display icicle diagram */
21565 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
21566 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
21568 +  /* Leaf Statistics Plot */
21569 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
21571 +  /* print leaf information to output window */
21572 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
21574 +     proc sort data=&EM_USER_TREE_PLOT out=t;
21575 +       by descending N;
21576 +     run;
21578 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
21579 +     %local vn;
21580 +     data _null_;
21581 +       set t (obs=2) end=eof;
21582 +       if eof then do;
21583 +         call symput("vn", strip(put(vn, best.)));
21584 +       end;
21585 +     run;
21587 +     data t;
21588 +       set t;
21589 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
21590 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
21591 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
21592 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
21593 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
21594 +       %end;
21595 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
21596 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
21597 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
21598 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
21599 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
21600 +          %end;
21601 +       %end;
21602 +       ;
21603 +     run;
21605 +     /* determine if rase is found in t */
21606 +    %let dsid=%sysfunc(open(t,i));
21607 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
21608 +    %let rc=%sysfunc(close(&dsid));
21610 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
21611 +     proc print data=t noobs label;
21612 +       where tprob ne .;
21613 +       var node depth N tprob
21614 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
21615 +         %if "&vn" ne "." %then %do;
21616 +           VN
21617 +         %end;
21618 +         vprob
21619 +       %end;
21620 +       %if &raseexists %then %do;
21621 +            RASE
21622 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
21623 +              VRASE
21624 +            %end;
21625 +       %end;
21626 +       ;
21627 +     run;
21628 +     title10;
21629 +  %end;
21631 +  /* create plots that are done during training of node */
21632 +  /* display iterative plot, including reference line */
21633 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
21634 +   /* %if &nleaves eq  %then %do; */
21635 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
21636 +      data _null_;
21637 +        set &EM_USER_OUTTOPOLOGY end=eof;
21638 +        if eof then do;
21639 +          call symput('nleaves', LEAF);
21640 +        end;
21641 +      run;
21642 +   /* %end; */
21644 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
21645 +    /*%EM_REPORT(view=1, Y=_ASE_); */
21646 +  %end;
21648 +  /* display leaf statistics */
21649 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
21651 +  /* stats by node if multiple targets = Y */
21652 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
21653 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
21654 +    data &EM_USER_OUTSTATS;
21655 +      set &EM_USER_OUTSTATS;
21657 +     * if STATNAME="TARGET" then delete;
21658 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
21659 +      drop leaf;
21660 +    run;
21661 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
21663 +  %end;
21664 +  %else %do;
21665 +    /* add outstats and outdescribe to spk but not results */
21666 +    %EM_REPORT(viewtype=, key=OUTSTATS);
21667 +  %end;
21669 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE3_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 42 observations read from the data set EMWS3.TREE3_OUTIMPORT.
NOTE: The data set EMWS3.TREE3_OUTIMPORT has 42 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 6 observations read from the data set EMWS3.TREE3_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE3_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 12 observations read from the data set EMWS3.TREE3_OUTSEQ.
NOTE: The data set EMWS3.TREE3_OUTSEQ has 12 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE3_CATEGORY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE3_CATEGORY_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='TEACHER');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 9 observations read from the data set EMWS3.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 9 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 0 observations read from the data set EMWS3.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 9 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 9 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is empty.
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 9 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 0 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 9 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 9 observations read from the data set EMWS3.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 9 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 9 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99   
NOTE: There were 9 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 18 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 234 observations read from the data set EMWS3.TREE3_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 18 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 18 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 9 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 9 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 19 observations read from the data set EMWS3.TREE3_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 19 observations and 54 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 18 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 19 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 9 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 19 observations and 55 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      


NOTE: There were 19 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 19 observations and 55 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 9 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 9 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 19 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 9 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 19 observations and 56 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 0 observations read from the data set EMWS3.TREE3_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 513 observations read from the data set EMWS3.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 513 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 513 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 494 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 19 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 513 observations read from the data set EMWS3.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 513 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 513 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 19 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 513 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 513 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 513 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 513 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 38 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 19 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 228 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 228 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 38 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 19 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 228 observations read from the data set WORK.TEMPPROB.
NOTE: There were 228 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 228 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 228 observations read from the data set WORK.TEMPPROB.
NOTE: There were 19 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 19 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 228 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 19 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 19 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 19 observations and 56 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196   
NOTE: There were 19 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 19 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 19 observations read from the data set WORK.TEMPN.
NOTE: There were 19 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 19 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS3.TREE3_TREE_PLOT has 19 observations and 60 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 513 observations read from the data set EMWS3.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 38 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 38 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 38 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 38 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 19 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 19 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 19 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 19 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 19 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 19 observations and 56 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 19 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 19 observations and 56 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 10 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 10 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 10 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 10 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 19 observations read from the data set EMWS3.TREE3_TREE_PLOT.
NOTE: There were 10 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS3.TREE3_TREE_PLOT has 19 observations and 67 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 19 observations read from the data set EMWS3.TREE3_TREE_PLOT.
NOTE: The data set WORK.T has 19 observations and 67 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 19 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 19 observations and 67 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 10 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141   
NOTE: There were 19 observations read from the data set EMWS3.TREE3_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

21670  
21671  *------------------------------------------------------------*;
21672  * End REPORT: Tree3;
21673  *------------------------------------------------------------*;

21674  /* Reset EM Options */
21675  options formchar="|----|+|---+=|-/\<>*";
21676  options nocenter ls=256 ps=10000;
21677  goptions reset=all device=GIF NODISPLAY;

21678  proc sort data=WORK.EM_USER_REPORT;
21679  by ID VIEW;
21680  run;

NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21681  proc sort data=EMWS3.TextCluster10_CMeta_TRAIN out=WORK.SUBSETINMETA;
21682  by NAME;
21683  run;

NOTE: There were 54 observations read from the data set EMWS3.TEXTCLUSTER10_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 54 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21684  proc sort data=EMWS3.Tree3_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
21685  by NAME;
21686  run;

NOTE: There were 54 observations read from the data set EMWS3.TREE3_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 54 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

21687  data WORK.ASSESS_META;
21688  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
21689  by NAME;
21690  run;

NOTE: There were 54 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 54 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 54 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

21691  data EM_temp_assessMeta;
21692  set EMWS3.Tree3_CMeta_TRAIN;
21693  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
21694  run;

NOTE: There were 52 observations read from the data set EMWS3.TREE3_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 52 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21695  data EM_temp_assessdata;
21696  set EMWS3.Tree3_TRAIN(keep=
21697  F_Category
21698  I_Category
21699  P_CategoryADVOCATE
21700  P_CategoryBUSINESS_DEVELOPMENT
21701  P_CategoryCONSULTANT
21702  P_CategoryDESIGNER
21703  P_CategoryDIGITAL_MEDIA
21704  P_CategoryFITNESS
21705  P_CategoryHEALTHCARE
21706  P_CategoryHR
21707  P_CategoryINFORMATION_TECHNOLOGY
21708  P_CategoryOTHER
21709  P_CategorySALES
21710  P_CategoryTEACHER
21711  Q_CategoryADVOCATE
21712  Q_CategoryBUSINESS_DEVELOPMENT
21713  Q_CategoryCONSULTANT
21714  Q_CategoryDESIGNER
21715  Q_CategoryDIGITAL_MEDIA
21716  Q_CategoryFITNESS
21717  Q_CategoryHEALTHCARE
21718  Q_CategoryHR
21719  Q_CategoryINFORMATION_TECHNOLOGY
21720  Q_CategoryOTHER
21721  Q_CategorySALES
21722  Q_CategoryTEACHER
21723  R_CategoryADVOCATE
21724  R_CategoryBUSINESS_DEVELOPMENT
21725  R_CategoryCONSULTANT
21726  R_CategoryDESIGNER
21727  R_CategoryDIGITAL_MEDIA
21728  R_CategoryFITNESS
21729  R_CategoryHEALTHCARE
21730  R_CategoryHR
21731  R_CategoryINFORMATION_TECHNOLOGY
21732  R_CategoryOTHER
21733  R_CategorySALES
21734  R_CategoryTEACHER
21735  U_Category
21736  V_CategoryADVOCATE
21737  V_CategoryBUSINESS_DEVELOPMENT
21738  V_CategoryCONSULTANT
21739  V_CategoryDESIGNER
21740  V_CategoryDIGITAL_MEDIA
21741  V_CategoryFITNESS
21742  V_CategoryHEALTHCARE
21743  V_CategoryHR
21744  V_CategoryINFORMATION_TECHNOLOGY
21745  V_CategoryOTHER
21746  V_CategorySALES
21747  V_CategoryTEACHER
21748  _WARN_
21749  Category
21750  );
21751  run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS3.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      
NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER10_TRAIN.
NOTE: There were 674 observations read from the data set EMWS3.TREE3_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 674 observations and 53 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      
















26033   data EM_temp_assessMeta;
26034   set EMWS3.Tree3_CMeta_TRAIN;
26035   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
26036   run;

NOTE: There were 52 observations read from the data set EMWS3.TREE3_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 52 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

26037   data EM_temp_assessdata;
26038   set EMWS3.Tree3_VALIDATE(keep=
26039   F_Category
26040   I_Category
26041   P_CategoryADVOCATE
26042   P_CategoryBUSINESS_DEVELOPMENT
26043   P_CategoryCONSULTANT
26044   P_CategoryDESIGNER
26045   P_CategoryDIGITAL_MEDIA
26046   P_CategoryFITNESS
26047   P_CategoryHEALTHCARE
26048   P_CategoryHR
26049   P_CategoryINFORMATION_TECHNOLOGY
26050   P_CategoryOTHER
26051   P_CategorySALES
26052   P_CategoryTEACHER
26053   Q_CategoryADVOCATE
26054   Q_CategoryBUSINESS_DEVELOPMENT
26055   Q_CategoryCONSULTANT
26056   Q_CategoryDESIGNER
26057   Q_CategoryDIGITAL_MEDIA
26058   Q_CategoryFITNESS
26059   Q_CategoryHEALTHCARE
26060   Q_CategoryHR
26061   Q_CategoryINFORMATION_TECHNOLOGY
26062   Q_CategoryOTHER
26063   Q_CategorySALES
26064   Q_CategoryTEACHER
26065   R_CategoryADVOCATE
26066   R_CategoryBUSINESS_DEVELOPMENT
26067   R_CategoryCONSULTANT
26068   R_CategoryDESIGNER
26069   R_CategoryDIGITAL_MEDIA
26070   R_CategoryFITNESS
26071   R_CategoryHEALTHCARE
26072   R_CategoryHR
26073   R_CategoryINFORMATION_TECHNOLOGY
26074   R_CategoryOTHER
26075   R_CategorySALES
26076   R_CategoryTEACHER
26077   U_Category
26078   V_CategoryADVOCATE
26079   V_CategoryBUSINESS_DEVELOPMENT
26080   V_CategoryCONSULTANT
26081   V_CategoryDESIGNER
26082   V_CategoryDIGITAL_MEDIA
26083   V_CategoryFITNESS
26084   V_CategoryHEALTHCARE
26085   V_CategoryHR
26086   V_CategoryINFORMATION_TECHNOLOGY
26087   V_CategoryOTHER
26088   V_CategorySALES
26089   V_CategoryTEACHER
26090   _WARN_
26091   Category
26092   );
26093   run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS3.TREE3_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      
NOTE: There were 405 observations read from the data set EMWS3.TEXTCLUSTER10_VALIDATE.
NOTE: There were 405 observations read from the data set EMWS3.TREE3_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 405 observations and 53 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
      
















30384   %let _cn = %sysfunc(getoption(CENTER));
30385   options nocenter;
30386   proc print data=EMWS3.Tree3_EMREPORTFIT noobs label;
30387   var STAT LABEL TRAIN
30388   VALIDATE
30389   TEST
30390   ;
30391   by TARGET TARGETLABEL;
30392   title9 ' ';
30393   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
30394   run;

NOTE: There were 8 observations read from the data set EMWS3.TREE3_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

30395   title10;
30396   options &_cn;

30397   proc sort data=EMWS3.Tree3_EMCLASSIFICATION nothreads;
30398   by DATAROLE TARGET TARGETLABEL;
30399   run;

NOTE: There were 89 observations read from the data set EMWS3.TREE3_EMCLASSIFICATION.
NOTE: The data set EMWS3.TREE3_EMCLASSIFICATION has 89 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

30400   %let _cn = %sysfunc(getoption(CENTER));
30401   options nocenter;
30402   proc print data=EMWS3.Tree3_EMCLASSIFICATION noobs label;
30403   var from into pct_row pct_col count percent
30404   ;
30405   by DATAROLE TARGET TARGETLABEL;
30406   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
30407   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
30408   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
30409   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
30410   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
30411   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
30412   where _TYPE_='PREDICTION';
30413   title9 ' ';
30414   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
30415   run;

NOTE: There were 89 observations read from the data set EMWS3.TREE3_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

30416   title9;
30417   title10;
30418   options &_cn;

30419   %let _cn = %sysfunc(getoption(CENTER));
30420   options nocenter;
30421   data EMWS3.Tree3_EMEVENTREPORT;
30422   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
30423   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
30423 ! FALSEEVENT
30424   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
30425      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
30426   FALSEEVENT=0;
30427   FALSENEVENT=0;
30428   TRUEEVENT=0;
30429   TRUENEVENT=0;
30430   set EMWS3.Tree3_EMEVENTREPORT;
30431   run;

NOTE: There were 2 observations read from the data set EMWS3.TREE3_EMEVENTREPORT.
NOTE: The data set EMWS3.TREE3_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

30432   proc print data=EMWS3.Tree3_EMEVENTREPORT noobs label;
30433   title9 ' ';
30434   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
30435   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
30436   run;

NOTE: There were 2 observations read from the data set EMWS3.TREE3_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

30437   title10;
30438   options &_cn;

30439   proc datasets library=EMWS3 nolist;
30440   modify Tree3_EMRANK;
30441   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
30442   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
30443   run;

NOTE: MODIFY was successful for EMWS3.TREE3_EMRANK.DATA.
30444   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.10 seconds
      cpu time            0.04 seconds
      

30445   %let _cn = %sysfunc(getoption(CENTER));
30446   options nocenter;
30447   proc print data=EMWS3.Tree3_EMRANK label noobs;
30448   var
30449   decile gain lift liftc resp respc N _meanP_;
30450   by
30451   notsorted DATAROLE
30452   notsorted TARGET
30453   notsorted TARGETLABEL
30454   ;
30455   title9 ' ';
30456   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
30457   run;

NOTE: There were 40 observations read from the data set EMWS3.TREE3_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

30458   title10;
30459   options &_cn;

30460   proc datasets library=EMWS3 nolist;
30461   modify Tree3_EMSCOREDIST;
30462   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
30463   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
30464   run;

NOTE: MODIFY was successful for EMWS3.TREE3_EMSCOREDIST.DATA.
30465   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.11 seconds
      cpu time            0.01 seconds
      

