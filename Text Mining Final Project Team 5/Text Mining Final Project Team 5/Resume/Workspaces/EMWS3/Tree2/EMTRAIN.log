*------------------------------------------------------------*
* Training Log
Date:                November 23, 2023
Time:                22:14:25
*------------------------------------------------------------*
15225  proc freq data=EMWS3.Tree2_VariableSet noprint;
15226  table ROLE*LEVEL/out=WORK.Tree2META;
15227  run;

NOTE: There were 112 observations read from the data set EMWS3.TREE2_VARIABLESET.
NOTE: The data set WORK.TREE2META has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
      

15228  proc print data=WORK.Tree2META label noobs;
15229  var ROLE LEVEL COUNT;
15230  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15231  title9 ' ';
15232  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15233  run;

NOTE: There were 7 observations read from the data set WORK.TREE2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

15234  title10;

15235  %let EMNORLEN = %DMNORLEN;
EMWS3.TextCluster5_TRAIN EMWS3.TextCluster5_TRAIN 
EMWS3.TextCluster5_TRAIN EMWS3.TextCluster5_TRAIN EMWS3 TextCluster5_TRAIN 
EMWS3.TextCluster5_TRAIN EMWS3.TextCluster5_TRAIN 
EMWS3.TextCluster5_TRAIN EMWS3.TextCluster5_TRAIN EMWS3 TextCluster5_TRAIN 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
15282  data WORK.Tree2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
15283  length ORDER $20;
15284  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
15285     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15286  set EMWS3.TREE2_CATEGORY_DM( where=(_TYPE_="TARGET"));
15287  NumLevels=12;
15288  select(upcase(ORDER));
15289  when('DESC') ORDER = 'Descending';
15290  when('ASC') ORDER = 'Ascending';
15291  when('FMTDESC') ORDER = 'Formatted Descending';
15292  when('FMTASC') ORDER = 'Formatted Ascending';
15293  otherwise ORDER = 'Descending';
15294  end;
15295  output;
15296  run;

NOTE: There were 1 observations read from the data set EMWS3.TREE2_CATEGORY_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

15297  title9 ' ';
15298  proc print data=WORK.Tree2_EVENT noobs label;
15299  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
15300  title9 ' ';
15301  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
15302  run;

NOTE: There were 1 observations read from the data set WORK.TREE2_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

15303  title10;

"No decisions defined for target "Category"." 
15304  proc print data = EMWS3.Tree2_Category_DM noobs label;
15305  var _type_ variable label;
15306  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
15307  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15308  title9 ' ';
15309  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
15310  run;

NOTE: There were 27 observations read from the data set EMWS3.TREE2_CATEGORY_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

15311  title10;

15312  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
16001  *------------------------------------------------------------*;
16002  * Tree2: Generation of macros and macro variables;
16003  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
16004  *------------------------------------------------------------*;

16005  %let EMEXCEPTIONSTRING=;
16006  *------------------------------------------------------------*;
16007  * TRAIN: Tree2;
16008  *------------------------------------------------------------*;
16009  %let EM_ACTION = TRAIN;
16010  %let syscc = 0;
16011  %macro main;
16012  
16013    %if %upcase(&EM_ACTION) = CREATE %then %do;
16014      filename temp catalog 'sashelp.emmodl.tree_create.source';
16015      %include temp;
16016      filename temp;
16017  
16018      %em_tree_create;
16019    %end;
16020  
16021     %else
16022     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16023  
16024         filename temp catalog 'sashelp.emmodl.tree_train.source';
16025         %include temp;
16026         filename temp;
16027         %em_tree_train;
16028     %end;
16029  
16030    %else
16031    %if %upcase(&EM_ACTION) = SCORE %then %do;
16032      filename temp catalog 'sashelp.emmodl.tree_score.source';
16033      %include temp;
16034      filename temp;
16035  
16036      %em_tree_score;
16037  
16038    %end;
16039  
16040    %else
16041    %if %upcase(&EM_ACTION) = REPORT %then %do;
16042  
16043         filename temp catalog 'sashelp.emmodl.tree_report.source';
16044         %include temp;
16045         filename temp;
16046  
16047         %em_tree_report;
16048     %end;
16049  
16050    %else
16051    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16052  
16053         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16054         %include temp;
16055         filename temp;
16056         %EM_TREE_OPENTREEVIEWER;
16057  
16058     %end;
16059  
16060    %else
16061    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16062  
16063         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16064         %include temp;
16065         filename temp;
16066         %EM_TREE_CLOSETREEVIEWER;
16067  
16068     %end;
16069  
16070  
16071     %doendm:
16072  %mend main;
16073  
16074  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
16076 +%macro em_tree_train;
16078 +   %if &EM_IMPORT_DATA eq %then %do;
16079 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
16080 +       %put &em_codebar;
16081 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
16082 +       %put &errormsg;
16083 +       %put &em_codebar;
16084 +       %goto doendm;
16085 +   %end;
16086 +   %else
16087 +       %let EMEXCEPTIONSTRING =;
16089 +   %if  &EM_NUM_TARGET lt 1 %then %do;
16090 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
16091 +        %put &em_codebar;
16092 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
16093 +        %put &errormsg;
16094 +        %put &em_codebar;
16095 +        %goto doendm;
16096 +   %end;
16098 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
16099 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
16100 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
16101 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
16102 +        %put &em_codebar;
16103 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
16104 +        %put &errormsg;
16105 +        %put &em_codebar;
16106 +        %goto doendm;
16107 +   %end;
16109 +   /* Initialize property macro variables */
16110 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
16111 +   %include temp;
16112 +   filename temp;
16114 +   %EM_SetProperties;
16116 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
16117 +   %EM_GETNAME(key=EMTREE, type=DATA);
16118 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
16119 +     /* if import eq Y and no importtable defined, throw an exception */
16120 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
16121 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
16122 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
16123 +         %put &em_codebar;
16124 +         %put &errmsg;
16125 +         %put &em_codebar;
16126 +         %goto doendm;
16127 +      %end;
16128 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
16129 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
16130 +         %put &em_codebar;
16131 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
16132 +         %put &errormsg;
16133 +         %put &em_codebar;
16134 +         %goto doendm;
16135 +      %end;
16136 +      %else %do;
16137 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
16138 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
16139 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
16140 +         %let varnumX = %sysfunc(varnum(&dsid,X));
16141 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
16142 +         %let dsid = %sysfunc(close(&dsid));
16143 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
16144 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
16145 +            %put &em_codebar;
16146 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
16147 +            %put &errormsg;
16148 +            %put &em_codebar;
16149 +            %goto doendm;
16150 +         %end;
16151 +      %end;
16152 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
16153 +         proc delete data=&EM_USER_EMTREE;
16154 +         run;
16155 +      %end;
16156 +   %end;
16157 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
16158 +      proc delete data=&EM_USER_EMTREE;
16159 +      run;
16160 +   %end;
16162 +   /* load tree macros */
16163 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
16164 +   %include temp;
16165 +   filename temp;
16167 +   /* data sets */
16168 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
16169 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
16170 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
16172 +   /* files */
16173 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
16175 +   /* check actual num of target levels */
16176 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
16177 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
16178 +                              nLevel=_nTargetLevel );
16179 +      %if &_nTargetLevel  > 2 %then %do;
16180 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
16181 +        %put &em_codebar;
16182 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
16183 +        %put &errormsg;
16184 +        %put &em_codebar;
16185 +        %goto doendm;
16186 +      %end;
16187 +   %end;
16189 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
16190 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16191 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16192 +        %let costflag=0;
16193 +        data _null_;
16194 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
16195 +          if eof then call symput("costflag", _N_);
16196 +        run;
16197 +        %if &costflag gt 0 %then %do;
16198 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
16199 +          %put &em_codebar;
16200 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
16201 +          %put &errormsg;
16202 +          %put &em_codebar;
16203 +          %goto doendm;
16204 +       %end;
16205 +     %end;
16206 +   %end;
16208 +   /* determine if multiple targets will be processed */
16209 +   %let em_tree_multipleTargets=N;
16210 +   %let em_tree_numTarget = 1;
16211 +   %let em_tree_targetVars=;
16213 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16214 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16215 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16216 +         %let em_tree_multipleTargets=N;
16217 +      %end;
16218 +      %else %do;
16219 +         /* create macro array of targets  */
16220 +         data _null_;
16221 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16222 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16223 +           if eof then
16224 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16225 +        run;
16227 +        %if &em_tree_numTarget gt 1 %then %do;
16228 +           %let em_tree_multipleTargets=Y;
16229 +        %end;
16230 +      %end;
16231 +   %end;
16233 +   /* create view of only necessary variable for performance reasons */
16234 +   %let tempData = &EM_LIB..em_&EM_NODEID;
16235 +   data &tempData / view=&tempData;
16236 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
16237 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
16238 +       %EM_TARGET
16239 +     %end;
16240 +     %else %do;
16241 +       %if &em_tree_numTarget ne 0 %then %do;
16242 +         %do i=1 %to &em_tree_numTarget;
16243 +            &&em_tree_targetVars&i
16244 +         %end;
16245 +       %end;
16246 +     %end;
16247 +     );
16248 +   run;
16250 +   /* run Tree procedure */
16251 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
16253 +   /* Check return code and throw exception if error is detected */
16254 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
16255 +   %if &syserr %then %do;
16256 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16257 +     %goto doendm;
16258 +   %end;
16260 +   /* add decision score code if multiple targets are processed */
16261 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
16262 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
16263 +   %end;
16265 +   /* create outfit dataset if multiple score statements have been executed */
16266 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
16268 +   /* create English Rules */
16269 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
16270 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
16271 +       %em_tree_makeEnglishRules;
16273 +       /* English Rules */
16274 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
16276 +     %end;
16277 +   filename x;
16279 +   %doendm:
16280 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
16281 +%macro EM_SetProperties;
16283 +   /* train properties */
16284 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
16285 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
16286 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
16287 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
16288 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
16289 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
16290 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
16291 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
16292 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
16293 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
16294 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
16295 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
16296 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
16297 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
16298 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
16299 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
16300 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
16301 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
16302 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
16303 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
16304 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
16305 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
16306 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
16307 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
16308 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
16309 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
16310 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
16311 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
16312 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
16313 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
16314 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
16315 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
16316 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
16317 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
16318 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
16319 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
16320 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
16321 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
16322 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
16323 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
16324 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
16326 +   /* properties for interactive sample */
16327 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
16328 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
16329 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
16330 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
16332 +   /* report properties */
16333 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
16334 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
16335 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
16336 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
16337 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
16338 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
16339 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
16340 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
16341 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
16342 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
16343 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
16344 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
16345 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
16347 +   /* score properties */
16348 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
16349 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
16351 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Deleting EMWS3.TREE2_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
16353 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
16354 +  %global &nLevel;
16355 +  proc dmdb batch data=&indata
16356 +    classout=_tmp_dmdbout;
16357 +    class &target;
16358 +  run;
16359 +  data _tmp_dmdbout;
16360 +    set _tmp_dmdbout;
16361 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
16362 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
16363 +  run;
16364 +  data _null_;
16365 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
16366 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
16367 +    %let dsid = %sysfunc(close(&dsid));
16368 +     call symput("&nLevel", put(&_obs, Best12.));
16369 +  run;
16371 +  proc datasets lib=work nolist;
16372 +     delete _tmp_dmdbout;
16373 +  run;
16374 +  quit;
16375 +%Mend EM_CheckBinaryTargetLevel;
16378 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
16380 +  /* determine the number of obs in training data */
16381 +  proc sql;
16382 +    reset noprint;
16383 +    select count(*) into :em_nobs from &indata;
16384 +  quit;
16386 +  /* determine the number of input variables */
16387 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
16388 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
16390 +  /* retrieve targetEvent from decmeta */
16391 +  %let targetEvent=;
16392 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
16393 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16394 +      data _null_;
16395 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
16396 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
16397 +      run;
16398 +    %end;
16399 +  %end;
16401 +  /* create targetTable if multipleTar eq Y */
16402 +  data temptarget;
16403 +    set &EM_DATA_VARIABLESET;
16404 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
16405 +  run;
16407 + /* data sets */
16408 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
16409 + %EM_GETNAME(key=EMTREE,        type=DATA);
16410 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
16411 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
16412 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
16413 + %EM_GETNAME(key=OUTNODES,      type=DATA);
16414 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
16415 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
16416 + %EM_GETNAME(key=OUTPATH,       type=DATA);
16417 + %EM_GETNAME(key=OUTRULES,      type=DATA);
16419 + /* files */
16420 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16421 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16423 + /* turn on pmml if requested */
16424 + %let nnpmml=0;
16425 + %if %symexist(EM_PMML) %then %do;
16426 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
16427 +       %let nnpmml=1;
16429 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
16430 +   %end;
16431 +%end;
16433 +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
16435 +%if &nnpmml or &numClassTarget %then %do;
16437 +    /* create dmdb needed for pmml generation */
16438 +    %let tree_maxlevel = 512;
16439 +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
16440 +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
16441 +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
16442 +      %end;
16443 +    %end;
16444 +    %if &tree_maxlevel gt 0 %then %do;
16445 +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
16446 +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
16447 +    %end;
16449 +    %let targetOrderString =;
16450 +    %let targetString = ;
16451 +    data _null_;
16452 +       length orderString nameString $10000;
16453 +       retain orderString nameString;
16454 +       set &em_data_variableset end=eof;
16455 +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
16456 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
16457 +       %end;
16458 +       %else %do;
16459 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
16460 +       %end;          select(order);
16461 +         when('')        order ='DESC';
16462 +         when('FMTASC')  order='ASCFMT';
16463 +         when('FMTDESC') order='DESFMT';
16464 +         otherwise;
16465 +       end;
16466 +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
16467 +       nameString = trim(nameString)!!' '!!trim(NAME);
16469 +       if eof then do;
16470 +          call symput('targetOrderString', trim(orderString));
16471 +          call symput('targetString', trim(nameString));
16472 +       end;
16473 +    run;
16475 +    %let arborkluge= "work._treeDMDB";
16477 +    proc dmdb batch data=&indata
16478 +    %if &nnpmml %then %do;
16479 +        PMML
16480 +    %end;
16481 +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
16483 +      %if &nnpmml %then %do;
16484 +           %if "%EM_ID" ne "" %then %do;
16485 +             id %EM_ID;
16486 +           %end;
16487 +           %if &EM_NUM_CLASS gt 0 %then %do;
16488 +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16489 +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16490 +                  &targetOrderString;
16491 +           %end;
16492 +           %if &EM_NUM_INTERVAL gt 0 %then %do;
16493 +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
16494 +           %end;
16495 +           target &targetString %EM_INTERVAL_TARGET;
16496 +           %if "%EM_FREQ" ne "" %then %do;
16497 +             freq %EM_FREQ;
16498 +           %end;
16499 +      %end;
16500 +      %else %do;
16501 +         class  &targetOrderString;
16502 +         target &targetString %EM_INTERVAL_TARGET;
16503 +      %end;
16504 +    run;
16505 +    quit;
16507 +    proc datasets lib=work nolist;
16508 +       delete classout varout;
16509 +    run;
16510 +    quit;
16512 + %end;
16515 + /* run Arbor procedure */
16516 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16517 +  proc arbor data=&INDATA
16519 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
16520 +    Leafsize = &EM_PROPERTY_LEAFSIZE
16521 +  %end;
16523 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
16524 +    Splitsize = &EM_PROPERTY_SPLITSIZE
16525 +  %end;
16527 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
16528 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
16529 +  %end;
16531 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
16532 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
16533 +  %end;
16535 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
16536 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
16537 +  %end;
16539 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
16540 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
16541 +  %end;
16542 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16543 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
16544 +  %end;
16545 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16546 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
16547 +  %end;
16549 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
16550 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
16551 +      alpha = &EM_PROPERTY_SIGLEVEL
16552 +    %end;
16553 +  %end;
16555 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
16556 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16557 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
16558 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
16559 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
16561 +        padjust =
16562 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
16563 +          &chaid
16564 +        %end;
16565 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
16566 +          DEPTH
16567 +        %end;
16568 +      %end;
16569 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
16570 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
16571 +         pvars = &num_inputs
16572 +      %end;
16573 +    %end;
16574 +  %end;
16575 +  %else %do;
16576 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16577 +         padjust = NONE
16578 +      %end;
16579 +  %end;
16581 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
16582 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
16583 +    Maxrules = &num_nrules
16584 +  %end;
16586 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
16587 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
16588 +    Maxsurrs = &num_nsurrs
16589 +  %end;
16591 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
16592 +     Missing=&EM_PROPERTY_MISSINGVALUE
16593 +  %end;
16595 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
16596 +     USEVARONCE
16597 +  %end;
16599 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
16600 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
16601 +  %end;
16604 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16605 +    event = "&targetEvent"
16606 +  %end;
16608 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16609 +     DECSEARCH
16610 +  %end;
16612 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
16613 +     PRIORSSEARCH
16614 +  %end;
16616 +  %if &arbor_1 ne %then %do;
16617 +    &arbor_1
16618 +  %end;
16620 +  %if &em_arbor ne %then %do;
16621 +     &em_arbor
16622 +  %end;
16623 +  ;
16624 + %end;
16625 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
16626 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
16627 +       Performance &EM_PROPERTY_PERFORMANCE
16628 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16629 +         nodesize=&EM_PROPERTY_NODESAMPLE
16630 +       %end;
16631 +       ;
16632 +       interact;
16633 + %end;
16634 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
16635 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
16636 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16637 +    %put &em_codebar;
16638 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16639 +    %put &errormsg;
16640 +    %put &em_codebar;
16641 +    %goto doendm;
16642 +   %end;
16643 +   %else %do;
16644 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16645 +       Performance &EM_PROPERTY_PERFORMANCE
16646 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16647 +         nodesize=&EM_PROPERTY_NODESAMPLE
16648 +       %end;
16649 +       ;
16650 +       interact;
16651 +   %end;
16652 + %end;
16654 + %else %do;
16655 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16656 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16657 +    %put &em_codebar;
16658 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16659 +    %put &errormsg;
16660 +    %put &em_codebar;
16661 +    %goto doendm;
16662 +   %end;
16663 +   %else %do;
16664 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16665 +       Performance &EM_PROPERTY_PERFORMANCE
16666 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16667 +         nodesize=&EM_PROPERTY_NODESAMPLE
16668 +       %end;
16669 +       ;
16670 +        interact;
16671 +   %end;
16672 + %end;
16674 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16675 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16676 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16677 +    %end;
16679 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16680 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16681 +    %end;
16683 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16684 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16685 +    %end;
16687 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16688 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16689 +    %end;
16691 +    %if "%EM_FREQ" ne "" %then %do;
16692 +       freq %EM_FREQ;
16693 +    %end;
16695 +    %if "&multipleTar" eq "Y" %then %do;
16696 +       /* cycle through all target vars in variableset */
16697 +       %let tdsid = %sysfunc(open(temptarget));
16698 +       %if &tdsid %then %do;
16699 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16700 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16701 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16702 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16703 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16704 +             target &var / level = &lvl
16705 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16706 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16707 +             %end;
16708 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16709 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16710 +             %end;
16711 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16712 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16713 +             %end;
16714 +          %end;
16715 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16716 +       %end;
16717 +       useTarget variable = %EM_TARGET;
16718 +    %end;
16719 +    %else %do;
16720 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16721 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16722 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16723 +      %end;
16724 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16725 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16726 +      %end;
16727 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16728 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16729 +      %end;
16730 +    %end;
16732 +    %if "&multipleTar" eq "N" %then %do;
16733 +      &EM_DEC_STATEMENT;
16734 +    %end;
16736 +    Performance &EM_PROPERTY_PERFORMANCE
16737 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16738 +      nodesize=&EM_PROPERTY_NODESAMPLE
16739 +    %end;
16740 +    ;
16742 +    %if "&intFlag" eq "Y" %then %do;
16743 +       INTERACT Largest;
16744 +       Train maxnewdepth=0;
16745 +    %end;
16747 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16748 +         Assess
16749 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16750 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16751 +              %put &em_codebar;
16752 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16753 +              %put &errormsg;
16754 +              %put &em_codebar;
16755 +            %end;
16756 +            %else %do;
16757 +               Validata=&EM_IMPORT_VALIDATE
16758 +            %end;
16759 +         %end;
16760 +         %else %do;
16761 +           NoValidata
16762 +         %end;
16763 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16764 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16765 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16766 +               %if &dsid %then %do;
16767 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16768 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16769 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16770 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16771 +                   %else %do;
16772 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16773 +                      %else %let measure= MISC;
16774 +                   %end;
16775 +                 %end;
16776 +               %end;
16777 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16778 +            %end;
16779 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16780 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16781 +                 %let measure=ASE;
16782 +              %end;
16783 +              %else %do;
16784 +                 %let measure=MISC;
16785 +              %end;
16786 +            %end;
16787 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16788 +              %let measure=ASE;
16789 +            %end;
16790 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16791 +               %let measure = LIFT;
16792 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16793 +               %if &dsid %then %do;
16794 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16795 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16796 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16797 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16798 +                 %end;
16799 +               %end;
16800 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16801 +            %end;
16802 +            measure=&measure
16803 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16804 +               event = "&targetEvent"
16805 +            %end;
16806 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16807 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16808 +            %end;
16809 +         %end;
16810 +         %if "&multipleTar" eq "N" %then %do;
16811 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16812 +               CV
16813 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16814 +                 CVNITer = &EM_PROPERTY_CVNITER
16815 +               %end;
16816 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16817 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16818 +               %end;
16819 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16820 +                 CVSeed = &EM_PROPERTY_CVSEED
16821 +               %end;
16822 +            %end;
16823 +         %end;
16824 +       %end;
16825 +      ;
16827 +      %if "&intFlag" ne "Y" %then %do;
16828 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16829 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16830 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16831 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16833 +          SUBTREE &subtree
16834 +          %if "&subtree" eq "NLEAVES" %then %do;
16835 +            =&EM_PROPERTY_NSUBTREE
16836 +          %end;
16837 +          ;
16838 +        %end;
16840 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16841 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16842 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16843 +          %end;
16844 +       %end;
16845 +      %end;
16846 + %end;
16849 + MakeMacro nleaves = nleaves;
16850 + save
16851 + %if "&EM_USER_EMTREE" ne "" %then %do;
16852 +   MODEL=&EM_USER_EMTREE
16853 + %end;
16854 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16855 +   SEQUENCE=&EM_USER_OUTSEQ
16856 + %end;
16857 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16858 +   IMPORTANCE=&EM_USER_OUTIMPORT
16859 + %end;
16860 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16861 +   NODESTAT=&EM_USER_OUTNODES
16862 + %end;
16863 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16864 +   SUMMARY=&EM_USER_OUTSUMMARY
16865 + %end;
16866 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16867 +   STATSBYNODE=&EM_USER_OUTSTATS
16868 + %end;
16869 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16870 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16871 + %end;
16872 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16873 +   Pathlistnonmissing=&EM_USER_OUTPATH
16874 + %end;
16875 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16876 +   RULES = &EM_USER_OUTRULES
16877 + %end;
16878 + ;
16880 + %if "&intFlag" ne "Y" %then %do;
16882 +   %let lookupString = ;
16883 +   %if ^%symexist(EM_OPTION) %then
16884 +      %let EM_OPTION=;
16886 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16887 +      %let lookupString = LOOKUP=SELECT;
16888 +   %end;
16890 +   %let codetext=;
16891 +   %let norescodetxt=;
16893 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16894 +     %let codetext=&codetext DUMMY;
16895 +     %let norescodetxt=&norescodetxt DUMMY;
16896 +   %end;
16897 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16898 +     %let codetext=&codetext NOLEAFID;
16899 +     %let norescodetxt=&norescodetxt NOLEAFID;
16900 +   %end;
16901 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16902 +     %let norescodetxt=&norescodetxt NOPRED;
16903 +   %end;
16905 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16906 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16908 +   %if &nnpmml %then %do;
16909 +     code pmml;
16910 +   %end;
16912 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16913 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16914 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16915 +   %end;
16916 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16917 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16918 +   %end;
16919 + %end;
16921 + run;
16922 + quit;
16924 + /*%em_checkerror(); */
16925 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16926 +   /* Delete DMDB catalog */
16927 +   proc datasets lib=work nolist;
16928 +       delete _treeDMDB / mt=cat;
16929 +  run;
16930 +  %end;
16932 + %if &nnpmml %then %do;
16933 +    ods pmml close;
16934 + %end;
16936 +  %doendm:
16938 +%mend em_tree_runTreeProcedure;
16940 +%macro em_tree_createFitStats( multipleTar= );
16943 +  /* create targetTable is multipleTar eq Y */
16944 +  data temptarget;
16945 +    set &EM_DATA_VARIABLESET;
16946 +    where ROLE="TARGET";
16947 +  run;
16949 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16950 +   data &EM_USER_EMOUTFIT;
16951 +     length target $32;
16952 +     merge work.fit_train
16953 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16954 +       work.fit_valid
16955 +     %end;
16956 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16957 +       work.fit_test
16958 +     %end;
16959 +     ;
16960 +     %if "&multipleTar" eq "N" %then %do;
16961 +       target="%EM_TARGET";
16962 +     %end;
16963 +     %else %do;
16964 +       target = _TARGET_;
16965 +     %end;
16966 +     drop _NW_ _SUMW_
16967 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16968 +        _VSUMW_
16969 +     %end;
16970 +     ;
16971 +   run;
16973 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16974 +     proc datasets library=work nolist;
16975 +       delete fit_valid;
16976 +     run;
16977 +   %end;
16978 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16979 +     proc datasets library=work nolist;
16980 +       delete fit_test;
16981 +     run;
16982 +   %end;
16984 +%mend em_tree_createFitStats;
16987 +%macro em_tree_makeEnglishRules;
16989 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16990 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16992 +  /* verify that necessary tables exist and if not, skip processing */
16993 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16994 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16995 +    %goto doendm;
16996 +  %end;
16997 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16998 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16999 +    %goto doendm;
17000 +  %end;
17002 +  /* determine length of variable in outpath dataset */
17003 +  %let vlength= ;
17004 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
17005 +  %if &dsid ne %then %do;
17006 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
17007 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
17008 +  %end;
17009 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
17011 +  data tempoutpath;
17012 +    length varname $&vlength;
17013 +    retain varname;
17014 +    set &EM_USER_OUTPATH;
17016 +    if ^missing(variable) then varname=variable;
17017 +    else if ^missing(var_name) then varname=var_name;
17018 +    output;
17019 +  run;
17021 +  /* create an array of generated predicted variable names */
17022 +  %let tree_pred_vars = ;
17023 +  %let tree_pred_label = ;
17024 +  %let numpred= 0;
17025 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
17027 +    data _null_;
17028 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
17029 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
17030 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
17031 +     if eof then
17032 +       call symput('numpred', strip(put(_N_, BEST.)));
17033 +    run;
17034 +  %end;
17036 +  /* determine if NPRIORS exists in outnodes  */
17037 +  %local nprior_flag;
17038 +  data _null_;
17039 +    set &EM_USER_OUTNODES(obs=2) end=eof;
17040 +    if eof then do;
17041 +      call symput('nprior_flag', strip(put(npriors, best.)));
17042 +    end;
17043 +  run;
17045 +  proc sort data=tempoutpath; by node; run;
17046 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
17048 +  data tempoutpath;
17049 +    merge tempoutpath(in=_a) outnodes(keep= node
17050 +    %if "&nprior_flag" ne "." %then %do;
17051 +      NPRIORS
17052 +    %end;
17053 +    %else %do;
17054 +      N
17055 +    %end;
17056 +    %if &numpred gt 0 %then %do;
17057 +      %do i=1 %to &numpred;
17058 +        &&tree_pred_vars&i
17059 +      %end;
17060 +    %end;
17061 +    );
17062 +    by node;
17063 +    if _a;
17064 +  run;
17066 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
17068 +  data _null_;
17069 +    file x;
17070 +    set tempoutpath;
17071 +    by node descending varname;
17072 +    retain origvar oldnode string;
17073 +    length origvar $32 oldnode 8 string $5000;
17075 +    if _N_ = 1 then do;
17076 +      origvar = varname;
17077 +      oldnode = node;
17078 +    end;
17080 +    if first.node then do;
17081 +       put "&EM_CODEBAR";
17082 +       put " Node = " node;
17083 +       put "&EM_CODEBAR";
17084 +    end;
17086 +      if first.varname then do;
17087 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
17088 +            if MISSING(CHARACTER_VALUE) then do;
17089 +             if NUMERIC_VALUE ne .  then do;
17090 +              if ^first.node then do;
17091 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
17092 +              end;
17093 +              else do;
17094 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
17095 +              end;
17096 +             end;
17097 +            end;
17098 +            else do;
17099 +              if ^first.node then do;
17100 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
17101 +              end;
17102 +              else do;
17103 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
17104 +              end;
17105 +             end;
17106 +         end;
17107 +         else if RELATION in ("=") then do;
17108 +            if ^first.node then do;
17109 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
17110 +            end;
17111 +            else do;
17112 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
17113 +            end;
17114 +         end;
17115 +         else if RELATION in ("ISMISSING") then do;
17116 +            if ^first.node then do;
17117 +              string = " AND "|| strip(varname) || " equals Missing";
17118 +            end;
17119 +            else do;
17120 +              string = "if "|| strip(varname) ||" equals Missing";
17121 +            end;
17122 +         end;
17123 +         else if RELATION in ("ISNOTMISSING") then do;
17124 +            if ^first.node then do;
17125 +              string = " AND "|| strip(varname) || " equals All Values";
17126 +            end;
17127 +            else do;
17128 +              string = "if "|| strip(varname) ||" equals All Values";
17129 +            end;
17130 +         end;
17131 +         if ^missing(varname) then origvar = varname;
17132 +         oldnode=node;
17134 +      end;
17135 +      else do;
17136 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
17137 +          if MISSING(CHARACTER_VALUE) then do;
17138 +           if  NUMERIC_VALUE ne .  then do;
17139 +            if ^MISSING(string) then
17140 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
17141 +            else
17142 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
17143 +           end;
17144 +          end;
17145 +          else do;
17146 +            if ^MISSING(string) then
17147 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
17148 +            else
17149 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
17150 +          end;
17152 +         end;
17153 +         else if RELATION in ("=") then do;
17154 +           string = strip(string)||", "||strip(character_value);
17155 +         end;
17156 +         else if RELATION in ("ISMISSING") then do;
17158 +         end;
17159 +         if ^missing(varname) then origvar = varname;
17160 +         oldnode=node;
17161 +      end;
17162 +      if last.varname then do;
17163 +         if RELATION in ("ISMISSING") then do;
17164 +           if ^first.varname then do;
17165 +             string = strip(string) || " or MISSING";
17166 +           end;
17167 +         end;
17168 +         put string;
17169 +         if ^missing(varname) then origvar = varname;
17170 +         oldnode=node;
17171 +      end;
17173 +      if last.node then do;
17174 +         put "then ";
17175 +         put " Tree Node Identifier   = " node;
17177 +         %if "&nprior_flag" ne "." %then %do;
17178 +           put " Number of Observations = " NPRIORS;
17179 +         %end;
17180 +         %else %do;
17181 +           put " Number of Observations = " N;
17182 +         %end;
17184 +         %if &numpred gt 0 %then %do;
17185 +           %do i=1 %to &numpred;
17186 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
17187 +           %end;
17188 +         %end;
17190 +         put " ";
17191 +         if ^missing(varname) then origvar = varname;
17192 +         oldnode=node;
17193 +      end;
17195 +  run;
17197 +  proc datasets lib=work nolist;
17198 +    delete tempoutpath outnodes;
17199 +  run;
17201 +  %doendm:
17202 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: DATA STEP view saved on file EMWS3.EM_TREE2.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: View EMWS3.EM_TREE2.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      
NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER5_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE2_CATEGORY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Records processed = 674   Memory used = 511K.
NOTE: View EMWS3.EM_TREE2.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      
NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER5_TRAIN.
NOTE: There were 674 observations read from the data set EMWS3.EM_TREE2.
NOTE: The data set WORK.CLASSOUT has 12 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      


NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: 1595084 kilobytes of physical memory.
NOTE: Will use 674 out of 674 training cases.
NOTE: Using memory pool with 95209472 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 1813400 bytes of work memory.
NOTE: The subtree sequence contains 15 subtrees. The largest has 29 nodes and 15 leaves.
NOTE: Using subtree with 17 nodes and 9 leaves.
NOTE: Using subtree with 17 nodes and 9 leaves.
NOTE: Created macro variable NLEAVES equal to 9.
NOTE: The data set EMWS3.TREE2_OUTIMPORT has 100 observations and 6 variables.
NOTE: The data set EMWS3.TREE2_EMTREE has 2465 observations and 4 variables.
NOTE: The data set EMWS3.TREE2_OUTNODES has 17 observations and 54 variables.
NOTE: The data set EMWS3.TREE2_OUTPATH has 98 observations and 7 variables.
NOTE: The data set EMWS3.TREE2_OUTRULES has 263 observations and 6 variables.
NOTE: The data set EMWS3.TREE2_OUTSEQ has 15 observations and 20 variables.
NOTE: The data set EMWS3.TREE2_OUTSTATS has 459 observations and 5 variables.
NOTE: The data set EMWS3.TREE2_OUTSUMMARY has 104 observations and 16 variables.
NOTE: The data set EMWS3.TREE2_OUTTOPOLOGY has 17 observations and 5 variables.
NOTE: External file C:\Users\lahar\OneDrive\Desktop\Data Mining\Resume\Workspaces\EMWS3\Tree2\TREEFLOW.sas opened.
NOTE: External file C:\Users\lahar\OneDrive\Desktop\Data Mining\Resume\Workspaces\EMWS3\Tree2\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: View EMWS3.EM_TREE2.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.03 seconds
      
NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER5_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
NOTE: The data set WORK.FIT_TEST has 1 observations and 8 variables.


NOTE: View EMWS3.EM_TREE2.VIEW used (Total process time):
      real time           0.71 seconds
      cpu time            0.34 seconds
      
NOTE: There were 674 observations read from the data set EMWS3.TEXTCLUSTER5_TRAIN.
NOTE: There were 674 observations read from the data set EMWS3.EM_TREE2.
NOTE: The data set WORK._NAMEDAT has 12 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.71 seconds
      cpu time            0.34 seconds
      


NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE2_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS3.TREE2_EMOUTFIT has 1 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK.FIT_VALID (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK.FIT_TEST (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 98 observations read from the data set EMWS3.TREE2_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 98 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 12 observations read from the data set EMWS3.TREE2_CATEGORY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set EMWS3.TREE2_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 98 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 98 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 17 observations read from the data set EMWS3.TREE2_OUTNODES.
NOTE: The data set WORK.OUTNODES has 17 observations and 54 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 98 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 17 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 98 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 98 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 98 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      278:176   288:190   434:191   441:195   
NOTE: The file X is:
      Filename=C:\Users\lahar\OneDrive\Desktop\Data Mining\Resume\Workspaces\EMWS3\Tree2\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=23Nov2023:22:14:28,
      Create Time=23Nov2023:22:14:28

NOTE: 207 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 75.
NOTE: There were 98 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

NOTE: Fileref X has been deassigned.
17204  
17205  *------------------------------------------------------------*;
17206  * End TRAIN: Tree2;
17207  *------------------------------------------------------------*;

17208  *------------------------------------------------------------*;
17209  * Close any missing semi colons;
17210  *------------------------------------------------------------*;
17211  ;
17212  ;
17213  ;
17214  ;
17215  quit;
17216  *------------------------------------------------------------*;
17217  * Close any unbalanced quotes;
17218  *------------------------------------------------------------*;
17219  /*; *"; *'; */
17220  ;
17221  run;
17222  quit;
17223  /* Reset EM Options */
17224  options formchar="|----|+|---+=|-/\<>*";
17225  options nocenter ls=256 ps=10000;
17226  goptions reset=all device=GIF NODISPLAY;

17227  proc sort data=WORK.EM_USER_REPORT;
17228  by ID VIEW;
17229  run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

